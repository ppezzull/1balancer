# ===================================
# 1BALANCER ENVIRONMENT CONFIGURATION
# ===================================
# Copy this file to .env and fill in your values
# This is the centralized configuration for all packages

# ===================================
# API KEYS & AUTHENTICATION
# ===================================

# 1inch API Configuration (REQUIRED for proxy deployment)
# 
# FOR HACKATHONS (Recommended - No KYC):
# - Contact ETHGlobal organizers for 1inch API key access
# - They provide special keys without KYC requirements
# - Fastest method for hackathon participants
#
# FOR GENERAL DEVELOPMENT:
# - Visit: https://portal.1inch.dev/
# - Create account and complete KYC if required  
# - Generate API key for your project
#
# IMPORTANT: This is the primary API key variable used throughout the project
# The proxy deployment will automatically use this key
ONEINCH_API_KEY=your-1inch-api-key-here

# Alchemy API Key (REQUIRED for production)
# Sign up at https://www.alchemy.com/ and create a new app
# Select "Ethereum" as chain and get your API key from the dashboard
# Used for reliable blockchain RPC access
ALCHEMY_API_KEY=your-alchemy-api-key-here
NEXT_PUBLIC_ALCHEMY_API_KEY=your-alchemy-api-key-here  # Frontend access

# Infura API Key (Optional - alternative to Alchemy)
# Get from: https://www.infura.io/
# Another reliable RPC provider option
INFURA_API_KEY=your-infura-api-key-here

# Etherscan API Keys
# Used for contract verification and blockchain data
# Get from: https://etherscan.io/apis (for Ethereum mainnet)
ETHERSCAN_API_KEY=your-etherscan-api-key-here
ETHERSCAN_V2_API_KEY=your-etherscan-api-key-here  # V2 API support

# Base Network Block Explorer
# Get from: https://basescan.org/apis
# Required for verifying contracts on Base network
BASESCAN_API_KEY=your-basescan-api-key-here

# Privy Authentication (REQUIRED for social login)
# Visit https://console.privy.io to create an account
# Create a new project and get your App ID
# Enable "Ethereum wallets" in dashboard under Login Methods
# Also enable any social providers you want (Google, Twitter, etc)
NEXT_PUBLIC_PRIVY_APP_ID=your-privy-app-id-here

# ===================================
# NETWORK CONFIGURATION
# ===================================

# Development Ports
FRONTEND_PORT=3000
HARDHAT_PORT=8545
ORCHESTRATOR_PORT=8080
NEAR_BRIDGE_PORT=8090
NEAR_LOCAL_PORT=3030
SOLVER_PORT=8091

# Network RPC URLs
BASE_RPC_URL=https://mainnet.base.org
BASE_MAINNET_RPC_URL=https://mainnet.base.org
BASE_SEPOLIA_RPC_URL=https://sepolia.base.org
LOCALHOST_RPC_URL=http://localhost:8545

# Fork Configuration for Testing
# Use yarn fork:<network> commands or HARDHAT_NETWORK=<network> yarn fork
# Examples: yarn fork:base, yarn fork:sepolia, yarn fork:mainnet
# Optional: Set a specific block number for deterministic testing
FORK_BLOCK_NUMBER=  8887000

# Chain IDs
LOCALHOST_CHAIN_ID=31337
BASE_CHAIN_ID=8453
BASE_SEPOLIA_CHAIN_ID=84532

# ===================================
# DEPLOYMENT CONFIGURATION
# ===================================

# Deployer Private Key (ONLY FOR DEVELOPMENT)
# Default is Hardhat's first test account - DO NOT USE IN PRODUCTION
# For production, use hardware wallets or secure key management
DEPLOYER_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

# Encrypted Private Key Storage
# Used by Scaffold-ETH 2 account management system
# Generated by running: yarn generate or yarn account:import
# This allows secure storage of private keys with password protection
DEPLOYER_PRIVATE_KEY_ENCRYPTED=

# Contract Deployment Settings
DEPLOY_CHAIN=localhost
CHAIN_ID=8453  # Base mainnet chain ID
REPORT_GAS=true

# ===================================
# NEAR PROTOCOL CONFIGURATION
# ===================================
# You have two options for NEAR integration:
# Option 1: Native NEAR (Rust contracts) - RECOMMENDED for full cross-chain support
# Option 2: Aurora EVM (Solidity contracts) - Use if you prefer EVM/MetaMask

# OPTION 1: NATIVE NEAR CONFIGURATION
# -----------------------------------
# Create account at: https://wallet.testnet.near.org
# Or use NEAR CLI: npm install -g near-cli

# NEAR Environment
NEAR_ENV=testnet  # Options: testnet, mainnet, localnet
NEAR_NETWORK_ID=testnet

# NEAR Account Credentials (for native NEAR deployment)
# After creating your testnet account, export these:
NEAR_MASTER_ACCOUNT=your-account.testnet  # Your NEAR testnet account
NEAR_PRIVATE_KEY=ed25519:your-private-key-here  # Your account's private key

# NEAR Contract Names (will be deployed as subaccounts)
NEAR_HTLC_CONTRACT=fusion-htlc.testnet  # Auto-detected from deployment
NEAR_SOLVER_CONTRACT=solver-registry.testnet

# NEAR MPC Configuration (for cross-chain signatures)
NEAR_MPC_CONTRACT_ID=v1.signer.testnet

# OPTION 2: AURORA EVM CONFIGURATION (Alternative)
# ------------------------------------------------
# Use Aurora if you prefer EVM/MetaMask over native NEAR
# Aurora Testnet RPC: https://testnet.aurora.dev
# Chain ID: 1313161555
# Explorer: https://testnet.aurora.dev
# Faucet: https://aurora.dev/faucet
#
# To use Aurora instead:
# 1. Add Aurora Testnet to MetaMask
# 2. Get testnet ETH from Aurora faucet
# 3. Deploy EVM contracts to Aurora instead of native NEAR
# 4. No NEAR account or NEAR_PRIVATE_KEY needed
#
# Aurora Configuration (if using Aurora instead of native NEAR):
# AURORA_RPC_URL=https://testnet.aurora.dev
# AURORA_CHAIN_ID=1313161555

# ===================================
# FRONTEND CONFIGURATION
# ===================================

# Public URLs (These are exposed to the browser)
NEXT_PUBLIC_FRONTEND_URL=http://localhost:3000
NEXT_PUBLIC_ORCHESTRATOR_URL=http://localhost:8080
NEXT_PUBLIC_NEAR_BRIDGE_URL=http://localhost:8090

# 1inch Proxy Configuration
# Deploy proxy from: https://github.com/Tanz0rz/1inch-vercel-proxy
NEXT_PUBLIC_PROXY_URL=https://your-1inch-proxy.vercel.app
NEXT_PUBLIC_ONE_INCH_API_URL=https://your-1inch-proxy.vercel.app/api

# Feature Flags
NEXT_PUBLIC_ENABLE_TESTNETS=true
NEXT_PUBLIC_ENABLE_BURNER_WALLET=true

 # Orchestrator Private Key (TEST ONLY - DO NOT USE IN PRODUCTION)
# This is a well-known test private key from Hardhat
ORCHESTRATOR_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80


# ===================================
# DEVELOPMENT SETTINGS
# ===================================

# Logging
LOG_LEVEL=info
DEBUG=false

# Testing
TEST_TIMEOUT=300000
FORK_BLOCK_NUMBER=18500000

# Analytics (Optional)
NEXT_PUBLIC_VERCEL_ANALYTICS_ID=

# ===================================
# DOCKER CONFIGURATION (Optional)
# ===================================

# Docker settings if using containerized deployment
DOCKER_REGISTRY=
DOCKER_IMAGE_TAG=latest