const fs = require('fs');
const path = require('path');
const prettier = require('prettier');

async function main() {
  console.log('üîß Generating Scaffold-ETH contracts for BASE Sepolia...');
  
  const DEPLOYMENTS_DIR = './deployments';
  const TARGET_DIR = '../nextjs/contracts/';
  
  // Read existing deployedContracts.ts
  const existingContent = fs.readFileSync(path.join(TARGET_DIR, 'deployedContracts.ts'), 'utf8');
  
  // Parse to get existing contracts
  const existingMatch = existingContent.match(/const deployedContracts = ({[\s\S]*}) as const/);
  if (!existingMatch) {
    console.error('Could not parse existing contracts');
    return;
  }
  
  // Parse existing object
  let contractsObj;
  try {
    // Remove TypeScript type annotations for parsing
    const cleanedContent = existingMatch[1]
      .replace(/as const/g, '')
      .replace(/satisfies GenericContractsDeclaration/g, '');
    eval(`contractsObj = ${cleanedContent}`);
  } catch (e) {
    console.error('Error parsing contracts:', e);
    contractsObj = {};
  }
  
  // Add BASE Sepolia contracts
  const baseSepoliaChainId = 84532;
  if (!contractsObj[baseSepoliaChainId]) {
    contractsObj[baseSepoliaChainId] = {};
  }
  
  // Read BASE Sepolia deployments
  const baseSepoliaPath = path.join(DEPLOYMENTS_DIR, 'baseSepolia');
  if (fs.existsSync(baseSepoliaPath)) {
    const files = fs.readdirSync(baseSepoliaPath);
    
    for (const file of files) {
      if (file.endsWith('.json') && !file.includes('solcInputs')) {
        const contractName = file.replace('.json', '');
        
        // Skip proxy-related files
        if (contractName.includes('_Implementation') || contractName.includes('_Proxy')) {
          continue;
        }
        
        const deployment = JSON.parse(fs.readFileSync(path.join(baseSepoliaPath, file), 'utf8'));
        
        // For FusionPlusHub, mark it as external since it's a proxy
        if (contractName === 'FusionPlusHub') {
          contractsObj[baseSepoliaChainId][contractName] = {
            address: deployment.address,
            abi: deployment.abi,
            inheritedFunctions: {},
            external: true, // Mark as external to show the icon
          };
        } else {
          contractsObj[baseSepoliaChainId][contractName] = {
            address: deployment.address,
            abi: deployment.abi,
            inheritedFunctions: {},
          };
        }
      }
    }
  }
  
  // Generate the file content
  const generatedContractComment = `/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */`;
  
  const fileContent = Object.entries(contractsObj).reduce((content, [chainId, chainConfig]) => {
    return `${content}${parseInt(chainId).toFixed(0)}:${JSON.stringify(chainConfig, null, 2)},`;
  }, '');
  
  const output = `${generatedContractComment}
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {${fileContent}} as const;

export default deployedContracts satisfies GenericContractsDeclaration;`;
  
  // Format with prettier
  const formatted = await prettier.format(output, {
    parser: 'typescript',
    semi: true,
    singleQuote: false,
  });
  
  // Write the file
  fs.writeFileSync(path.join(TARGET_DIR, 'deployedContracts.ts'), formatted);
  
  console.log('‚úÖ Generated Scaffold contracts with BASE Sepolia support');
  console.log('üìù Updated: packages/nextjs/contracts/deployedContracts.ts');
  console.log('');
  console.log('üéØ Next steps:');
  console.log('1. Start the frontend: yarn start');
  console.log('2. Go to Debug Contracts page');
  console.log('3. Select BASE Sepolia network in your wallet');
  console.log('4. Interact with FusionPlusHub contract!');
}

main().catch(console.error);