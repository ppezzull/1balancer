{
  "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_limitOrderProtocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NoStablecoin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "balancer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isTimeBased",
          "type": "bool"
        }
      ],
      "name": "BalancerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assetAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_percentages",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_driftPercentage",
          "type": "uint256"
        }
      ],
      "name": "createDriftBalancer",
      "outputs": [
        {
          "internalType": "address",
          "name": "balancer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assetAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_percentages",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "createTimeBalancer",
      "outputs": [
        {
          "internalType": "address",
          "name": "balancer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitOrderProtocol",
      "outputs": [
        {
          "internalType": "contract ILimitOrderProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stablecoins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userDriftBalancers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userTimeBalancers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1099c739c83c35b08ff5a3113ff8ace8b3975bf293abd1eaf370ba95af3b13a2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
    "transactionIndex": 0,
    "gasUsed": "9436748",
    "logsBloom": "0x
    "blockHash": "0x10a37649297014f5ee31136dab1ca7de6fc2be79c2d53c1e25503ba50bc32740",
    "transactionHash": "0x1099c739c83c35b08ff5a3113ff8ace8b3975bf293abd1eaf370ba95af3b13a2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32,
        "transactionHash": "0x1099c739c83c35b08ff5a3113ff8ace8b3975bf293abd1eaf370ba95af3b13a2",
        "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x10a37649297014f5ee31136dab1ca7de6fc2be79c2d53c1e25503ba50bc32740"
      }
    ],
    "blockNumber": 32,
    "cumulativeGasUsed": "9436748",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    [
      "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
    ],
    "0x0165878A594ca255338adfa4d48449f69242Eb8F"
  ],
  "numDeployments": 1,
  "solcInputHash": "8d8836d5166d6244657f7906e4c294ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_limitOrderProtocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NoStablecoin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"balancer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTimeBased\",\"type\":\"bool\"}],\"name\":\"BalancerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assetAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_driftPercentage\",\"type\":\"uint256\"}],\"name\":\"createDriftBalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"balancer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assetAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"createTimeBalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"balancer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOrderProtocol\",\"outputs\":[{\"internalType\":\"contract ILimitOrderProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stablecoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDriftBalancers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTimeBalancers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"BalancerCreated(address,address,bool)\":{\"details\":\"Emitted when a new balancer is created\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"userDriftBalancers\":{\"details\":\"Lists of deployed drift and time balancers per user\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDriftBalancer(address[],uint256[],uint256[],uint256)\":{\"notice\":\"Create a new OptimizedDriftBalancer\"},\"createTimeBalancer(address[],uint256[],uint256[],uint256)\":{\"notice\":\"Create a new OptimizedTimeBalancer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/portfolio/factory/OptimizedBalancerFactory.sol\":\"OptimizedBalancerFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"contracts/portfolio/balancers/OptimizedDriftBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"../modules/OptimizedBaseBalancer.sol\\\";\\n\\ncontract OptimizedDriftBalancer is OptimizedBaseBalancer {\\n    uint256 public driftPercentage;\\n\\n    event DriftPercentageUpdated(uint256 newDriftPercentage);\\n    event RebalanceNeeded(address[] tokens, uint256[] deviations);\\n\\n    constructor(\\n        address _owner,\\n        address _factory,\\n        address[] memory _assetAddresses,\\n        uint256[] memory _percentages,\\n        uint256 _driftPercentage,\\n        address[] memory _stablecoins,\\n        address _limitOrderProtocol\\n    ) OptimizedBaseBalancer(_owner, _factory, _assetAddresses, _percentages, _stablecoins, _limitOrderProtocol) {\\n        driftPercentage = _driftPercentage;\\n    }\\n\\n    function triggerRebalance() external {\\n        _checkAndTriggerRebalance();\\n    }\\n\\n    function updateDriftPercentage(uint256 _newDriftPercentage) external onlyOwner {\\n        driftPercentage = _newDriftPercentage;\\n        emit DriftPercentageUpdated(_newDriftPercentage);\\n    }\\n\\n    function _checkAndTriggerRebalance() internal {\\n        uint256 totalValue = getTotalValue();\\n        if (totalValue == 0) return;\\n\\n        uint256[] memory groupDeviations = new uint256[](assetGroupsCount);\\n        address[][] memory groupTokens = new address[][](assetGroupsCount);\\n        \\n        bool rebalanceNeeded = false;\\n        \\n        for (uint256 groupId = 0; groupId < assetGroupsCount; groupId++) {\\n            AssetGroup memory group = assetGroups[groupId];\\n            uint256 groupValue = 0;\\n            \\n            // Calculate total value for this group\\n            for (uint256 i = 0; i < group.tokens.length; i++) {\\n                uint256 balance = IERC20(group.tokens[i]).balanceOf(address(this));\\n                groupValue += getPrice(group.tokens[i], balance);\\n            }\\n            \\n            uint256 currentPercentage = (groupValue * 100) / totalValue;\\n            uint256 targetPercentage = group.percentage;\\n            \\n            // Calculate deviation\\n            uint256 deviation = currentPercentage > targetPercentage \\n                ? currentPercentage - targetPercentage \\n                : targetPercentage - currentPercentage;\\n            \\n            groupDeviations[groupId] = deviation;\\n            groupTokens[groupId] = group.tokens;\\n            \\n            if (deviation > driftPercentage) {\\n                rebalanceNeeded = true;\\n            }\\n        }\\n        \\n        if (rebalanceNeeded) {\\n            // Flatten tokens array for the event\\n            address[] memory allTokens = new address[](assetAddresses.length);\\n            uint256[] memory allDeviations = new uint256[](assetAddresses.length);\\n            \\n            uint256 tokenIndex = 0;\\n            for (uint256 groupId = 0; groupId < assetGroupsCount; groupId++) {\\n                for (uint256 i = 0; i < groupTokens[groupId].length; i++) {\\n                    allTokens[tokenIndex] = groupTokens[groupId][i];\\n                    allDeviations[tokenIndex] = groupDeviations[groupId];\\n                    tokenIndex++;\\n                }\\n            }\\n            \\n            emit RebalanceNeeded(allTokens, allDeviations);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0b84923cc34c11ee31a5fb2f0549413c675342d550866859414c881bd52557c\",\"license\":\"MIT\"},\"contracts/portfolio/balancers/OptimizedTimeBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"../modules/OptimizedBaseBalancer.sol\\\";\\n\\ncontract OptimizedTimeBalancer is OptimizedBaseBalancer {\\n    uint256 public interval;\\n    uint256 public lastRebalance;\\n\\n    event IntervalUpdated(uint256 newInterval);\\n    event RebalanceNeeded(uint256[] allocations, uint256 timestamp);\\n\\n    constructor(\\n        address _owner,\\n        address _factory,\\n        address[] memory _assetAddresses,\\n        uint256[] memory _percentages,\\n        uint256 _interval,\\n        address[] memory _stablecoins,\\n        address _limitOrderProtocol\\n    ) OptimizedBaseBalancer(_owner, _factory, _assetAddresses, _percentages, _stablecoins, _limitOrderProtocol) {\\n        interval = _interval;\\n        lastRebalance = block.timestamp;\\n    }\\n\\n    function triggerTimeRebalance() external {\\n        require(block.timestamp >= lastRebalance + interval, \\\"Too early\\\");\\n        lastRebalance = block.timestamp;\\n        \\n        uint256[] memory current = currentAllocations();\\n        emit RebalanceNeeded(current, block.timestamp);\\n    }\\n\\n    function setRebalanceInterval(uint256 _interval) external onlyOwner {\\n        interval = _interval;\\n        emit IntervalUpdated(_interval);\\n    }\\n\\n    function currentAllocations() public view returns (uint256[] memory) {\\n        uint256[] memory allocations = new uint256[](assetGroupsCount);\\n        for (uint256 i = 0; i < assetGroupsCount; i++) {\\n            allocations[i] = assetGroups[i].percentage;\\n        }\\n        return allocations;\\n    }\\n}\\n\",\"keccak256\":\"0xc732c493c004373315b35c1b6d8a4623e84a8bcc16a33a31919c0bdc16c203cb\",\"license\":\"MIT\"},\"contracts/portfolio/factory/OptimizedBalancerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/*\\n * OptimizedBalancerFactory\\n *\\n * Optimized factory contract that deploys OptimizedDriftBalancer or OptimizedTimeBalancer\\n * instances with reduced contract sizes through library usage.\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../balancers/OptimizedDriftBalancer.sol\\\";\\nimport \\\"../balancers/OptimizedTimeBalancer.sol\\\";\\nimport \\\"../interfaces/ILimitOrderProtocol.sol\\\";\\n\\n\\ncontract OptimizedBalancerFactory is Ownable {\\n    address public priceFeed;\\n    address[] public stablecoins;\\n    ILimitOrderProtocol public limitOrderProtocol;\\n\\n    constructor(address _priceFeed, address[] memory _stablecoins, address _limitOrderProtocol) Ownable(msg.sender) {\\n        priceFeed = _priceFeed;\\n        stablecoins = _stablecoins;\\n        limitOrderProtocol = ILimitOrderProtocol(_limitOrderProtocol);\\n    }\\n\\n    /// @dev Lists of deployed drift and time balancers per user\\n    mapping(address => address[]) public userDriftBalancers;\\n    mapping(address => address[]) public userTimeBalancers;\\n\\n    /// @dev Emitted when a new balancer is created\\n    event BalancerCreated(address indexed owner, address indexed balancer, bool isTimeBased);\\n\\n    error NoStablecoin();\\n\\n    /**\\n     * @notice Create a new OptimizedDriftBalancer\\n     */\\n    function createDriftBalancer(\\n        address[] memory _assetAddresses,\\n        uint256[] memory _percentages,\\n        uint256[] memory _amounts,\\n        uint256 _driftPercentage\\n    ) external returns (address balancer) {\\n\\n        // _checkUserTokenBalance(_assetAddresses, _amounts);\\n\\n        balancer = address(new OptimizedDriftBalancer(\\n            msg.sender, \\n            address(this), \\n            _assetAddresses, \\n            _percentages, \\n            _driftPercentage, \\n            stablecoins,\\n            address(limitOrderProtocol)\\n        ));\\n\\n        _sendTokensToBalancer(balancer, _assetAddresses, _amounts);\\n        userDriftBalancers[msg.sender].push(balancer);\\n        emit BalancerCreated(msg.sender, balancer, false);\\n    }\\n\\n    /**\\n     * @notice Create a new OptimizedTimeBalancer\\n     */\\n    function createTimeBalancer(\\n        address[] memory _assetAddresses,\\n        uint256[] memory _percentages,\\n        uint256[] memory _amounts,\\n        uint256 interval\\n    ) external returns (address balancer) {\\n        _checkUserTokenBalance(_assetAddresses, _amounts);\\n        // _requireAtLeastOneStablecoin(_assetAddresses);\\n\\n        balancer = address(new OptimizedTimeBalancer(\\n            msg.sender, \\n            address(this), \\n            _assetAddresses, \\n            _percentages, \\n            interval, \\n            stablecoins,\\n            address(limitOrderProtocol)\\n        ));\\n\\n        _sendTokensToBalancer(balancer, _assetAddresses, _amounts);\\n        userTimeBalancers[msg.sender].push(balancer);\\n        emit BalancerCreated(msg.sender, balancer, true);\\n    }\\n\\n    /**\\n     * @notice Internal function to send tokens to a newly created balancer\\n     */\\n    function _sendTokensToBalancer(address balancer, address[] memory tokens, uint256[] memory amounts) internal {\\n        require(tokens.length == amounts.length, \\\"Tokens and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20(tokens[i]).transferFrom(msg.sender, balancer, amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to check if the asset addresses contain at least one stablecoin\\n     * @dev This function is not used in the current implementation as the stablecoins adressess will be hardcoded in the factory\\n     */\\n    // function _requireAtLeastOneStablecoin(address[] memory _assetAddresses) internal view {\\n    //     for (uint i = 0; i < _assetAddresses.length; i++) {\\n    //         for (uint j = 0; j < stablecoins.length; j++) {\\n    //             if (_assetAddresses[i] == stablecoins[j]) {\\n    //                 return;\\n    //             }\\n    //         }\\n    //     }\\n    //     revert NoStablecoin();\\n    // }\\n\\n    function _checkUserTokenBalance(address[] memory tokens, uint256[] memory amounts) internal view {\\n        require(tokens.length == amounts.length, \\\"Tokens and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(IERC20(tokens[i]).balanceOf(msg.sender) >= amounts[i], \\\"Insufficient token balance in factory\\\");\\n        }\\n    }\\n} \",\"keccak256\":\"0x2aef7910d13172ae78e3c02008a5b0528c79e58e8de9ddf9700353e679d928d5\",\"license\":\"MIT\"},\"contracts/portfolio/interfaces/IBalancerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IBalancerFactory {\\n    function priceFeed() external view returns (address);\\n    function stablecoins() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x5a3e4a214aa85e1dab5de47f3d5bd4a55b386d7897b2751936379def8398ed4f\",\"license\":\"MIT\"},\"contracts/portfolio/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided hash\\n     * @param _hash      Hash of the data to be signed\\n     * @param _signature Signature byte array associated with _hash\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */ \\n    function isValidSignature(\\n        bytes32 _hash, \\n        bytes memory _signature\\n    ) external view returns (bytes4 magicValue);\\n} \",\"keccak256\":\"0x60494e1c9a2fb5d3a83ef50d3ab449bb89afb17924423e299818804db4f6f3b0\",\"license\":\"MIT\"},\"contracts/portfolio/interfaces/ILimitOrderProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ILimitOrderProtocol {\\n    struct Order {\\n        uint256 salt;\\n        address maker;\\n        address receiver;\\n        address makerAsset;\\n        address takerAsset;\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        uint256 makerTraits;\\n    }\\n\\n    struct TakerTraits {\\n        uint256 traits;\\n        bytes args;\\n    }\\n\\n    event OrderFilled(\\n        bytes32 indexed orderHash,\\n        address indexed maker,\\n        address indexed taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 remainingMakingAmount\\n    );\\n\\n    function fillOrderArgs(\\n        Order calldata order,\\n        bytes32 r,\\n        bytes32 vs,\\n        uint256 amount,\\n        TakerTraits calldata takerTraits,\\n        bytes calldata args\\n    ) external payable returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\\n\\n    function fillContractOrderArgs(\\n        Order calldata order,\\n        bytes calldata signature,\\n        uint256 amount,\\n        TakerTraits calldata takerTraits,\\n        bytes calldata args\\n    ) external returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\\n\\n    function cancelOrder(bytes32 orderHash, uint256 makerTraits) external;\\n} \",\"keccak256\":\"0xcc296f803611ff5cef2f3e8bf47df596281248e08abf67441abcd8ab83646861\",\"license\":\"MIT\"},\"contracts/portfolio/interfaces/ISpotPriceAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ISpotPriceAggregator {\\n    function getRateToEth(\\n        address srcToken,\\n        bool useSrcWrappers\\n    ) external view returns (uint256 weightedRate);\\n\\n    function getRate(\\n        address srcToken,\\n        address dstToken,\\n        bool useWrappers\\n    ) external view returns (uint256 weightedRate);\\n\\n    function connectors() external view returns (address[] memory allConnectors);\\n    function oracles() external view returns (address[] memory allOracles, uint8[] memory oracleTypes);\\n    function owner() external view returns (address);\\n    \\n    // Additional functions from the ABI can be added here as needed\\n}\\n\",\"keccak256\":\"0x9ccffe7ad2729b2f32999653ec96d3006c22e399c77b6ce4145824f135b6f533\",\"license\":\"MIT\"},\"contracts/portfolio/libraries/LimitOrderLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"../interfaces/ILimitOrderProtocol.sol\\\";\\n\\n/**\\n * @title LimitOrderLib\\n * @dev Library for creating and managing 1inch limit orders\\n * @author @ppezzull\\n */\\nlibrary LimitOrderLib {\\n    // Maker traits flags\\n    uint256 private constant NO_PARTIAL_FILLS_FLAG = 255;\\n    uint256 private constant ALLOW_MULTIPLE_FILLS_FLAG = 254;\\n    uint256 private constant NEED_PREINTERACTION_FLAG = 252;\\n    uint256 private constant NEED_POSTINTERACTION_FLAG = 251;\\n    uint256 private constant NEED_EPOCH_CHECK_FLAG = 250;\\n    uint256 private constant HAS_EXTENSION_FLAG = 249;\\n    uint256 private constant USE_PERMIT2_FLAG = 248;\\n    uint256 private constant UNWRAP_WETH_FLAG = 247;\\n\\n    // Taker traits flags\\n    uint256 private constant MAKER_AMOUNT_FLAG = 255;\\n    uint256 private constant UNWRAP_WETH_FLAG_TAKER = 254;\\n    uint256 private constant SKIP_ORDER_PERMIT_FLAG = 253;\\n    uint256 private constant USE_PERMIT2_FLAG_TAKER = 252;\\n    uint256 private constant ARGS_HAS_TARGET = 251;\\n\\n    struct LimitOrderData {\\n        ILimitOrderProtocol.Order order;\\n        bytes extension;\\n        bytes signature;\\n        uint256 orderHash;\\n    }\\n\\n    struct RebalanceOrder {\\n        address sellToken;\\n        address buyToken;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n        uint256 slippageTolerance; // in basis points (1 = 0.01%)\\n    }\\n\\n    event LimitOrderCreated(\\n        bytes32 indexed orderHash,\\n        address indexed maker,\\n        address sellToken,\\n        address buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount\\n    );\\n\\n    /**\\n     * @dev Create a basic limit order\\n     */\\n    function createLimitOrder(\\n        address maker,\\n        address receiver,\\n        address makerAsset,\\n        address takerAsset,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 salt,\\n        bool allowPartialFills,\\n        bool allowMultipleFills,\\n        uint256 expiration\\n    ) internal pure returns (ILimitOrderProtocol.Order memory order) {\\n        uint256 makerTraits = buildMakerTraits(\\n            address(0), // allowedSender\\n            false, // shouldCheckEpoch\\n            allowPartialFills, // allowPartialFill\\n            allowMultipleFills, // allowMultipleFills\\n            false, // usePermit2\\n            false, // unwrapWeth\\n            expiration, // expiry\\n            0, // nonce\\n            0 // series\\n        );\\n\\n        order = ILimitOrderProtocol.Order({\\n            salt: salt,\\n            maker: maker,\\n            receiver: receiver,\\n            makerAsset: makerAsset,\\n            takerAsset: takerAsset,\\n            makingAmount: makingAmount,\\n            takingAmount: takingAmount,\\n            makerTraits: makerTraits\\n        });\\n    }\\n\\n    /**\\n     * @dev Create a rebalancing limit order\\n     */\\n    function createRebalanceOrder(\\n        RebalanceOrder memory rebalanceOrder,\\n        address maker,\\n        uint256 salt\\n    ) external pure returns (ILimitOrderProtocol.Order memory order) {\\n        order = createLimitOrder(\\n            maker, // maker\\n            maker, // receiver\\n            rebalanceOrder.sellToken, // makerAsset\\n            rebalanceOrder.buyToken, // takerAsset\\n            rebalanceOrder.sellAmount, // makingAmount\\n            rebalanceOrder.buyAmount, // takingAmount\\n            salt, // salt\\n            true, // allowPartialFills\\n            false, // allowMultipleFills\\n            3600 // expiration: 1 hour expiration (will be added to current timestamp)\\n        );\\n    }\\n\\n    /**\\n     * @dev Build maker traits for limit orders\\n     */\\n    function buildMakerTraits(\\n        address allowedSender,\\n        bool shouldCheckEpoch,\\n        bool allowPartialFill,\\n        bool allowMultipleFills,\\n        bool usePermit2,\\n        bool unwrapWeth,\\n        uint256 expiry,\\n        uint256 nonce,\\n        uint256 series\\n    ) internal pure returns (uint256 makerTraits) {\\n        // Validate inputs\\n        require(expiry < (1 << 40), \\\"Expiry too large\\\");\\n        require(nonce < (1 << 40), \\\"Nonce too large\\\");\\n        require(series < (1 << 40), \\\"Series too large\\\");\\n\\n        makerTraits = (series << 160) |\\n                     (nonce << 120) |\\n                     (expiry << 80) |\\n                     (uint256(uint160(allowedSender)) & ((1 << 80) - 1));\\n\\n        // Set flags\\n        if (!allowPartialFill) makerTraits |= (1 << NO_PARTIAL_FILLS_FLAG);\\n        if (allowMultipleFills) makerTraits |= (1 << ALLOW_MULTIPLE_FILLS_FLAG);\\n        if (shouldCheckEpoch) makerTraits |= (1 << NEED_EPOCH_CHECK_FLAG);\\n        if (usePermit2) makerTraits |= (1 << USE_PERMIT2_FLAG);\\n        if (unwrapWeth) makerTraits |= (1 << UNWRAP_WETH_FLAG);\\n    }\\n\\n    /**\\n     * @dev Build taker traits for order filling\\n     */\\n    function buildTakerTraits(\\n        bool makingAmount,\\n        bool unwrapWeth,\\n        bool skipMakerPermit,\\n        bool usePermit2,\\n        address target,\\n        bytes memory extension,\\n        bytes memory interaction,\\n        uint256 threshold\\n    ) internal pure returns (ILimitOrderProtocol.TakerTraits memory takerTraits) {\\n        uint256 traits = threshold;\\n\\n        if (makingAmount) traits |= (1 << MAKER_AMOUNT_FLAG);\\n        if (unwrapWeth) traits |= (1 << UNWRAP_WETH_FLAG_TAKER);\\n        if (skipMakerPermit) traits |= (1 << SKIP_ORDER_PERMIT_FLAG);\\n        if (usePermit2) traits |= (1 << USE_PERMIT2_FLAG_TAKER);\\n        if (target != address(0)) traits |= (1 << ARGS_HAS_TARGET);\\n\\n        // Add extension and interaction lengths\\n        traits |= (uint256(extension.length) << 224);\\n        traits |= (uint256(interaction.length) << 200);\\n\\n        takerTraits.traits = traits;\\n        takerTraits.args = abi.encodePacked(target, extension, interaction);\\n    }\\n\\n    /**\\n     * @dev Calculate order hash\\n     */\\n    function calculateOrderHash(\\n        ILimitOrderProtocol.Order memory order,\\n        bytes32 domainSeparator\\n    ) external pure returns (bytes32 orderHash) {\\n        orderHash = keccak256(abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            domainSeparator,\\n            keccak256(abi.encode(\\n                order.salt,\\n                order.maker,\\n                order.receiver,\\n                order.makerAsset,\\n                order.takerAsset,\\n                order.makingAmount,\\n                order.takingAmount,\\n                order.makerTraits\\n            ))\\n        ));\\n    }\\n\\n    /**\\n     * @dev Validate order parameters\\n     */\\n    function validateOrder(ILimitOrderProtocol.Order memory order) external pure returns (bool) {\\n        require(order.maker != address(0), \\\"Invalid maker\\\");\\n        require(order.makerAsset != address(0), \\\"Invalid maker asset\\\");\\n        require(order.takerAsset != address(0), \\\"Invalid taker asset\\\");\\n        require(order.makingAmount > 0, \\\"Invalid making amount\\\");\\n        require(order.takingAmount > 0, \\\"Invalid taking amount\\\");\\n        require(order.makerAsset != order.takerAsset, \\\"Same assets\\\");\\n        \\n        return true;\\n    }\\n\\n    /**\\n     * @dev Calculate slippage-adjusted amounts\\n     */\\n    function calculateSlippageAmounts(\\n        uint256 baseAmount,\\n        uint256 slippageTolerance\\n    ) external pure returns (uint256 minAmount, uint256 maxAmount) {\\n        require(slippageTolerance <= 1000, \\\"Slippage too high\\\"); // Max 10%\\n        \\n        uint256 tolerance = (baseAmount * slippageTolerance) / 10000;\\n        minAmount = baseAmount - tolerance;\\n        maxAmount = baseAmount + tolerance;\\n    }\\n} \",\"keccak256\":\"0x85f84bed1160eb6edd2e07bec9c35e53302bf87a270c988e9cdae67303260a2f\",\"license\":\"MIT\"},\"contracts/portfolio/libraries/PortfolioAnalysisLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nlibrary PortfolioAnalysisLib {\\n    struct PortfolioData {\\n        uint256 portfolioValue;\\n        uint256 stablecoinRatio;\\n        bool isBalanced;\\n        bool rebalanceNeeded;\\n    }\\n\\n    struct AssetAnalysis {\\n        address token;\\n        uint256 balance;\\n        uint256 currentPercentage;\\n        uint256 targetPercentage;\\n        uint256 deviation;\\n        bool withinRange;\\n    }\\n\\n    /**\\n     * @dev Check if an asset's balance is within acceptable percentage range\\n     */\\n    function checkAssetBalance(\\n        uint256 currentPercentage,\\n        uint256 targetPercentage\\n    ) internal pure returns (bool isWithinRange, uint256 deviation) {\\n        if (currentPercentage > targetPercentage) {\\n            deviation = currentPercentage - targetPercentage;\\n        } else {\\n            deviation = targetPercentage - currentPercentage;\\n        }\\n\\n        isWithinRange = deviation <= 5; // 5% tolerance\\n        return (isWithinRange, deviation);\\n    }\\n\\n    /**\\n     * @dev Calculate portfolio metrics\\n     */\\n    function calculatePortfolioMetrics(\\n        uint256 totalValue,\\n        uint256 stablecoinValue\\n    ) internal pure returns (uint256 stablecoinRatio) {\\n        if (totalValue == 0) return 0;\\n        stablecoinRatio = (stablecoinValue * 10000) / totalValue; // Basis points\\n    }\\n}\\n\",\"keccak256\":\"0xd14eba917b95eba4b5427eb977eb5a0aa4b8ce1d217b67a85aa1e9d53933d07f\",\"license\":\"MIT\"},\"contracts/portfolio/libraries/StablecoinGridLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title StablecoinGridLib\\n * @dev Grid trading logic for stablecoins extracted from StableLimit\\n * @author @ppezzull\\n */\\nlibrary StablecoinGridLib {\\n    struct Order {\\n        address fromToken;\\n        address toToken;\\n        uint256 amount;\\n        uint256 limitPrice; // Price with 1e18 precision\\n    }\\n\\n    struct GridParams {\\n        uint256 capital;\\n        uint256 nLevels;\\n        uint256 minOrderSize;\\n        uint256 maxOrderSize;\\n        uint256 gridRangeBps;\\n        uint256 pegPrice;\\n    }\\n\\n    // Constants\\n    uint256 private constant PRICE_PRECISION = 1e18;\\n    uint256 private constant USDC_DECIMALS = 6;\\n    uint256 private constant DAI_DECIMALS = 18;\\n\\n    // Price deviation bounds (1e18 representation)\\n    uint256 public constant LOWER_BOUND = 998 * 1e15; // 0.998\\n    uint256 public constant UPPER_BOUND = 1002 * 1e15; // 1.002\\n\\n    /**\\n     * @dev Generate grid orders for stablecoin pairs\\n     */\\n    function generateGridOrders(\\n        address[] memory stablecoins,\\n        GridParams memory params\\n    ) external pure returns (Order[] memory orders) {\\n        if (params.nLevels == 0) return new Order[](0);\\n\\n        uint256 nPairs = stablecoins.length > 1 ? stablecoins.length : 0;\\n        if (nPairs < 2) return new Order[](0);\\n\\n        uint256 nLevelsAdjusted = params.nLevels;\\n        uint256 baseOrderAmount = params.capital / (params.nLevels * 2 * (nPairs - 1));\\n\\n        if (baseOrderAmount < params.minOrderSize) {\\n            nLevelsAdjusted = params.capital / (params.minOrderSize * 2 * (nPairs - 1));\\n            if (nLevelsAdjusted == 0) nLevelsAdjusted = 1;\\n        } else if (baseOrderAmount > params.maxOrderSize) {\\n            nLevelsAdjusted = params.capital / (params.maxOrderSize * 2 * (nPairs - 1));\\n            uint256 maxLevels = 100;\\n            if (nLevelsAdjusted > maxLevels) nLevelsAdjusted = maxLevels;\\n        }\\n\\n        if (nLevelsAdjusted == 0) return new Order[](0);\\n\\n        uint256 finalOrderAmount = params.capital / (nLevelsAdjusted * 2 * (nPairs - 1));\\n        orders = new Order[](nLevelsAdjusted * 2 * (nPairs - 1));\\n        uint256 idx = 0;\\n\\n        for (uint256 pair = 0; pair < nPairs - 1; pair++) {\\n            address fromToken = stablecoins[pair];\\n            address toToken = stablecoins[(pair + 1) % nPairs];\\n            for (uint256 i = 0; i < nLevelsAdjusted; i++) {\\n                uint256 offset = ((((i + 1) * PRICE_PRECISION) / nLevelsAdjusted) * params.gridRangeBps) / 10000;\\n                orders[idx++] = Order(fromToken, toToken, finalOrderAmount, params.pegPrice + offset);\\n                orders[idx++] = Order(toToken, fromToken, finalOrderAmount, params.pegPrice - offset);\\n            }\\n        }\\n\\n        return orders;\\n    }\\n\\n    /**\\n     * @dev Check if price is within acceptable bounds\\n     */\\n    function isPriceWithinBounds(uint256 price) external pure returns (bool) {\\n        return price >= LOWER_BOUND && price <= UPPER_BOUND;\\n    }\\n\\n    /**\\n     * @dev Calculate grid order parameters\\n     */\\n    function calculateGridParams(\\n        uint256 stablecoinValue,\\n        uint256 nLevels,\\n        uint256 gridRangeBps\\n    ) external pure returns (GridParams memory params) {\\n        params.capital = stablecoinValue / 10; // Use 10% of stablecoin value\\n        params.nLevels = nLevels;\\n        params.minOrderSize = 10 * (10 ** USDC_DECIMALS); // 10 USDC\\n        params.maxOrderSize = params.capital;\\n        params.gridRangeBps = gridRangeBps;\\n        params.pegPrice = 1 * PRICE_PRECISION; // 1 USD for stablecoins\\n    }\\n\\n    /**\\n     * @dev Validate stablecoin pair for grid trading\\n     */\\n    function validateStablecoinPair(\\n        address token1,\\n        address token2,\\n        mapping(address => bool) storage isStablecoin\\n    ) external view returns (bool) {\\n        return isStablecoin[token1] && isStablecoin[token2] && token1 != token2;\\n    }\\n} \",\"keccak256\":\"0x000911067fcede7f92b982a1713c720d32c2aea3a969b65e8761901e30a5b9b4\",\"license\":\"MIT\"},\"contracts/portfolio/modules/OptimizedBaseBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/ISpotPriceAggregator.sol\\\";\\nimport \\\"../interfaces/IBalancerFactory.sol\\\";\\nimport \\\"../libraries/PortfolioAnalysisLib.sol\\\";\\nimport \\\"./OptimizedStableLimit.sol\\\";\\n\\n/**\\n * @title OptimizedBaseBalancer\\n * @notice Optimized version of BaseBalancer with reduced contract size\\n */\\nabstract contract OptimizedBaseBalancer is Ownable, ReentrancyGuard, OptimizedStableLimit {\\n    using SafeERC20 for IERC20;\\n    using PortfolioAnalysisLib for uint256;\\n\\n    // -- Constants --\\n    uint256 public constant MAX_BASIS_POINTS = 100;\\n\\n    // -- State --\\n    struct AssetGroup {\\n        uint256 percentage;\\n        address[] tokens; // For stablecoins, this will contain multiple tokens\\n        bool isStablecoinGroup;\\n    }\\n\\n    mapping(uint256 => AssetGroup) public assetGroups;\\n    uint256 public assetGroupsCount;\\n    address[] public assetAddresses; // All tokens (including stablecoins)\\n    uint256 public lastUpdateTimestamp;\\n\\n    // -- Events --\\n    event Funded(address indexed asset, uint256 amount);\\n    event Withdrawn(address indexed asset, uint256 amount);\\n    event AssetMappingUpdated(address[] assets, uint256[] percentages);\\n\\n    // -- Errors --\\n    error InvalidAssetCount();\\n    error InvalidPercentagesSum();\\n    error AssetGroupNotFound(uint256 groupId);\\n    error ZeroAddressNotAllowed();\\n\\n    constructor(\\n        address initialOwner,\\n        address _factory,\\n        address[] memory _assetAddresses,\\n        uint256[] memory _percentages,\\n        address[] memory _stablecoins,\\n        address _limitOrderProtocol\\n    ) Ownable(initialOwner) OptimizedStableLimit(initialOwner, _factory, _stablecoins, _limitOrderProtocol) {\\n        _updateAssetGroupMapping(_assetAddresses, _percentages, _stablecoins);\\n        lastUpdateTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Fund the contract with a specific ERC20 token\\n     */\\n    function fund(address _asset, uint256 _amount) external onlyOwner {\\n        require(_isValidAsset(_asset), \\\"Asset not found in any group\\\");\\n        IERC20(_asset).safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Funded(_asset, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw a specific ERC20 token from the contract\\n     */\\n    function withdraw(address _asset, uint256 _amount) external onlyOwner nonReentrant {\\n        require(_isValidAsset(_asset), \\\"Asset not found in any group\\\");\\n        IERC20(_asset).safeTransfer(msg.sender, _amount);\\n        emit Withdrawn(_asset, _amount);\\n    }\\n\\n    /**\\n     * @notice Update the asset mapping\\n     */\\n    function updateAssetMapping(\\n        address[] memory _assetAddresses, \\n        uint256[] memory _percentages,\\n        address[] memory _stablecoins\\n    ) external onlyOwner {\\n        _updateAssetGroupMapping(_assetAddresses, _percentages, _stablecoins);\\n    }\\n\\n    /**\\n     * @notice Get total portfolio value in ETH\\n     */\\n    function getTotalValue() public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < assetAddresses.length; i++) {\\n            address asset = assetAddresses[i];\\n            uint256 balance = IERC20(asset).balanceOf(address(this));\\n            totalValue += getPrice(asset, balance);\\n        }\\n        return totalValue;\\n    }\\n\\n    /**\\n     * @notice Get price of an asset in ETH\\n     */\\n    function getPrice(address asset, uint256 amount) public view returns (uint256) {\\n        address priceFeedAddr = IBalancerFactory(factory).priceFeed();\\n        uint256 price = ISpotPriceAggregator(priceFeedAddr).getRateToEth(asset, false);\\n        return (amount * price) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Check asset balance using library\\n     */\\n    function checkAssetBalance(\\n        address,\\n        uint256,\\n        uint256 currentPercentage,\\n        uint256 targetPercentage,\\n        uint256\\n    ) public pure override returns (bool isWithinRange, uint256 deviation) {\\n        return PortfolioAnalysisLib.checkAssetBalance(currentPercentage, targetPercentage);\\n    }\\n\\n    /**\\n     * @notice Get basic portfolio analysis\\n     */\\n    function getPortfolioAnalysis() external view returns (\\n        uint256 portfolioValue,\\n        uint256 stablecoinRatio,\\n        bool isBalanced\\n    ) {\\n        portfolioValue = getTotalValue();\\n        if (portfolioValue == 0) return (0, 0, true);\\n\\n        uint256 totalStablecoinValue = _getTotalStablecoinValue();\\n        stablecoinRatio = PortfolioAnalysisLib.calculatePortfolioMetrics(portfolioValue, totalStablecoinValue);\\n        \\n        isBalanced = _checkIfBalanced(portfolioValue);\\n    }\\n\\n    // -- Internal Functions --\\n    function _updateAssetGroupMapping(\\n        address[] memory _assetAddresses, \\n        uint256[] memory _percentages,\\n        address[] memory _stablecoins\\n    ) internal {\\n        require(_percentages.length > 0, \\\"No percentages provided\\\");\\n        require(_assetAddresses.length > 0, \\\"No assets provided\\\");\\n        \\n        // Count non-stablecoin assets\\n        uint256 nonStablecoinCount = 0;\\n        uint256 stablecoinCount = 0;\\n        \\n        for (uint256 i = 0; i < _assetAddresses.length; i++) {\\n            bool isStablecoin = false;\\n            for (uint256 j = 0; j < _stablecoins.length; j++) {\\n                if (_assetAddresses[i] == _stablecoins[j]) {\\n                    isStablecoin = true;\\n                    stablecoinCount++;\\n                    break;\\n                }\\n            }\\n            if (!isStablecoin) {\\n                nonStablecoinCount++;\\n            }\\n        }\\n        \\n        // Calculate expected percentage count: 1 for stablecoins (if any) + 1 for each non-stablecoin\\n        uint256 expectedPercentageCount = (stablecoinCount > 0 ? 1 : 0) + nonStablecoinCount;\\n        \\n        require(_percentages.length == expectedPercentageCount, \\\"Wrong percentage count for asset groups\\\");\\n        \\n        uint256 totalPercentage = 0;\\n        for (uint256 i = 0; i < _percentages.length; i++) {\\n            totalPercentage += _percentages[i];\\n        }\\n        if (totalPercentage != MAX_BASIS_POINTS) revert InvalidPercentagesSum();\\n\\n        // Clear old mappings\\n        for (uint256 i = 0; i < assetGroupsCount; i++) {\\n            delete assetGroups[i];\\n        }\\n        \\n        assetAddresses = _assetAddresses;\\n        assetGroupsCount = 0;\\n\\n        // Create stablecoin group if we have stablecoins in the asset list\\n        if (stablecoinCount > 0) {\\n            address[] memory stablecoinAssets = new address[](stablecoinCount);\\n            uint256 stablecoinIndex = 0;\\n            \\n            for (uint256 i = 0; i < _assetAddresses.length; i++) {\\n                for (uint256 j = 0; j < _stablecoins.length; j++) {\\n                    if (_assetAddresses[i] == _stablecoins[j]) {\\n                        stablecoinAssets[stablecoinIndex] = _assetAddresses[i];\\n                        stablecoinIndex++;\\n                        break;\\n                    }\\n                }\\n            }\\n            \\n            assetGroups[assetGroupsCount] = AssetGroup({\\n                percentage: _percentages[0], // First percentage is for stablecoins\\n                tokens: stablecoinAssets,\\n                isStablecoinGroup: true\\n            });\\n            assetGroupsCount++;\\n        }\\n        \\n        // Create groups for non-stablecoin assets\\n        uint256 percentageIndex = stablecoinCount > 0 ? 1 : 0;\\n        for (uint256 i = 0; i < _assetAddresses.length; i++) {\\n            bool isStablecoin = false;\\n            for (uint256 j = 0; j < _stablecoins.length; j++) {\\n                if (_assetAddresses[i] == _stablecoins[j]) {\\n                    isStablecoin = true;\\n                    break;\\n                }\\n            }\\n            \\n            if (!isStablecoin) {\\n                address[] memory singleAsset = new address[](1);\\n                singleAsset[0] = _assetAddresses[i];\\n                \\n                assetGroups[assetGroupsCount] = AssetGroup({\\n                    percentage: _percentages[percentageIndex],\\n                    tokens: singleAsset,\\n                    isStablecoinGroup: false\\n                });\\n                assetGroupsCount++;\\n                percentageIndex++;\\n            }\\n        }\\n\\n        emit AssetMappingUpdated(_assetAddresses, _percentages);\\n    }\\n    \\n    function _isValidAsset(address _asset) internal view returns (bool) {\\n        for (uint256 i = 0; i < assetAddresses.length; i++) {\\n            if (assetAddresses[i] == _asset) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _checkIfBalanced(uint256 portfolioValue) internal view returns (bool) {\\n        for (uint256 groupId = 0; groupId < assetGroupsCount; groupId++) {\\n            AssetGroup memory group = assetGroups[groupId];\\n            uint256 groupValue = 0;\\n            \\n            // Calculate total value for this group\\n            for (uint256 i = 0; i < group.tokens.length; i++) {\\n                uint256 balance = IERC20(group.tokens[i]).balanceOf(address(this));\\n                groupValue += getPrice(group.tokens[i], balance);\\n            }\\n            \\n            uint256 currentPercentage = (groupValue * 100) / portfolioValue;\\n            uint256 targetPercentage = group.percentage;\\n            \\n            (bool withinRange, ) = PortfolioAnalysisLib.checkAssetBalance(currentPercentage, targetPercentage);\\n            if (!withinRange) return false;\\n        }\\n        return true;\\n    }\\n\\n    // -- View Functions --\\n    function getAssetAddresses() external view returns (address[] memory) {\\n        return assetAddresses;\\n    }\\n\\n    function getAssetGroup(uint256 groupId) external view returns (AssetGroup memory) {\\n        return assetGroups[groupId];\\n    }\\n\\n    function getAssetBalance(address _asset) external view returns (uint256) {\\n        return IERC20(_asset).balanceOf(address(this));\\n    }\\n    \\n    function getStablecoinGroupValue() external view returns (uint256) {\\n        for (uint256 groupId = 0; groupId < assetGroupsCount; groupId++) {\\n            if (assetGroups[groupId].isStablecoinGroup) {\\n                uint256 groupValue = 0;\\n                for (uint256 i = 0; i < assetGroups[groupId].tokens.length; i++) {\\n                    uint256 balance = IERC20(assetGroups[groupId].tokens[i]).balanceOf(address(this));\\n                    groupValue += getPrice(assetGroups[groupId].tokens[i], balance);\\n                }\\n                return groupValue;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd1f3e49fd8abded47b2828852f0c1ddd99da1ea8cbddd41a171dbeaf96d7e6c9\",\"license\":\"MIT\"},\"contracts/portfolio/modules/OptimizedStableLimit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/ISpotPriceAggregator.sol\\\";\\nimport \\\"../interfaces/IBalancerFactory.sol\\\";\\nimport \\\"../interfaces/ILimitOrderProtocol.sol\\\";\\nimport \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"../libraries/StablecoinGridLib.sol\\\";\\nimport \\\"../libraries/LimitOrderLib.sol\\\";\\n\\n/// @title OptimizedStableLimit\\n/// @notice Optimized stablecoin grid trading with reduced contract size\\n/// @dev Implements Chainlink Automation to trigger rebalancing when stablecoin prices deviate\\n/// Implements EIP-1271 for limit order signing\\nabstract contract OptimizedStableLimit is Ownable, Pausable, AutomationCompatibleInterface, IERC1271 {\\n    using SafeERC20 for IERC20;\\n    using StablecoinGridLib for *;\\n    using LimitOrderLib for *;\\n    using ECDSA for bytes32;\\n\\n    // -- State --\\n    IBalancerFactory public factory;\\n    address[] public stablecoins;\\n    mapping(address => bool) public isStablecoin;\\n    \\n    // Limit order protocol integration\\n    ILimitOrderProtocol public limitOrderProtocol;\\n    bytes32 public domainSeparator;\\n    uint256 private nonce;\\n    \\n    // EIP-1271 magic value\\n    bytes4 private constant MAGIC_VALUE = 0x1626ba7e;\\n\\n    // -- Events --\\n    event LimitOrderPlaced(StablecoinGridLib.Order order);\\n    event OrdersGenerated(StablecoinGridLib.Order[] orders);\\n    event StablecoinsUpdated(address[] newStablecoins);\\n    event LimitOrderCreated(bytes32 indexed orderHash, address indexed maker, address sellToken, address buyToken, uint256 sellAmount, uint256 buyAmount);\\n    event RebalanceOrderCreated(bytes32 indexed orderHash, address indexed maker, address sellToken, address buyToken, uint256 sellAmount, uint256 buyAmount, uint256 slippageTolerance);\\n\\n    // Modifiers\\n    modifier onlyFactoryOrOwner() {\\n        require(msg.sender == address(factory) || msg.sender == owner(), \\\"StableLimit__Unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address initialOwner, address _factory, address[] memory _stablecoins, address _limitOrderProtocol) {\\n        _transferOwnership(initialOwner);\\n        _pause(); // Start paused\\n        _unpause(); // Then unpause\\n        factory = IBalancerFactory(_factory);\\n        limitOrderProtocol = ILimitOrderProtocol(_limitOrderProtocol);\\n        \\n        for (uint i = 0; i < _stablecoins.length; i++) {\\n            stablecoins.push(_stablecoins[i]);\\n            isStablecoin[_stablecoins[i]] = true;\\n        }\\n        \\n        // Initialize domain separator for EIP-712\\n        domainSeparator = keccak256(abi.encode(\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n            keccak256(bytes(\\\"1inch Limit Order Protocol\\\")),\\n            keccak256(bytes(\\\"4\\\")),\\n            block.chainid,\\n            _limitOrderProtocol\\n        ));\\n    }\\n\\n    /**\\n     * @dev Check if an asset's balance is within acceptable percentage range based on price\\n     */\\n    function checkAssetBalance(\\n        address /* token */,\\n        uint256 /* currentBalance */,\\n        uint256 currentPercentage,\\n        uint256 targetPercentage,\\n        uint256 /* price */\\n    ) virtual public pure returns (bool isWithinRange, uint256 deviation) {\\n        if (currentPercentage > targetPercentage) {\\n            deviation = currentPercentage - targetPercentage;\\n        } else {\\n            deviation = targetPercentage - currentPercentage;\\n        }\\n\\n        isWithinRange = deviation <= 5;\\n        return (isWithinRange, deviation);\\n    }\\n\\n    // -- Automation Functions --\\n\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n        // Check all stablecoin pairs for deviation\\n        for (uint i = 0; i < stablecoins.length; i++) {\\n            for (uint j = i + 1; j < stablecoins.length; j++) {\\n                uint256 currentPrice = ISpotPriceAggregator(factory.priceFeed()).getRate(stablecoins[i], stablecoins[j], false);\\n                if (!StablecoinGridLib.isPriceWithinBounds(currentPrice)) {\\n                    return (true, abi.encode(stablecoins[i], stablecoins[j], currentPrice));\\n                }\\n            }\\n        }\\n        return (false, bytes(\\\"\\\"));\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override whenNotPaused {\\n        // // Decode the performData to get the token pair and price\\n        // (address token1, address token2, uint256 currentPrice) = abi.decode(performData, (address, address, uint256));\\n\\n        // Get the total value of stablecoins in the contract\\n        uint256 stablecoinValue = _getTotalStablecoinValue();\\n\\n        // Calculate grid parameters\\n        StablecoinGridLib.GridParams memory params = StablecoinGridLib.calculateGridParams(\\n            stablecoinValue,\\n            5, // n_levels\\n            15 // grid_range_bps (0.0015 * 10000 = 15)\\n        );\\n\\n        // Generate grid orders\\n        StablecoinGridLib.Order[] memory orders = StablecoinGridLib.generateGridOrders(stablecoins, params);\\n\\n        emit OrdersGenerated(orders);\\n\\n        // Create actual limit orders for stablecoin pairs\\n        for (uint i = 0; i < orders.length; i++) {\\n            StablecoinGridLib.Order memory gridOrder = orders[i];\\n            \\n            // Create limit order for this grid level\\n            bytes32 orderHash = createStablecoinGridOrder(\\n                gridOrder.fromToken,\\n                gridOrder.toToken,\\n                gridOrder.amount,\\n                gridOrder.limitPrice\\n            );\\n            \\n            // Emit event for order submission\\n            emit LimitOrderCreated(\\n                orderHash,\\n                address(this),\\n                gridOrder.fromToken,\\n                gridOrder.toToken,\\n                gridOrder.amount,\\n                gridOrder.limitPrice\\n            );\\n        }\\n    }\\n\\n    // -- Internal Logic --\\n\\n    function _placeLimitOrder(StablecoinGridLib.Order memory order) internal {\\n        // Mocked: Emits event instead of executing trade\\n        emit LimitOrderPlaced(order);\\n    }\\n\\n    function _getTotalStablecoinValue() internal view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < stablecoins.length; i++) {\\n            address stablecoin = stablecoins[i];\\n            uint256 balance = IERC20(stablecoin).balanceOf(address(this));\\n            if (balance > 0) {\\n                uint256 price = ISpotPriceAggregator(factory.priceFeed()).getRateToEth(stablecoin, false);\\n                totalValue += (balance * price) / 1e18;\\n            }\\n        }\\n        return totalValue;\\n    }\\n\\n    function updateStablecoins(address[] memory _stablecoins) external onlyOwner {\\n        stablecoins = _stablecoins;\\n        emit StablecoinsUpdated(_stablecoins);\\n    }\\n\\n    // -- EIP-1271 Implementation --\\n\\n    /**\\n     * @dev EIP-1271 signature validation\\n     */\\n    function isValidSignature(\\n        bytes32 _hash,\\n        bytes memory _signature\\n    ) external view override returns (bytes4 magicValue) {\\n        // For now, only the owner can sign orders\\n        // In a real implementation, you might want more sophisticated signature validation\\n        address signer = _hash.recover(_signature);\\n        if (signer == owner()) {\\n            return MAGIC_VALUE;\\n        }\\n        return 0xffffffff;\\n    }\\n\\n    // -- Limit Order Functions --\\n\\n    /**\\n     * @dev Create a rebalancing limit order\\n     */\\n    function createRebalanceOrder(\\n        address sellToken,\\n        address buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 slippageTolerance\\n    ) external onlyOwner returns (bytes32 orderHash) {\\n        LimitOrderLib.RebalanceOrder memory rebalanceOrder = LimitOrderLib.RebalanceOrder({\\n            sellToken: sellToken,\\n            buyToken: buyToken,\\n            sellAmount: sellAmount,\\n            buyAmount: buyAmount,\\n            slippageTolerance: slippageTolerance\\n        });\\n\\n        ILimitOrderProtocol.Order memory order = LimitOrderLib.createRebalanceOrder(\\n            rebalanceOrder,\\n            address(this),\\n            nonce++\\n        );\\n\\n        orderHash = LimitOrderLib.calculateOrderHash(order, domainSeparator);\\n\\n        emit RebalanceOrderCreated(\\n            orderHash,\\n            address(this),\\n            sellToken,\\n            buyToken,\\n            sellAmount,\\n            buyAmount,\\n            slippageTolerance\\n        );\\n    }\\n\\n    /**\\n     * @dev Create a stablecoin grid limit order\\n     */\\n    function createStablecoinGridOrder(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 limitPrice\\n    ) public onlyOwner returns (bytes32 orderHash) {\\n        ILimitOrderProtocol.Order memory order = LimitOrderLib.createLimitOrder({\\n            maker: address(this),\\n            receiver: address(this),\\n            makerAsset: fromToken,\\n            takerAsset: toToken,\\n            makingAmount: amount,\\n            takingAmount: (amount * limitPrice) / 1e18,\\n            salt: nonce++,\\n            allowPartialFills: true,\\n            allowMultipleFills: false,\\n            expiration: block.timestamp + 3600 // 1 hour\\n        });\\n\\n        orderHash = LimitOrderLib.calculateOrderHash(order, domainSeparator);\\n\\n        emit LimitOrderCreated(\\n            orderHash,\\n            address(this),\\n            fromToken,\\n            toToken,\\n            amount,\\n            (amount * limitPrice) / 1e18\\n        );\\n    }\\n\\n    /**\\n     * @dev Get order signature for submission to 1inch API\\n     */\\n    function getOrderSignature(bytes32 /*orderHash*/) external view onlyOwner returns (bytes memory signature) {\\n        // Create a signature that can be validated by EIP-1271\\n        // This is a simplified implementation - in production you'd want more sophisticated signing\\n        signature = abi.encodePacked(\\n            bytes32(0), // r\\n            bytes32(0), // s\\n            uint8(27)   // v\\n        );\\n    }\\n\\n    /**\\n     * @dev Update limit order protocol address\\n     */\\n    function updateLimitOrderProtocol(address _limitOrderProtocol) external onlyOwner {\\n        limitOrderProtocol = ILimitOrderProtocol(_limitOrderProtocol);\\n    }\\n\\n    // -- Pausable Functions --\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n} \",\"keccak256\":\"0xd6e3716f0df753a3f6c2d3572f1575b78f87cbec174289b8827d8b1158ecee41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620001f9576200a9ba803803806200001d8162000214565b9283398101606082820312620001f95762000038826200023a565b6020808401519093916001600160401b0391828111620001f95783019284601f85011215620001f957835194838611620001fe578560051b94876200007f81880162000214565b8098815201888197830101928311620001f95788809201905b838210620001df57505050506040620000b291016200023a565b913315620001c657600080546001600160a01b03198082163390811784556040519991986001600160a01b039892949390919089167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a3876001961689600154161760015551938411620001b257680100000000000000008411620001b2576002548460025580851062000187575b509160028252808220915b84811062000173575050505050501690600354161760035561a76a9081620002508239f35b83518816838201559281019285016200014e565b60028352858585852092830192015b828110620001a657505062000143565b84815501869062000196565b634e487b7160e01b82526041600452602482fd5b604051631e4fbdf760e01b815260006004820152602490fd5b828091620001ed846200023a565b81520191019062000098565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620001fe57604052565b51906001600160a01b0382168203620001f95756fe608060408181526004803610156200001657600080fd5b600092833560e01c9081632137180914620007ad57508063623d7eec1462000536578063715018a61462000496578063741bef1a14620004415780637f819f6314620003c65780637f94dd3314620003715780638da5cb5b146200031e578063a1d69935146200021a578063edf5b0a514620001885763f2fde38b146200009c57600080fd5b34620001845760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200018457620000d762000903565b90620000e262000d97565b73ffffffffffffffffffffffffffffffffffffffff809216928315620001555750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b5050346200021657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200021657620001c462000903565b6024359273ffffffffffffffffffffffffffffffffffffffff80921681526005602052828120908154851015620002135750602093620002049162000831565b92905490519260031b1c168152f35b80fd5b5080fd5b50903462000184576200022d3662000994565b959173ffffffffffffffffffffffffffffffffffffffff95919596876003541690865192614d658085019085821067ffffffffffffffff831117620002f257918862000287949287969462000dea88393090339062000a97565b039083f08015620002e857602096620002a591169586948562000c9b565b3382528552620002b88284832062000ba9565b82519081527f17d323808e3c939a366f88d51e4c846abb19dcc52719a5dbe040b608bd776b66853392a351908152f35b84513d84823e3d90fd5b6024886041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5050346200021657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620002165773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5050346200021657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620002165760209073ffffffffffffffffffffffffffffffffffffffff600354169051908152f35b5091346200021357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011262000213576200040262000903565b906024359373ffffffffffffffffffffffffffffffffffffffff8093168252602052828120908154851015620002135750602093620002049162000831565b5050346200021657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620002165760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b83346200021357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200021357620004d162000d97565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5082903462000216576200054a3662000994565b6200055d84929396945184511462000bfa565b835b8251811015620006b65773ffffffffffffffffffffffffffffffffffffffff6200058a828562000c86565b511688518080927f70a08231000000000000000000000000000000000000000000000000000000008252338a830152602092839160249586915afa908115620006ac57889162000675575b50620005e2848862000c86565b5111620005f45750506001016200055f565b602560849289928c51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f496e73756666696369656e7420746f6b656e2062616c616e636520696e20666160448201527f63746f72790000000000000000000000000000000000000000000000000000006064820152fd5b90508181813d8311620006a4575b6200068f818362000879565b81010312620006a057518b620005d5565b8780fd5b503d62000683565b8b513d8a823e3d90fd5b50869293948673ffffffffffffffffffffffffffffffffffffffff92836003541691865193614be68086019186831067ffffffffffffffff841117620007815750918762000712949287969462005b4f88393090339062000a97565b039086f080156200077757602095620007376200074594938693169687948562000c9b565b338152600587522062000ba9565b818151600181527f17d323808e3c939a366f88d51e4c846abb19dcc52719a5dbe040b608bd776b66853392a351908152f35b83513d87823e3d90fd5b8b60416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b92505034620001845760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620001845735600254811015620001845773ffffffffffffffffffffffffffffffffffffffff906002602094527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0154168152f35b80548210156200084a5760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117620008bb57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111620008bb5760051b60200190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036200092757565b600080fd5b9080601f83011215620009275760209082356200094981620008ea565b9362000959604051958662000879565b81855260208086019260051b8201019283116200092757602001905b82821062000984575050505090565b8135815290830190830162000975565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112620009275767ffffffffffffffff9160043583811162000927578260238201121562000927578060040135620009f081620008ea565b9162000a00604051938462000879565b8183526020916024602085019160051b830101918683116200092757602401905b82821062000a6957505050509260243581811162000927578362000a48916004016200092c565b92604435918211620009275762000a62916004016200092c565b9060643590565b813573ffffffffffffffffffffffffffffffffffffffff811681036200092757815290830190830162000a21565b9490939296959660e0860173ffffffffffffffffffffffffffffffffffffffff809616875285602094168488015260e06040880152815180915283610100880192019060005b81811062000b9257505050858103606087015282808551928381520194019060005b81811062000b7d57505050608085015283820360a08501528060025492838152019160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace916000905b82821062000b6357505050509060c0919416910152565b835486168552938401936001938401939091019062000b4c565b82518652948401949184019160010162000aff565b825188168452928501929185019160010162000add565b805468010000000000000000811015620008bb5762000bce9160018201815562000831565b73ffffffffffffffffffffffffffffffffffffffff9291928084549260031b9316831b921b1916179055565b1562000c0257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f546f6b656e7320616e6420616d6f756e7473206c656e677468206d69736d617460448201527f63680000000000000000000000000000000000000000000000000000000000006064820152fd5b80518210156200084a5760209160051b010190565b919062000cac815183511462000bfa565b60005b815181101562000d915773ffffffffffffffffffffffffffffffffffffffff60008162000cdd848662000c86565b511662000ceb848762000c86565b51906040918251947f23b872dd0000000000000000000000000000000000000000000000000000000086523360048701528916602486015260448501528360648160209586945af190811562000d87575062000d4d575b505060010162000caf565b81813d831162000d7f575b62000d64818362000879565b81010312620009275751801515036200092757388062000d42565b503d62000d58565b513d6000823e3d90fd5b50505050565b73ffffffffffffffffffffffffffffffffffffffff60005416330362000db957565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfe6080806040523462000b415762004d65803803809162000020828562000b8f565b8339810160e08282031262000b41576200003a8262000bb3565b90620000496020840162000bb3565b60408401519091906001600160401b03811162000b4157816200006e91860162000be0565b60608501519091906001600160401b03811162000b415785019281601f8501121562000b4157835190620000a28262000bc8565b94620000b2604051968762000b8f565b828652602086016020819460051b8301019185831162000b4157602001905b82821062000b4657505050608087015160a088015190936001600160401b03821162000b41576200010b60c09162000113938b0162000be0565b980162000bb3565b956001600160a01b0381161562000b28578062000134620001489262000cf8565b6001805560ff196002541660025562000cf8565b6002549060ff821662000b16577f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a17f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a16001600160a81b031990911660089190911b610100600160a81b031617600255600580546001600160a01b0319166001600160a01b03871617905560005b8651811015620002b0576001600160a01b0362000205828962000c61565b5116906003918254680100000000000000008110156200029a576001810180855581101562000284576000938452602090932090920180546001600160a01b0319169092179091556001906001600160a01b0362000264828a62000c61565b5116600052600460205260406000208260ff1982541617905501620001e7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b50859085601a6020604051620002c68162000b73565b828152017f31696e6368204c696d6974204f726465722050726f746f636f6c0000000000008152209060016020604051620003018162000b73565b82815201600d60fa1b815220906040519160208301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f85526040840152606083015246608083015260018060a01b031660a082015260a0815260c081019181831060018060401b038411176200029a57826040528151902060065586511562000ad257505083511562000a98579391926000916000916000945b81518610156200043d57600096875b845181101562000431576001600160a01b03620003c9898662000c61565b51166001600160a01b03620003df838862000c61565b511614620003f057600101620003ab565b509590979196506200040460019462000c76565b935b156200041a575b600101949590966200039c565b936200042860019162000c76565b9490506200040d565b50959097919662000406565b9387939287916200045b90851562000a8e5760ff60015b1662000c9c565b86510362000a3957600093845b875186101562000496576200048d60019162000485888b62000c61565b519062000c9c565b95019462000468565b87606488920362000a275760005b6009548110156200050957806000526008602052604060002060008155600181018054906000815581620004e6575b50509060006002600193015501620004a4565b6000526020600020908101905b81811015620004d35760008155600101620004f3565b508551869590936001600160401b0385116200029a576801000000000000000085116200029a57600a5485600a55808610620009de575b50602087019485600a600052602060002060005b838110620009c05750505050600060095580620007e3575b15620007d8579360ff60015b16926000945b87518610156200071c57600096875b845181101562000710576001600160a01b03620005ab898c62000c61565b51166001600160a01b03620005c1838862000c61565b511614620005d2576001016200058d565b509296509460015b15620005ee575b600101949591956200057e565b93604051620005fd8162000b73565b60018152602036818301376001600160a01b036200061c878b62000c61565b5116620006298262000c53565b5262000636828662000c61565b5160405190620006468262000b57565b815260208082019283526000604080840182905260095482526008909252208151815591518051906001600160401b0382116200029a576020906200068f836001870162000caa565b0160018401600052602060002060005b838110620006f2575050505091620006d3620006e992600260406001960151151591019060ff801983541691151516179055565b620006e060095462000c76565b60095562000c76565b949050620005e1565b82516001600160a01b0316818301556020909201916001016200069f565b509296959095620005da565b8792508693604051936040850190604086525180915260608501929060005b818110620007b85750505060209084830382860152519182815201919060005b818110620007a157857f8cf21a9a99c6e6e294434d3c1510565c9bff4dc3726dea94d4ffa88607e604cd86860387a142600b55600c55604051614025908162000d408239f35b82518452602093840193909201916001016200075b565b82516001600160a01b03168552602094850194909201916001016200073b565b9360ff600062000578565b620007f18195939562000bc8565b9262000801604051948562000b8f565b818452601f19620008128362000bc8565b013660208601376000946000965b8951881015620008c95760005b8951811015620008ba576001600160a01b036200084b8a8d62000c61565b51166001600160a01b0362000861838d62000c61565b51161462000872576001016200082d565b509296959193909291600190620008ac906001600160a01b03620008978a8e62000c61565b5116620008a5828a62000c61565b5262000c76565b965b01969290939162000820565b509193909296600190620008ae565b949196509450620008da8462000c53565b5160405190620008ea8262000b57565b8152602080820192835260016040830152600080526008905280517f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c790815591518051906001600160401b0382116200029a576020906200094f836001870162000caa565b0160018401600052602060002060005b838110620009a2575050505090600260406200098c930151151591019060ff801983541691151516179055565b6200099960095462000c76565b6009556200056c565b82516001600160a01b0316818301556020909201916001016200095f565b82516001600160a01b03168183015560209092019160010162000554565b600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89081019086015b81811062000a1a575062000540565b6000815560010162000a0b565b604051630767a3f160e31b8152600490fd5b60405162461bcd60e51b815260206004820152602760248201527f57726f6e672070657263656e7461676520636f756e7420666f722061737365746044820152662067726f75707360c81b6064820152608490fd5b60ff600062000454565b60405162461bcd60e51b8152602060048201526012602482015271139bc8185cdcd95d1cc81c1c9bdd9a59195960721b6044820152606490fd5b62461bcd60e51b8252602060c4820152601760e48201527f4e6f2070657263656e74616765732070726f766964656400000000000000000061010490910152606490fd5b60405163d93c066560e01b8152600490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b8151815260209182019101620000d1565b606081019081106001600160401b038211176200029a57604052565b604081019081106001600160401b038211176200029a57604052565b601f909101601f19168101906001600160401b038211908210176200029a57604052565b51906001600160a01b038216820362000b4157565b6001600160401b0381116200029a5760051b60200190565b9080601f8301121562000b415781519060209162000bfe8162000bc8565b9362000c0e604051958662000b8f565b81855260208086019260051b82010192831162000b4157602001905b82821062000c39575050505090565b83809162000c478462000bb3565b81520191019062000c2a565b805115620002845760200190565b8051821015620002845760209160051b010190565b600019811462000c865760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921162000c8657565b6801000000000000000082116200029a5780549180825582811062000cce57505050565b600091600052602060002092830192015b82811062000cec57505050565b81815560010162000cdf565b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c908163124528b81461228357816313e4ad5c1461220157816314bcec9f146121c45781631626ba7e146121075781631a650cc7146120a157816321371809146120345781633158174b14611fdd5781633f4ba83a14611f1e578163449e815d14611ed757816344caaba914611e875781634585e33b146119cc57816349689f581461197757816350371600146116125781635373433f1461153a5781635488a0b6146115005781635c975abb146114be5781636e04ff0d14611486578163715018a6146113ea5781637b1837de1461130a5781637f94dd33146112b75781638456cb591461122057816387685fb9146111605781638da5cb5b1461110f578163a6df16d7146110a2578163b0cc3d7614611067578163b4407fe114611012578163bdb3509114610fa6578163bf2e5de414610eec578163c45a015514610e96578163caa648b414610e54578163d9db093d14610dc0578163df4ac49d14610d83578163f2fde38b14610ca0578163f3fef3a314610b7f578163f4ea93d814610b45578163f4fdb8e31461024657508063f698da251461020a5763fb3f2b0003610011573461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090600c549051908152f35b5080fd5b503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610206576020906006549051908152f35b839150346102065760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065767ffffffffffffffff928135848111610b41576102989036908401612530565b91602492833590868211610b3d5736602383011215610b3d5781830135916102bf836124cd565b906102cc8651928361248c565b838252602093878584019160051b83010191368311610b395788869101915b838310610b295750505050604435888111610b255761030d9036908601612530565b926103166133e7565b815115610aca57825115610a6f57959496809891949895819582985b85518a10156103d557839a845b88518110156103c65773ffffffffffffffffffffffffffffffffffffffff806103688e8b612a96565b511690610375838c612a96565b5116146103845760010161033f565b50929990939a5061039a60019c92959c98612aaa565b975b156103b2575b600101989199929a93909a610332565b976103be600191612aaa565b9890506103a2565b50929990939a9b91949b61039c565b8785948c898f8d978b6103f88715159a8b600014610a675760ff60015b16612ad7565b8951036109e657859a869b5b8a518d101561042c5761042460019161041d8f8e612a96565b5190612ad7565b9c019b610404565b8b60648c92036109be57885b6009548110156104a057808a5260088c52898981208181558d6001908183019081549185815582610474575b5050505060020155600101610438565b85528420949392919085015b80861061049257508f82939495610464565b928555938401938d92610480565b5090888b989493928b85518581116109935768010000000000000000811161099357600a5481600a55808210610953575b508b8701600a85528c855b83811061090a57505050508183600955610731575b50156107295760ff60015b169881975b85518910156106f1578299835b81518110156106e75773ffffffffffffffffffffffffffffffffffffffff806105378d8b612a96565b5116906105448385612a96565b5116146105535760010161050e565b5099509760015b15610569575b60010197610501565b998651878101818110878211176106bc57906105ab91895260018082528436818401378d73ffffffffffffffffffffffffffffffffffffffff9384918b612a96565b51166105b683612a89565b526105c18488612a96565b51928a51936105cf85612454565b84528584019283528a84018781526009548852600887528b8820945185559251805191838601918b841161069057889061060985856127ee565b0191895287892090895b84811061067d575050505050509161066261067592600260019551151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b61066d600954612aaa565b600955612aaa565b9a9050610560565b8351821683820155928901928501610613565b8f8f8b6041837f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b898560418d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b509998909861055a565b827f8cf21a9a99c6e6e294434d3c1510565c9bff4dc3726dea94d4ffa88607e604cd85886107238b51928392836138d7565b0390a180f35b60ff816104fc565b610746909a949891939a999599979697613888565b95829783995b8b518b10156107f057845b88518110156107df578b8d61078273ffffffffffffffffffffffffffffffffffffffff928392612a96565b51168161078f848d612a96565b51161461079f5750600101610757565b6107cf91509a8c9b6001939597999f9496989d8f906107bd91612a96565b51166107c9828d612a96565b52612aaa565b995b01999492909b95939161074c565b509193959b909294996001906107d1565b959b949299509690975098949861080684612a89565b519087519161081483612454565b82528b8201908152600188830181815285805260088e528986209351845591518051918401908883116108df578e9061084d84846127ee565b019086528d8087209087905b8482106108b55750505050509060026108a19251151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b6108ac600954612aaa565b6009558a6104f1565b9060019173ffffffffffffffffffffffffffffffffffffffff85511694019381840155018f610859565b8b8760418f7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b825173ffffffffffffffffffffffffffffffffffffffff167fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a88201559101908d906001016104dc565b817fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a891820191015b81811061098857506104d1565b85815560010161097b565b888460418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8588517f3b3d1f88000000000000000000000000000000000000000000000000000000008152fd5b6084836027848b8951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f57726f6e672070657263656e7461676520636f756e7420666f7220617373657460448201527f2067726f757073000000000000000000000000000000000000000000000000006064820152fd5b60ff886103f2565b846012886064938951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4e6f206173736574732070726f766964656400000000000000000000000000006044820152fd5b846017886064938951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4e6f2070657263656e74616765732070726f76696465640000000000000000006044820152fd5b8780fd5b82358152918101918691016102eb565b8980fd5b8580fd5b8380fd5b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610206576020905160648152f35b905034610c9c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c57610bb76124e5565b60243591610bc36133e7565b600260015414610c7557507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59173ffffffffffffffffffffffffffffffffffffffff6020926002600155610c1e610c1982613c78565b612e1f565b1693610c6981517fa9059cbb000000000000000000000000000000000000000000000000000000008582015233602482015283604482015260448152610c6381612470565b86613df0565b51908152a26001805580f35b83517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c57610cd96124e5565b90610ce26133e7565b73ffffffffffffffffffffffffffffffffffffffff809216928315610d545750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610206576020906009549051908152f35b5050346102065760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065790610e5091610dfe6133e7565b805191806020840152818301527f1b00000000000000000000000000000000000000000000000000000000000000606083015260418252610e3e82612470565b51918291602083526020830190612704565b0390f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090610e8f61330c565b9051908152f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065760209073ffffffffffffffffffffffffffffffffffffffff60025460081c169051908152f35b828434610fa357602092837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065790829181838051610f2f81612454565b82815260608882015201523581526008845220610f96825192610f5184612454565b82548452606060ff6002610f6760018701612e84565b958888019687520154169382860194151585528251968796818852519087015251918501526080840190612762565b9051151560608301520390f35b80fd5b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c577f5a5fab736bb25f660ff902a421818c06b970866f4b164d46e8f04f6b838433f59160209135906110066133e7565b81600c5551908152a180f35b5050346102065760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090610e8f6110516124e5565b61105961250d565b906064359160443591613055565b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090610e8f612eed565b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c573591600a54831015610fa3575073ffffffffffffffffffffffffffffffffffffffff61110060209361264d565b92905490519260031b1c168152f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b828434610fa357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa3578151918291600a54808552602080950194600a83527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a892905b8282106111f357610e5086866111e1828b038361248c565b51918291602083526020830190612762565b835473ffffffffffffffffffffffffffffffffffffffff16875295860195600193840193909101906111c9565b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589161127c6133e7565b611284613852565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00600254161760025551338152a180f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065760209073ffffffffffffffffffffffffffffffffffffffff600554169051908152f35b50503461020657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610206577f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a52460206113656124e5565b73ffffffffffffffffffffffffffffffffffffffff602435916113866133e7565b611392610c1982613c78565b85517f23b872dd000000000000000000000000000000000000000000000000000000008582015233602482015230604482015260648082018590528152911694906113e290610c6360848261248c565b51908152a280f35b8334610fa357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa3576114216133e7565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b828434610fa357506114973661269c565b5050610e506114a4612afc565b839291925193849315158452806020850152830190612704565b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065760209060ff6002541690519015158152f35b8334610fa357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa357611537613924565b80f35b83833461020657602092837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c578373ffffffffffffffffffffffffffffffffffffffff61158b6124e5565b169160248451809481937f70a0823100000000000000000000000000000000000000000000000000000000835230908301525afa9283156116075780936115d5575b505051908152f35b909192508382813d8311611600575b6115ee818361248c565b81010312610fa35750519083806115cd565b503d6115e4565b8251903d90823e3d90fd5b8383346102065760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065761164b6124e5565b9261165461250d565b9360443560643590608435926116686133e7565b855160a0810181811067ffffffffffffffff82111761194b57875273ffffffffffffffffffffffffffffffffffffffff8092169586825260209988848c8501921694858352818501878152606086019089825260808701928b8452730E801D84Fa97b50751Dbf25036d067dCf18858bF9581600754966116e788612aaa565b60075551997f30c10b20000000000000000000000000000000000000000000000000000000008b525116888a0152511660248801525160448701525160648601525160848501523060a485015260c484015261010092838160e481855af493841561194157908c9392918c9561189d575b505061180893600654928b51958694859384937ffcc4c5e50000000000000000000000000000000000000000000000000000000085528401610100909392919360e061012082019580518352602081015173ffffffffffffffffffffffffffffffffffffffff8091166020850152806040830151166040850152806060830151166060850152608082015116608084015260a081015160a084015260c081015160c0840152015160e08201520152565b03915af4978815611892578098611860575b50508551948552878501528484015260608301526080820152827f323c05cdeadfff71a7441e36a3a55c023180f013af664c0fc25687e2b5a2bf4560a03093a351908152f35b909197508882813d831161188b575b611879818361248c565b81010312610fa357505195888061181a565b503d61186f565b8751903d90823e3d90fd5b81939550809294503d831161193a575b6118b7818361248c565b81010312610b3957918a916118089360e08b51916118d483612408565b805183526118e38682016128b7565b868401526118f28d82016128b7565b8d840152611902606082016128b7565b6060840152611913608082016128b7565b608084015260a081015160a084015260c081015160c0840152015160e0820152938d611758565b503d6118ad565b8a513d8d823e3d90fd5b6024896041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c5791819235815260086020522060ff6002825492015416825191825215156020820152f35b838334610206576119dc3661269c565b50506119e6613852565b6119ee613471565b92738f86403A4DE0BB5791fa46B8e795C547942fE4Cf938251907fdba0a0ed0000000000000000000000000000000000000000000000000000000082528282015260249060056024820152600f604482015260c081606481895af4908115611e7d578591611dcb575b508351927fc1be912e00000000000000000000000000000000000000000000000000000000845260e484019360e082820152600354809552610104810194600388527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90885b818110611d9f575050508251602482015286816020998a860151604483015288860151606483015281806060998a890151608483015260a0608099608081015160a4850152015160c483015203915af4938415611d95578794611c83575b505050835190868201908783528351809252858301918885019188905b8a838310611c3957505050505090807f392ba15c29c60d794434c0fb16db409c7ab1489f7cb2a99badebc06ad8488374920390a1835b8151811015611c355780611b8460019284612a96565b5173ffffffffffffffffffffffffffffffffffffffff907f7603cff60dc3d7d1025c12f1b8ade67aa4b048ccf2c115ac624b5cbfdfe9759482825116928a830193611c2c828651169280611be48d8801948d8651908a0197885192613055565b965116965116915192518b519384933098859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a301611b6e565b8480f35b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528282015116828801528a8101518b88015289015189870152948101949093019260019190910190611b38565b90919293503d8088843e611c97818461248c565b8201928883850312610b2557825167ffffffffffffffff93848211610b3957019284601f85011215611d9157835192611ccf846124cd565b95611cdc8a51978861248c565b8487528b8088019560071b87010195818711611d8d578c01945b868610611d0d575050505050505090868080611b1b565b8886830312611d8d578a5189810181811086821117611d62578c5289918e91611d35896128b7565b8152611d42838a016128b7565b838201528d808a0151908201528c8901518d820152815201950194611cf6565b848e6041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8b80fd5b8880fd5b86513d89823e3d90fd5b825473ffffffffffffffffffffffffffffffffffffffff16885260209097019660019283019201611abd565b905060c0813d60c011611e75575b81611de660c0938361248c565b81010312611e715783519060c0820182811067ffffffffffffffff821117611e45579060a0918652805183526020810151602084015285810151868401526060810151606084015260808101516080840152015160a082015286611a57565b6024876041877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b3d9150611dd9565b84513d87823e3d90fd5b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657606090611ec2612a51565b90839293519384526020840152151590820152f35b50503461020657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090610e8f611f156124e5565b60243590612911565b905034610c9c57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c57611f566133e7565b6002549060ff821615611fb657507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006020921660025551338152a180f35b82517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b828434610fa35760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa357506120176124e5565b50612026606435604435613445565b825191151582526020820152f35b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c573591600354831015610fa3575073ffffffffffffffffffffffffffffffffffffffff6120926020936125e7565b90549060031b1c169051908152f35b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c578160209360ff9273ffffffffffffffffffffffffffffffffffffffff6120f66124e5565b168252855220541690519015158152f35b905034610c9c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c576024359067ffffffffffffffff8211610b415736602383011215610b415781810135612162816125ad565b9261216f8551948561248c565b8184523660248383010111610b3d579160209586837fffffffff00000000000000000000000000000000000000000000000000000000969460246121bc9701838701378401015235612838565b915191168152f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090600b549051908152f35b8334610fa35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa35773ffffffffffffffffffffffffffffffffffffffff61224e6124e5565b6122566133e7565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600554161760055580f35b91905034610c9c576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b415767ffffffffffffffff908335828111610b3d576122d69036908601612530565b936122df6133e7565b84519283116123dc576801000000000000000083116123dc57506003548260035580831061239c575b50602084019060038652855b83811061235457867f05ceb613a91160c27bc798daf304568529eb02f563b31317bee548c8d2e3f7b2610723888851918291602083526020830190612762565b825173ffffffffffffffffffffffffffffffffffffffff167fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b82015591810191600101612314565b827fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91820191015b8181106123d15750612308565b8681556001016123c4565b8560416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b610100810190811067ffffffffffffffff82111761242557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761242557604052565b6080810190811067ffffffffffffffff82111761242557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761242557604052565b67ffffffffffffffff81116124255760051b60200190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361250857565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361250857565b9080601f8301121561250857602090823561254a816124cd565b93612558604051958661248c565b81855260208086019260051b82010192831161250857602001905b828210612581575050505090565b813573ffffffffffffffffffffffffffffffffffffffff81168103612508578152908301908301612573565b67ffffffffffffffff811161242557601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60035481101561261e5760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600a5481101561261e57600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80190600090565b805482101561261e5760005260206000200190600090565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126125085760043567ffffffffffffffff9283821161250857806023830112156125085781600401359384116125085760248483010111612508576024019190565b919082519283825260005b84811061274e5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b60208183018101518483018201520161270f565b90815180825260208080930193019160005b828110612782575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101612774565b818102929181159184041417156127bf57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6801000000000000000082116124255780549180825582811061281057505050565b600091600052602060002092830192015b82811061282d57505050565b818155600101612821565b61284e9161284591613ccd565b90929192613d09565b73ffffffffffffffffffffffffffffffffffffffff8060005416911614612893577fffffffff0000000000000000000000000000000000000000000000000000000090565b7f1626ba7e0000000000000000000000000000000000000000000000000000000090565b519073ffffffffffffffffffffffffffffffffffffffff8216820361250857565b81156128e2570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff908160025460081c166040519283917f741bef1a00000000000000000000000000000000000000000000000000000000835282600460209687935afa928315612a0b578492600094612a17575b506044908260405195869485937f7de4fd1000000000000000000000000000000000000000000000000000000000855216600484015260006024840152165afa918215612a0b576000926129db575b50506129d790670de0b6b3a7640000926127ac565b0490565b90809250813d8311612a04575b6129f2818361248c565b810103126125085751816129d76129c2565b503d6129e8565b6040513d6000823e3d90fd5b8381949295503d8311612a4a575b612a2f818361248c565b81010312612508576044612a4385936128b7565b9390612973565b503d612a25565b612a5961330c565b908115612a7e57612a71612a6b613471565b83613698565b90612a7b836136c2565b90565b600091508190600190565b80511561261e5760200190565b805182101561261e5760209160051b010190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146127bf5760010190565b919082018092116127bf57565b90816020910312612508575180151581036125085790565b738f86403A4DE0BB5791fa46B8e795C547942fE4Cf60005b60038054821015612df457600190818301908184116127bf578291925b612b41575b505050600101612b14565b90938195929554861015612deb5773ffffffffffffffffffffffffffffffffffffffff8060025460081c1690604080518080947f741bef1a000000000000000000000000000000000000000000000000000000008252602095869160049485915afa908115612d535785859392898c8f94600093612d9b575b50612bd887606493612bcc82946125e7565b9054911b1c16956125e7565b9054908d1b1c1693875198899384927f802431fb000000000000000000000000000000000000000000000000000000008452888401526024968784015260006044840152165afa948515612d905790869291600096612d5e575b509085929185519384927faed39d4c00000000000000000000000000000000000000000000000000000000845283015281895af4908115612d5357600091612d26575b5015612c91575050505084809695949501929591909493612b31565b90919294612cf69450612cb982612cac612d22999b9a6125e7565b905490841b1c169a6125e7565b9054911b1c169051978894850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810185528461248c565b9190565b612d469150853d8711612d4c575b612d3e818361248c565b810190612ae4565b38612c75565b503d612d34565b83513d6000823e3d90fd5b9195909282813d8311612d89575b612d76818361248c565b81010312610fa357505193859138612c32565b503d612d6c565b84513d6000823e3d90fd5b9596505050915082813d8311612de4575b612db6818361248c565b81010312610fa35750908a858a606487612bd8818d612bcc612dd8839b6128b7565b96945050935050612bba565b503d612dac565b93829550612b36565b505050604051906020820182811067ffffffffffffffff821117612425576040526000825260009190565b15612e2657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4173736574206e6f7420666f756e6420696e20616e792067726f7570000000006044820152fd5b90604051918281549182825260209260208301916000526020600020936000905b828210612ebd57505050612ebb9250038361248c565b565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958895509381019390910190612ea5565b6000906009545b808310612f02575060009150565b8260005260089260209380855260409460ff600287600020015416612f2d5750506001019250612ef4565b925092600094855b83600052858552600180836000200180548910156130495790612f59898893612684565b909173ffffffffffffffffffffffffffffffffffffffff938493546024600394895197889384927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152881b1c165afa93841561303e57908a8a8a8e94600098613000575b50936001989693612ff29693612fe793612ff89a97600052528a60002001612684565b9054911b1c16612911565b90612ad7565b960195612f35565b9450509050828196929495963d8311613037575b61301e818361248c565b81010312610fa35750519291908a908a8a8a6001612fc4565b503d613014565b86513d6000823e3d90fd5b50509450509350505090565b919061305f6133e7565b670de0b6b3a76400008061307386856127ac565b04906007549561308287612aaa565b600755610e104201928342116127bf5760e0976040948551926130a484612408565b6000809b858280975260209d8e820152828a8201528260608201528260808201528260a08201528260c08201520152650100000000008210156132af57918a916131c894938851926130f584612408565b8352308484018190528984015273ffffffffffffffffffffffffffffffffffffffff8c8116606085019081528b82166080860190815260a086018e815260c0870194855260509590951b60e087019081526006548d517ffcc4c5e5000000000000000000000000000000000000000000000000000000008152885160048201526020890151861660248201526040909801518516604489015292518416606488015290519092166084860152925160a4850152905160c48401525160e48301526101048201529283908190610124820190565b0381730E801D84Fa97b50751Dbf25036d067dCf18858bF5af49889156132a357819961326a575b50505084927f7603cff60dc3d7d1025c12f1b8ade67aa4b048ccf2c115ac624b5cbfdfe975949492613225613264938a986127ac565b0490519384933098859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a390565b90918093979a9950813d831161329c575b613285818361248c565b81010312610fa357505195969382826132256131ef565b503d61327b565b508451903d90823e3d90fd5b60648b8851907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601060248201527f45787069727920746f6f206c61726765000000000000000000000000000000006044820152fd5b600080600a545b80821061331f57505090565b909173ffffffffffffffffffffffffffffffffffffffff61333f8461264d565b90549060031b1c1660409081517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208082602481865afa9384156133dd57506000936133a9575b505091612ff26133a192600194612911565b920190613313565b8181949293943d83116133d6575b6133c1818361248c565b81010312610fa357505190612ff2600161338f565b503d6133b7565b513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff60005416330361340857565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b919082039182116127bf57565b81811115613462579061345791613438565b905b60058211159190565b61346b91613438565b90613459565b60008060038054915b8281106134875750505090565b613490816125e7565b9073ffffffffffffffffffffffffffffffffffffffff9182915490851b1c166040918251917f70a08231000000000000000000000000000000000000000000000000000000008352600490308285015260209160249383868681865afa95861561368d5760009661365e575b5085613512575b5050505050505060010161347a565b81848260029d9a9d5460081c168951928380927f741bef1a0000000000000000000000000000000000000000000000000000000082525afa90811561365357908594939291600091613614575b50906044929160008a5198899687957f7de4fd10000000000000000000000000000000000000000000000000000000008752860152840152165afa9384156133dd57506000936135d9575b505091670de0b6b3a76400006135c56135cc936001956127ac565b0490612ad7565b9390388080808080613503565b8181949293943d831161360d575b6135f1818361248c565b81010312610fa357505190670de0b6b3a76400006135c56135aa565b503d6135e7565b9192939482813d831161364c575b61362c818361248c565b81010312610fa35750916044916136448695946128b7565b90919261355f565b503d613622565b88513d6000823e3d90fd5b90958482813d8311613686575b613675818361248c565b81010312610fa357505194386134fc565b503d61366b565b87513d6000823e3d90fd5b80156136bb57612710918281029281840414901517156127bf57612a7b916128d8565b5050600090565b6009549060005b8281106136d857505050600190565b80600052602060088152604080600020908051916136f583612454565b805483526001918160ff600261370d86809601612e84565b9288880193845201541615158286015260009586945b61376b575b50505050506064918281029281840414901517156127bf5761374d84613755936128d8565b905190613445565b5015613763576001016136c9565b505050600090565b90919293958251805188101561384b5787836024926137a073ffffffffffffffffffffffffffffffffffffffff938492612a96565b51168751938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa91821561303e57908796959493929160009261380f575b5091612ff26138079288946138008d8951612a96565b5116612911565b970194613723565b91909293809596975082813d8311613844575b61382c818361248c565b81010312610fa3575051869594939291612ff26137ea565b503d613822565b5095613728565b60ff6002541661385e57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b90613892826124cd565b61389f604051918261248c565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06138cd82946124cd565b0190602036910137565b906138ea90604083526040830190612762565b81810360209283015282518082529082019282019160005b828110613910575050505090565b835185529381019392810192600101613902565b61392c61330c565b908115613c745760095461393f81613888565b90613949816124cd565b906040946139598651938461248c565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0613986836124cd565b0160005b818110613c635750506000906000600c54905b848110613aac575050506139b3575b5050509050565b91600a94919454946139cd6139c787613888565b96613888565b93600092835b828510613a1c57505050505092613a107f49eb56415ad74aa1cb4921343ded5a68ae5f5d7455e12bb65975bbcf857e1413939451928392836138d7565b0390a1803880806139ac565b919490929593966000925b613a318989612a96565b5151841015613a9657613a8e818b613a7860019473ffffffffffffffffffffffffffffffffffffffff613a708f8f8c91613a6a91612a96565b51612a96565b511692612a96565b52613a838b88612a96565b516107c9828a612a96565b930192613a27565b90979496919560019095019491939192506139d3565b8060005260206008815289806000208151613ac681612454565b815481526001809460ff6002613add848701612e84565b9583860196875201541615158584015260009485925b613b7a575b5050506064928381029381850414901517156127bf57613b198787946128d8565b90519081811115613b6b5790613b2e91613438565b905b81613b3b868d612a96565b5251613b47858b612a96565b52613b52848a612a96565b5011613b62575b5060010161399d565b93506001613b59565b613b7491613438565b90613b30565b8495919295518051871015613c5a578360249493928892613bb173ffffffffffffffffffffffffffffffffffffffff948592612a96565b51169051958680927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa908115613c4d578894600092613c15575b5091612ff2613c0b9286946138008b8b51612a96565b9501918f90613af3565b9190929380955082813d8311613c46575b613c30818361248c565b81010312610fa357505187939291612ff2613bf5565b503d613c26565b50508f513d6000823e3d90fd5b50819550613af8565b80606060208093880101520161398a565b9050565b600a549060005b828110613c8e57505050600090565b613c978161264d565b9073ffffffffffffffffffffffffffffffffffffffff90548185169260031b1c1614613cc557600101613c7f565b505050600190565b8151919060418303613cfe57613cf792506020820151906060604084015193015160001a90613eb2565b9192909190565b505060009160029190565b6004811015613dc15780613d1b575050565b60018103613d4d5760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b60028103613d8657602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b600314613d905750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008073ffffffffffffffffffffffffffffffffffffffff613e4893169360208151910182865af13d15613eaa573d90613e29826125ad565b91613e37604051938461248c565b82523d6000602084013e5b83613f4f565b8051908115159182613e8f575b5050613e5e5750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b613ea29250602080918301019101612ae4565b153880613e55565b606090613e42565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613f4357926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15613f3757805173ffffffffffffffffffffffffffffffffffffffff811615613f2e57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b90613f8e5750805115613f6457805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580613fe6575b613f9f575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15613f9756fea2646970667358221220fa7dad25ca86c38ece62e3ae233f56d7b07e0559b6513931cf1ef70be71cf39b64736f6c634300081700336080806040523462000b455762004be6803803809162000020828562000b93565b8339810160e08282031262000b45576200003a8262000bb7565b90620000496020840162000bb7565b60408401519091906001600160401b03811162000b4557816200006e91860162000be4565b60608501519091906001600160401b03811162000b455785019281601f8501121562000b4557835190620000a28262000bcc565b94620000b2604051968762000b93565b828652602086016020819460051b8301019185831162000b4557602001905b82821062000b4a57505050608087015160a088015190936001600160401b03821162000b45576200010b60c09162000113938b0162000be4565b980162000bb7565b956001600160a01b0381161562000b2c578062000134620001489262000cfc565b6001805560ff196002541660025562000cfc565b6002549060ff821662000b1a577f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a17f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a16001600160a81b031990911660089190911b610100600160a81b031617600255600580546001600160a01b0319166001600160a01b03871617905560005b8651811015620002b0576001600160a01b0362000205828962000c65565b5116906003918254680100000000000000008110156200029a576001810180855581101562000284576000938452602090932090920180546001600160a01b0319169092179091556001906001600160a01b0362000264828a62000c65565b5116600052600460205260406000208260ff1982541617905501620001e7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b50859085601a6020604051620002c68162000b77565b828152017f31696e6368204c696d6974204f726465722050726f746f636f6c0000000000008152209060016020604051620003018162000b77565b82815201600d60fa1b815220906040519160208301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f85526040840152606083015246608083015260018060a01b031660a082015260a0815260c081019181831060018060401b038411176200029a57826040528151902060065586511562000ad657505083511562000a9c579391926000916000916000945b81518610156200043d57600096875b845181101562000431576001600160a01b03620003c9898662000c65565b51166001600160a01b03620003df838862000c65565b511614620003f057600101620003ab565b509590979196506200040460019462000c7a565b935b156200041a575b600101949590966200039c565b936200042860019162000c7a565b9490506200040d565b50959097919662000406565b9387939287916200045b90851562000a925760ff60015b1662000ca0565b86510362000a3d57600093845b875186101562000496576200048d60019162000485888b62000c65565b519062000ca0565b95019462000468565b87606488920362000a2b5760005b6009548110156200050957806000526008602052604060002060008155600181018054906000815581620004e6575b50509060006002600193015501620004a4565b6000526020600020908101905b81811015620004d35760008155600101620004f3565b508551869590936001600160401b0385116200029a576801000000000000000085116200029a57600a5485600a55808610620009e2575b50602087019485600a600052602060002060005b838110620009c45750505050600060095580620007e7575b15620007dc579360ff60015b16926000945b87518610156200071c57600096875b845181101562000710576001600160a01b03620005ab898c62000c65565b51166001600160a01b03620005c1838862000c65565b511614620005d2576001016200058d565b509296509460015b15620005ee575b600101949591956200057e565b93604051620005fd8162000b77565b60018152602036818301376001600160a01b036200061c878b62000c65565b5116620006298262000c57565b5262000636828662000c65565b5160405190620006468262000b5b565b815260208082019283526000604080840182905260095482526008909252208151815591518051906001600160401b0382116200029a576020906200068f836001870162000cae565b0160018401600052602060002060005b838110620006f2575050505091620006d3620006e992600260406001960151151591019060ff801983541691151516179055565b620006e060095462000c7a565b60095562000c7a565b949050620005e1565b82516001600160a01b0316818301556020909201916001016200069f565b509296959095620005da565b8792508693604051936040850190604086525180915260608501929060005b818110620007bc5750505060209084830382860152519182815201919060005b818110620007a557857f8cf21a9a99c6e6e294434d3c1510565c9bff4dc3726dea94d4ffa88607e604cd86860387a142600b55600c5542600d55604051613ea2908162000d448239f35b82518452602093840193909201916001016200075b565b82516001600160a01b03168552602094850194909201916001016200073b565b9360ff600062000578565b620007f58195939562000bcc565b9262000805604051948562000b93565b818452601f19620008168362000bcc565b013660208601376000946000965b8951881015620008cd5760005b8951811015620008be576001600160a01b036200084f8a8d62000c65565b51166001600160a01b0362000865838d62000c65565b511614620008765760010162000831565b509296959193909291600190620008b0906001600160a01b036200089b8a8e62000c65565b5116620008a9828a62000c65565b5262000c7a565b965b01969290939162000824565b509193909296600190620008b2565b949196509450620008de8462000c57565b5160405190620008ee8262000b5b565b8152602080820192835260016040830152600080526008905280517f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c790815591518051906001600160401b0382116200029a5760209062000953836001870162000cae565b0160018401600052602060002060005b838110620009a65750505050906002604062000990930151151591019060ff801983541691151516179055565b6200099d60095462000c7a565b6009556200056c565b82516001600160a01b03168183015560209092019160010162000963565b82516001600160a01b03168183015560209092019160010162000554565b600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89081019086015b81811062000a1e575062000540565b6000815560010162000a0f565b604051630767a3f160e31b8152600490fd5b60405162461bcd60e51b815260206004820152602760248201527f57726f6e672070657263656e7461676520636f756e7420666f722061737365746044820152662067726f75707360c81b6064820152608490fd5b60ff600062000454565b60405162461bcd60e51b8152602060048201526012602482015271139bc8185cdcd95d1cc81c1c9bdd9a59195960721b6044820152606490fd5b62461bcd60e51b8252602060c4820152601760e48201527f4e6f2070657263656e74616765732070726f766964656400000000000000000061010490910152606490fd5b60405163d93c066560e01b8152600490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b8151815260209182019101620000d1565b606081019081106001600160401b038211176200029a57604052565b604081019081106001600160401b038211176200029a57604052565b601f909101601f19168101906001600160401b038211908210176200029a57604052565b51906001600160a01b038216820362000b4557565b6001600160401b0381116200029a5760051b60200190565b9080601f8301121562000b455781519060209162000c028162000bcc565b9362000c12604051958662000b93565b81855260208086019260051b82010192831162000b4557602001905b82821062000c3d575050505090565b83809162000c4b8462000bb7565b81520191019062000c2e565b805115620002845760200190565b8051821015620002845760209160051b010190565b600019811462000c8a5760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921162000c8a57565b6801000000000000000082116200029a5780549180825582811062000cd257505050565b600091600052602060002092830192015b82811062000cf057505050565b81815560010162000ce3565b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c918263106b9ca11461258057508163124528b8146123fb57816313e4ad5c1461237957816314bcec9f1461233c5781631626ba7e1461227f5781631a650cc71461221957816321371809146121ac5781633158174b146121555781633f4ba83a14612096578163449e815d1461204f57816344caaba914611fff5781634585e33b14611b4457816349689f5814611aef578163503716001461178a5781635373433f146116b25781635b7dcaed146116465781635c975abb146116045781636e04ff0d146115cc578163715018a6146115305781637b1837de146114505781637f94dd33146113fd5781638456cb591461136657816387685fb9146112a65781638da5cb5b14611255578163947a36fb14611218578163997be569146111c9578163a6df16d71461115c578163b0cc3d7614611121578163b4407fe1146110cc578163bf2e5de414611012578163c45a015514610fbc578163c6bb232014610ecc578163caa648b414610e8a578163d9db093d14610df6578163df4ac49d14610db9578163f2fde38b14610cd6578163f3fef3a314610bb5578163f4ea93d814610b7b578163f4fdb8e314610229575063f698da25146101ea5780610012565b3461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225576020906006549051908152f35b5080fd5b839150346102255760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255767ffffffffffffffff928135848111610b775761027b90369084016126e2565b91602492833590868211610b735736602383011215610b735781830135916102a28361267f565b906102af8651928361263e565b838252602093878584019160051b83010191368311610b6f5788869101915b838310610b5f5750505050604435888111610b5b576102f090369086016126e2565b926102f9613654565b815115610b0057825115610aa557959496809891949895819582985b85518a10156103b857839a845b88518110156103a95773ffffffffffffffffffffffffffffffffffffffff8061034b8e8b612c7c565b511690610358838c612c7c565b51161461036757600101610322565b50929990939a5061037d60019c92959c98612c90565b975b15610395575b600101989199929a93909a610315565b976103a1600191612c90565b989050610385565b50929990939a9b91949b61037f565b8785948c898f8d978b6103db8715159a8b600014610a9d5760ff60015b16612cbd565b895103610a1c57859a869b5b8a518d101561040f576104076001916104008f8e612c7c565b5190612cbd565b9c019b6103e7565b8b60648c92036109f457885b60095481101561048357808a5260088c52898981208181558d6001908183019081549185815582610457575b505050506002015560010161041b565b85528420949392919085015b80861061047557508f82939495610447565b928555938401938d92610463565b5090888b989493928b85518581116109c9576801000000000000000081116109c957600a5481600a55808210610989575b508b8701600a85528c855b8381106109405750505050818360095561072a575b50156107225760ff60015b169881975b85518910156106d4578299835b81518110156106ca5773ffffffffffffffffffffffffffffffffffffffff8061051a8d8b612c7c565b5116906105278385612c7c565b511614610536576001016104f1565b5099509760015b1561054c575b600101976104e4565b9986518781018181108782111761069f579061058e91895260018082528436818401378d73ffffffffffffffffffffffffffffffffffffffff9384918b612c7c565b511661059983612c6f565b526105a48488612c7c565b51928a51936105b285612606565b84528584019283528a84018781526009548852600887528b8820945185559251805191838601918b84116106735788906105ec85856129d4565b0191895287892090895b848110610660575050505050509161064561065892600260019551151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b610650600954612c90565b600955612c90565b9a9050610543565b83518216838201559289019285016105f6565b8f8f8b6041837f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b898560418d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b509998909861053d565b5085518681527f8cf21a9a99c6e6e294434d3c1510565c9bff4dc3726dea94d4ffa88607e604cd91819061071c908661070f848c018b612914565b918483039085015261295e565b0390a180f35b60ff816104df565b95967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610777610762899d979b94969d9c989c61267f565b9861076f8b519a8b61263e565b808a5261267f565b013686890137829783995b8b518b101561082657845b8851811015610815578b8d6107b873ffffffffffffffffffffffffffffffffffffffff928392612c7c565b5116816107c5848d612c7c565b5116146107d5575060010161078d565b61080591509a8c9b6001939597999f9496989d8f906107f391612c7c565b51166107ff828d612c7c565b52612c90565b995b01999492909b959391610782565b509193959b90929499600190610807565b959b949299509690975098949861083c84612c6f565b519087519161084a83612606565b82528b8201908152600188830181815285805260088e52898620935184559151805191840190888311610915578e9061088384846129d4565b019086528d8087209087905b8482106108eb5750505050509060026108d79251151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b6108e2600954612c90565b6009558a6104d4565b9060019173ffffffffffffffffffffffffffffffffffffffff85511694019381840155018f61088f565b8b8760418f7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b825173ffffffffffffffffffffffffffffffffffffffff167fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a88201559101908d906001016104bf565b817fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a891820191015b8181106109be57506104b4565b8581556001016109b1565b888460418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8588517f3b3d1f88000000000000000000000000000000000000000000000000000000008152fd5b6084836027848b8951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f57726f6e672070657263656e7461676520636f756e7420666f7220617373657460448201527f2067726f757073000000000000000000000000000000000000000000000000006064820152fd5b60ff886103d5565b846012886064938951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4e6f206173736574732070726f766964656400000000000000000000000000006044820152fd5b846017886064938951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4e6f2070657263656e74616765732070726f76696465640000000000000000006044820152fd5b8780fd5b82358152918101918691016102ce565b8980fd5b8580fd5b8380fd5b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225576020905160648152f35b905034610cd257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd257610bed612697565b60243591610bf9613654565b600260015414610cab57507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59173ffffffffffffffffffffffffffffffffffffffff6020926002600155610c54610c4f82613af5565b613005565b1693610c9f81517fa9059cbb000000000000000000000000000000000000000000000000000000008582015233602482015283604482015260448152610c9981612622565b86613c6d565b51908152a26001805580f35b83517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd257610d0f612697565b90610d18613654565b73ffffffffffffffffffffffffffffffffffffffff809216928315610d8a5750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225576020906009549051908152f35b5050346102255760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255790610e8691610e34613654565b805191806020840152818301527f1b00000000000000000000000000000000000000000000000000000000000000606083015260418252610e7482612622565b519182916020835260208301906128b6565b0390f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090610ec5613579565b9051908152f35b905034610cd257827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd257610f0b600d54600c5490612cbd565b4210610f6057507fd0489b16e641d6e7209575900e1253909da7c587d3949634e24e5f8f11d00c0f9042600d55610f406130d3565b90610f54815192828493845283019061295e565b4260208301520390a180f35b602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600960248201527f546f6f206561726c7900000000000000000000000000000000000000000000006044820152fd5b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760209073ffffffffffffffffffffffffffffffffffffffff60025460081c169051908152f35b8284346110c957602092837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225579082918183805161105581612606565b828152606088820152015235815260088452206110bc82519261107784612606565b82548452606060ff600261108d6001870161306a565b958888019687520154169382860194151585528251968796818852519087015251918501526080840190612914565b9051151560608301520390f35b80fd5b5050346102255760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090610ec561110b612697565b6111136126bf565b9060643591604435916132c2565b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090610ec561315a565b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2573591600a548310156110c9575073ffffffffffffffffffffffffffffffffffffffff6111ba6020936127ff565b92905490519260031b1c168152f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557610e86906112056130d3565b905191829160208352602083019061295e565b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090600c549051908152f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b8284346110c957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110c9578151918291600a54808552602080950194600a83527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a892905b82821061133957610e868686611327828b038361263e565b51918291602083526020830190612914565b835473ffffffffffffffffffffffffffffffffffffffff168752958601956001938401939091019061130f565b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916113c2613654565b6113ca613abf565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00600254161760025551338152a180f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760209073ffffffffffffffffffffffffffffffffffffffff600554169051908152f35b50503461022557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225577f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a52460206114ab612697565b73ffffffffffffffffffffffffffffffffffffffff602435916114cc613654565b6114d8610c4f82613af5565b85517f23b872dd0000000000000000000000000000000000000000000000000000000085820152336024820152306044820152606480820185905281529116949061152890610c9960848261263e565b51908152a280f35b83346110c957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110c957611567613654565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8284346110c957506115dd3661284e565b5050610e866115ea612ce2565b8392919251938493151584528060208501528301906128b6565b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760209060ff6002541690519015158152f35b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2577fc6f44473d25b86976ee7357c1339328224e349abc5486edc3007ef658a57608a9160209135906116a6613654565b81600c5551908152a180f35b83833461022557602092837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2578373ffffffffffffffffffffffffffffffffffffffff611703612697565b169160248451809481937f70a0823100000000000000000000000000000000000000000000000000000000835230908301525afa92831561177f57809361174d575b505051908152f35b909192508382813d8311611778575b611766818361263e565b810103126110c9575051908380611745565b503d61175c565b8251903d90823e3d90fd5b8383346102255760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225576117c3612697565b926117cc6126bf565b9360443560643590608435926117e0613654565b855160a0810181811067ffffffffffffffff821117611ac357875273ffffffffffffffffffffffffffffffffffffffff8092169586825260209988848c8501921694858352818501878152606086019089825260808701928b8452730E801D84Fa97b50751Dbf25036d067dCf18858bF95816007549661185f88612c90565b60075551997f30c10b20000000000000000000000000000000000000000000000000000000008b525116888a0152511660248801525160448701525160648601525160848501523060a485015260c484015261010092838160e481855af4938415611ab957908c9392918c95611a15575b505061198093600654928b51958694859384937ffcc4c5e50000000000000000000000000000000000000000000000000000000085528401610100909392919360e061012082019580518352602081015173ffffffffffffffffffffffffffffffffffffffff8091166020850152806040830151166040850152806060830151166060850152608082015116608084015260a081015160a084015260c081015160c0840152015160e08201520152565b03915af4978815611a0a5780986119d8575b50508551948552878501528484015260608301526080820152827f323c05cdeadfff71a7441e36a3a55c023180f013af664c0fc25687e2b5a2bf4560a03093a351908152f35b909197508882813d8311611a03575b6119f1818361263e565b810103126110c9575051958880611992565b503d6119e7565b8751903d90823e3d90fd5b81939550809294503d8311611ab2575b611a2f818361263e565b81010312610b6f57918a916119809360e08b5191611a4c836125ba565b80518352611a5b868201612a9d565b86840152611a6a8d8201612a9d565b8d840152611a7a60608201612a9d565b6060840152611a8b60808201612a9d565b608084015260a081015160a084015260c081015160c0840152015160e0820152938d6118d0565b503d611a25565b8a513d8d823e3d90fd5b6024896041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd25791819235815260086020522060ff6002825492015416825191825215156020820152f35b83833461022557611b543661284e565b5050611b5e613abf565b611b666136de565b92738f86403A4DE0BB5791fa46B8e795C547942fE4Cf938251907fdba0a0ed0000000000000000000000000000000000000000000000000000000082528282015260249060056024820152600f604482015260c081606481895af4908115611ff5578591611f43575b508351927fc1be912e00000000000000000000000000000000000000000000000000000000845260e484019360e082820152600354809552610104810194600388527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90885b818110611f17575050508251602482015286816020998a860151604483015288860151606483015281806060998a890151608483015260a0608099608081015160a4850152015160c483015203915af4938415611f0d578794611dfb575b505050835190868201908783528351809252858301918885019188905b8a838310611db157505050505090807f392ba15c29c60d794434c0fb16db409c7ab1489f7cb2a99badebc06ad8488374920390a1835b8151811015611dad5780611cfc60019284612c7c565b5173ffffffffffffffffffffffffffffffffffffffff907f7603cff60dc3d7d1025c12f1b8ade67aa4b048ccf2c115ac624b5cbfdfe9759482825116928a830193611da4828651169280611d5c8d8801948d8651908a01978851926132c2565b965116965116915192518b519384933098859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a301611ce6565b8480f35b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528282015116828801528a8101518b88015289015189870152948101949093019260019190910190611cb0565b90919293503d8088843e611e0f818461263e565b8201928883850312610b5b57825167ffffffffffffffff93848211610b6f57019284601f85011215611f0957835192611e478461267f565b95611e548a51978861263e565b8487528b8088019560071b87010195818711611f05578c01945b868610611e85575050505050505090868080611c93565b8886830312611f05578a5189810181811086821117611eda578c5289918e91611ead89612a9d565b8152611eba838a01612a9d565b838201528d808a0151908201528c8901518d820152815201950194611e6e565b848e6041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8b80fd5b8880fd5b86513d89823e3d90fd5b825473ffffffffffffffffffffffffffffffffffffffff16885260209097019660019283019201611c35565b905060c0813d60c011611fed575b81611f5e60c0938361263e565b81010312611fe95783519060c0820182811067ffffffffffffffff821117611fbd579060a0918652805183526020810151602084015285810151868401526060810151606084015260808101516080840152015160a082015286611bcf565b6024876041877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b3d9150611f51565b84513d87823e3d90fd5b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760609061203a612c37565b90839293519384526020840152151590820152f35b50503461022557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090610ec561208d612697565b60243590612af7565b905034610cd257827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2576120ce613654565b6002549060ff82161561212e57507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006020921660025551338152a180f35b82517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b8284346110c95760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110c9575061218f612697565b5061219e6064356044356136b2565b825191151582526020820152f35b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd25735916003548310156110c9575073ffffffffffffffffffffffffffffffffffffffff61220a602093612799565b90549060031b1c169051908152f35b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2578160209360ff9273ffffffffffffffffffffffffffffffffffffffff61226e612697565b168252855220541690519015158152f35b905034610cd257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2576024359067ffffffffffffffff8211610b775736602383011215610b7757818101356122da8161275f565b926122e78551948561263e565b8184523660248383010111610b73579160209586837fffffffff00000000000000000000000000000000000000000000000000000000969460246123349701838701378401015235612a1e565b915191168152f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090600b549051908152f35b83346110c95760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110c95773ffffffffffffffffffffffffffffffffffffffff6123c6612697565b6123ce613654565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600554161760055580f35b91905034610cd2576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b775767ffffffffffffffff908335828111610b735761244e90369086016126e2565b93612457613654565b845192831161255457680100000000000000008311612554575060035482600355808310612514575b50602084019060038652855b8381106124cc57867f05ceb613a91160c27bc798daf304568529eb02f563b31317bee548c8d2e3f7b261071c888851918291602083526020830190612914565b825173ffffffffffffffffffffffffffffffffffffffff167fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b8201559181019160010161248c565b827fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91820191015b8181106125495750612480565b86815560010161253c565b8560416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b84903461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090600d548152f35b610100810190811067ffffffffffffffff8211176125d757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176125d757604052565b6080810190811067ffffffffffffffff8211176125d757604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176125d757604052565b67ffffffffffffffff81116125d75760051b60200190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036126ba57565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff821682036126ba57565b9080601f830112156126ba5760209082356126fc8161267f565b9361270a604051958661263e565b81855260208086019260051b8201019283116126ba57602001905b828210612733575050505090565b813573ffffffffffffffffffffffffffffffffffffffff811681036126ba578152908301908301612725565b67ffffffffffffffff81116125d757601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6003548110156127d05760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600a548110156127d057600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80190600090565b80548210156127d05760005260206000200190600090565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126126ba5760043567ffffffffffffffff928382116126ba57806023830112156126ba5781600401359384116126ba57602484830101116126ba576024019190565b919082519283825260005b8481106129005750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016128c1565b90815180825260208080930193019160005b828110612934575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101612926565b90815180825260208080930193019160005b82811061297e575050505090565b835185529381019392810192600101612970565b818102929181159184041417156129a557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6801000000000000000082116125d7578054918082558281106129f657505050565b600091600052602060002092830192015b828110612a1357505050565b818155600101612a07565b612a3491612a2b91613b4a565b90929192613b86565b73ffffffffffffffffffffffffffffffffffffffff8060005416911614612a79577fffffffff0000000000000000000000000000000000000000000000000000000090565b7f1626ba7e0000000000000000000000000000000000000000000000000000000090565b519073ffffffffffffffffffffffffffffffffffffffff821682036126ba57565b8115612ac8570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff908160025460081c166040519283917f741bef1a00000000000000000000000000000000000000000000000000000000835282600460209687935afa928315612bf1578492600094612bfd575b506044908260405195869485937f7de4fd1000000000000000000000000000000000000000000000000000000000855216600484015260006024840152165afa918215612bf157600092612bc1575b5050612bbd90670de0b6b3a764000092612992565b0490565b90809250813d8311612bea575b612bd8818361263e565b810103126126ba575181612bbd612ba8565b503d612bce565b6040513d6000823e3d90fd5b8381949295503d8311612c30575b612c15818361263e565b810103126126ba576044612c298593612a9d565b9390612b59565b503d612c0b565b612c3f613579565b908115612c6457612c57612c516136de565b83613905565b90612c618361392f565b90565b600091508190600190565b8051156127d05760200190565b80518210156127d05760209160051b010190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146129a55760010190565b919082018092116129a557565b908160209103126126ba575180151581036126ba5790565b738f86403A4DE0BB5791fa46B8e795C547942fE4Cf60005b60038054821015612fda57600190818301908184116129a5578291925b612d27575b505050600101612cfa565b90938195929554861015612fd15773ffffffffffffffffffffffffffffffffffffffff8060025460081c1690604080518080947f741bef1a000000000000000000000000000000000000000000000000000000008252602095869160049485915afa908115612f395785859392898c8f94600093612f81575b50612dbe87606493612db28294612799565b9054911b1c1695612799565b9054908d1b1c1693875198899384927f802431fb000000000000000000000000000000000000000000000000000000008452888401526024968784015260006044840152165afa948515612f765790869291600096612f44575b509085929185519384927faed39d4c00000000000000000000000000000000000000000000000000000000845283015281895af4908115612f3957600091612f0c575b5015612e77575050505084809695949501929591909493612d17565b90919294612edc9450612e9f82612e92612f08999b9a612799565b905490841b1c169a612799565b9054911b1c169051978894850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810185528461263e565b9190565b612f2c9150853d8711612f32575b612f24818361263e565b810190612cca565b38612e5b565b503d612f1a565b83513d6000823e3d90fd5b9195909282813d8311612f6f575b612f5c818361263e565b810103126110c957505193859138612e18565b503d612f52565b84513d6000823e3d90fd5b9596505050915082813d8311612fca575b612f9c818361263e565b810103126110c95750908a858a606487612dbe818d612db2612fbe839b612a9d565b96945050935050612da0565b503d612f92565b93829550612d1c565b505050604051906020820182811067ffffffffffffffff8211176125d7576040526000825260009190565b1561300c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4173736574206e6f7420666f756e6420696e20616e792067726f7570000000006044820152fd5b90604051918281549182825260209260208301916000526020600020936000905b8282106130a3575050506130a19250038361263e565b565b855473ffffffffffffffffffffffffffffffffffffffff168452600195860195889550938101939091019061308b565b6009546130df8161267f565b9060406130ef604051938461263e565b8183526130fb8261267f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06020910136602086013760009060005b84811061313b57505050505090565b80600191845260088352848420546131538289612c7c565b520161312c565b6000906009545b80831061316f575060009150565b8260005260089260209380855260409460ff60028760002001541661319a5750506001019250613161565b925092600094855b83600052858552600180836000200180548910156132b657906131c6898893612836565b909173ffffffffffffffffffffffffffffffffffffffff938493546024600394895197889384927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152881b1c165afa9384156132ab57908a8a8a8e9460009861326d575b5093600198969361325f9693613254936132659a97600052528a60002001612836565b9054911b1c16612af7565b90612cbd565b9601956131a2565b9450509050828196929495963d83116132a4575b61328b818361263e565b810103126110c95750519291908a908a8a8a6001613231565b503d613281565b86513d6000823e3d90fd5b50509450509350505090565b91906132cc613654565b670de0b6b3a7640000806132e08685612992565b0490600754956132ef87612c90565b600755610e104201928342116129a55760e097604094855192613311846125ba565b6000809b858280975260209d8e820152828a8201528260608201528260808201528260a08201528260c082015201526501000000000082101561351c57918a916134359493885192613362846125ba565b8352308484018190528984015273ffffffffffffffffffffffffffffffffffffffff8c8116606085019081528b82166080860190815260a086018e815260c0870194855260509590951b60e087019081526006548d517ffcc4c5e5000000000000000000000000000000000000000000000000000000008152885160048201526020890151861660248201526040909801518516604489015292518416606488015290519092166084860152925160a4850152905160c48401525160e48301526101048201529283908190610124820190565b0381730E801D84Fa97b50751Dbf25036d067dCf18858bF5af49889156135105781996134d7575b50505084927f7603cff60dc3d7d1025c12f1b8ade67aa4b048ccf2c115ac624b5cbfdfe9759494926134926134d1938a98612992565b0490519384933098859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a390565b90918093979a9950813d8311613509575b6134f2818361263e565b810103126110c9575051959693828261349261345c565b503d6134e8565b508451903d90823e3d90fd5b60648b8851907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601060248201527f45787069727920746f6f206c61726765000000000000000000000000000000006044820152fd5b600080600a545b80821061358c57505090565b909173ffffffffffffffffffffffffffffffffffffffff6135ac846127ff565b90549060031b1c1660409081517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208082602481865afa93841561364a5750600093613616575b50509161325f61360e92600194612af7565b920190613580565b8181949293943d8311613643575b61362e818361263e565b810103126110c95750519061325f60016135fc565b503d613624565b513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff60005416330361367557565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b919082039182116129a557565b818111156136cf57906136c4916136a5565b905b60058211159190565b6136d8916136a5565b906136c6565b60008060038054915b8281106136f45750505090565b6136fd81612799565b9073ffffffffffffffffffffffffffffffffffffffff9182915490851b1c166040918251917f70a08231000000000000000000000000000000000000000000000000000000008352600490308285015260209160249383868681865afa9586156138fa576000966138cb575b508561377f575b505050505050506001016136e7565b81848260029d9a9d5460081c168951928380927f741bef1a0000000000000000000000000000000000000000000000000000000082525afa9081156138c057908594939291600091613881575b50906044929160008a5198899687957f7de4fd10000000000000000000000000000000000000000000000000000000008752860152840152165afa93841561364a5750600093613846575b505091670de0b6b3a764000061383261383993600195612992565b0490612cbd565b9390388080808080613770565b8181949293943d831161387a575b61385e818361263e565b810103126110c957505190670de0b6b3a7640000613832613817565b503d613854565b9192939482813d83116138b9575b613899818361263e565b810103126110c95750916044916138b1869594612a9d565b9091926137cc565b503d61388f565b88513d6000823e3d90fd5b90958482813d83116138f3575b6138e2818361263e565b810103126110c95750519438613769565b503d6138d8565b87513d6000823e3d90fd5b801561392857612710918281029281840414901517156129a557612c6191612abe565b5050600090565b6009549060005b82811061394557505050600190565b806000526020600881526040806000209080519161396283612606565b805483526001918160ff600261397a8680960161306a565b9288880193845201541615158286015260009586945b6139d8575b50505050506064918281029281840414901517156129a5576139ba846139c293612abe565b9051906136b2565b50156139d057600101613936565b505050600090565b909192939582518051881015613ab8578783602492613a0d73ffffffffffffffffffffffffffffffffffffffff938492612c7c565b51168751938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9182156132ab579087969594939291600092613a7c575b509161325f613a74928894613a6d8d8951612c7c565b5116612af7565b970194613990565b91909293809596975082813d8311613ab1575b613a99818361263e565b810103126110c957505186959493929161325f613a57565b503d613a8f565b5095613995565b60ff60025416613acb57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b600a549060005b828110613b0b57505050600090565b613b14816127ff565b9073ffffffffffffffffffffffffffffffffffffffff90548185169260031b1c1614613b4257600101613afc565b505050600190565b8151919060418303613b7b57613b7492506020820151906060604084015193015160001a90613d2f565b9192909190565b505060009160029190565b6004811015613c3e5780613b98575050565b60018103613bca5760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b60028103613c0357602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b600314613c0d5750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008073ffffffffffffffffffffffffffffffffffffffff613cc593169360208151910182865af13d15613d27573d90613ca68261275f565b91613cb4604051938461263e565b82523d6000602084013e5b83613dcc565b8051908115159182613d0c575b5050613cdb5750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b613d1f9250602080918301019101612cca565b153880613cd2565b606090613cbf565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613dc057926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15613db457805173ffffffffffffffffffffffffffffffffffffffff811615613dab57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b90613e0b5750805115613de157805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580613e63575b613e1c575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15613e1456fea26469706673582212200396abeb646ba5b751576a153d04898017f7bda40c878bd2f090a9e215095a4764736f6c63430008170033a2646970667358221220bea1f9820825c369de2221962c8d14abe4c1a833949ced74cf4d98d43fb421f764736f6c63430008170033",
  "deployedBytecode": "0x608060408181526004803610156200001657600080fd5b600092833560e01c9081632137180914620007ad57508063623d7eec1462000536578063715018a61462000496578063741bef1a14620004415780637f819f6314620003c65780637f94dd3314620003715780638da5cb5b146200031e578063a1d69935146200021a578063edf5b0a514620001885763f2fde38b146200009c57600080fd5b34620001845760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200018457620000d762000903565b90620000e262000d97565b73ffffffffffffffffffffffffffffffffffffffff809216928315620001555750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b5050346200021657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200021657620001c462000903565b6024359273ffffffffffffffffffffffffffffffffffffffff80921681526005602052828120908154851015620002135750602093620002049162000831565b92905490519260031b1c168152f35b80fd5b5080fd5b50903462000184576200022d3662000994565b959173ffffffffffffffffffffffffffffffffffffffff95919596876003541690865192614d658085019085821067ffffffffffffffff831117620002f257918862000287949287969462000dea88393090339062000a97565b039083f08015620002e857602096620002a591169586948562000c9b565b3382528552620002b88284832062000ba9565b82519081527f17d323808e3c939a366f88d51e4c846abb19dcc52719a5dbe040b608bd776b66853392a351908152f35b84513d84823e3d90fd5b6024886041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5050346200021657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620002165773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5050346200021657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620002165760209073ffffffffffffffffffffffffffffffffffffffff600354169051908152f35b5091346200021357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011262000213576200040262000903565b906024359373ffffffffffffffffffffffffffffffffffffffff8093168252602052828120908154851015620002135750602093620002049162000831565b5050346200021657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620002165760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b83346200021357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200021357620004d162000d97565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5082903462000216576200054a3662000994565b6200055d84929396945184511462000bfa565b835b8251811015620006b65773ffffffffffffffffffffffffffffffffffffffff6200058a828562000c86565b511688518080927f70a08231000000000000000000000000000000000000000000000000000000008252338a830152602092839160249586915afa908115620006ac57889162000675575b50620005e2848862000c86565b5111620005f45750506001016200055f565b602560849289928c51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f496e73756666696369656e7420746f6b656e2062616c616e636520696e20666160448201527f63746f72790000000000000000000000000000000000000000000000000000006064820152fd5b90508181813d8311620006a4575b6200068f818362000879565b81010312620006a057518b620005d5565b8780fd5b503d62000683565b8b513d8a823e3d90fd5b50869293948673ffffffffffffffffffffffffffffffffffffffff92836003541691865193614be68086019186831067ffffffffffffffff841117620007815750918762000712949287969462005b4f88393090339062000a97565b039086f080156200077757602095620007376200074594938693169687948562000c9b565b338152600587522062000ba9565b818151600181527f17d323808e3c939a366f88d51e4c846abb19dcc52719a5dbe040b608bd776b66853392a351908152f35b83513d87823e3d90fd5b8b60416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b92505034620001845760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620001845735600254811015620001845773ffffffffffffffffffffffffffffffffffffffff906002602094527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0154168152f35b80548210156200084a5760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117620008bb57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111620008bb5760051b60200190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036200092757565b600080fd5b9080601f83011215620009275760209082356200094981620008ea565b9362000959604051958662000879565b81855260208086019260051b8201019283116200092757602001905b82821062000984575050505090565b8135815290830190830162000975565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112620009275767ffffffffffffffff9160043583811162000927578260238201121562000927578060040135620009f081620008ea565b9162000a00604051938462000879565b8183526020916024602085019160051b830101918683116200092757602401905b82821062000a6957505050509260243581811162000927578362000a48916004016200092c565b92604435918211620009275762000a62916004016200092c565b9060643590565b813573ffffffffffffffffffffffffffffffffffffffff811681036200092757815290830190830162000a21565b9490939296959660e0860173ffffffffffffffffffffffffffffffffffffffff809616875285602094168488015260e06040880152815180915283610100880192019060005b81811062000b9257505050858103606087015282808551928381520194019060005b81811062000b7d57505050608085015283820360a08501528060025492838152019160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace916000905b82821062000b6357505050509060c0919416910152565b835486168552938401936001938401939091019062000b4c565b82518652948401949184019160010162000aff565b825188168452928501929185019160010162000add565b805468010000000000000000811015620008bb5762000bce9160018201815562000831565b73ffffffffffffffffffffffffffffffffffffffff9291928084549260031b9316831b921b1916179055565b1562000c0257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f546f6b656e7320616e6420616d6f756e7473206c656e677468206d69736d617460448201527f63680000000000000000000000000000000000000000000000000000000000006064820152fd5b80518210156200084a5760209160051b010190565b919062000cac815183511462000bfa565b60005b815181101562000d915773ffffffffffffffffffffffffffffffffffffffff60008162000cdd848662000c86565b511662000ceb848762000c86565b51906040918251947f23b872dd0000000000000000000000000000000000000000000000000000000086523360048701528916602486015260448501528360648160209586945af190811562000d87575062000d4d575b505060010162000caf565b81813d831162000d7f575b62000d64818362000879565b81010312620009275751801515036200092757388062000d42565b503d62000d58565b513d6000823e3d90fd5b50505050565b73ffffffffffffffffffffffffffffffffffffffff60005416330362000db957565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfe6080806040523462000b415762004d65803803809162000020828562000b8f565b8339810160e08282031262000b41576200003a8262000bb3565b90620000496020840162000bb3565b60408401519091906001600160401b03811162000b4157816200006e91860162000be0565b60608501519091906001600160401b03811162000b415785019281601f8501121562000b4157835190620000a28262000bc8565b94620000b2604051968762000b8f565b828652602086016020819460051b8301019185831162000b4157602001905b82821062000b4657505050608087015160a088015190936001600160401b03821162000b41576200010b60c09162000113938b0162000be0565b980162000bb3565b956001600160a01b0381161562000b28578062000134620001489262000cf8565b6001805560ff196002541660025562000cf8565b6002549060ff821662000b16577f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a17f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a16001600160a81b031990911660089190911b610100600160a81b031617600255600580546001600160a01b0319166001600160a01b03871617905560005b8651811015620002b0576001600160a01b0362000205828962000c61565b5116906003918254680100000000000000008110156200029a576001810180855581101562000284576000938452602090932090920180546001600160a01b0319169092179091556001906001600160a01b0362000264828a62000c61565b5116600052600460205260406000208260ff1982541617905501620001e7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b50859085601a6020604051620002c68162000b73565b828152017f31696e6368204c696d6974204f726465722050726f746f636f6c0000000000008152209060016020604051620003018162000b73565b82815201600d60fa1b815220906040519160208301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f85526040840152606083015246608083015260018060a01b031660a082015260a0815260c081019181831060018060401b038411176200029a57826040528151902060065586511562000ad257505083511562000a98579391926000916000916000945b81518610156200043d57600096875b845181101562000431576001600160a01b03620003c9898662000c61565b51166001600160a01b03620003df838862000c61565b511614620003f057600101620003ab565b509590979196506200040460019462000c76565b935b156200041a575b600101949590966200039c565b936200042860019162000c76565b9490506200040d565b50959097919662000406565b9387939287916200045b90851562000a8e5760ff60015b1662000c9c565b86510362000a3957600093845b875186101562000496576200048d60019162000485888b62000c61565b519062000c9c565b95019462000468565b87606488920362000a275760005b6009548110156200050957806000526008602052604060002060008155600181018054906000815581620004e6575b50509060006002600193015501620004a4565b6000526020600020908101905b81811015620004d35760008155600101620004f3565b508551869590936001600160401b0385116200029a576801000000000000000085116200029a57600a5485600a55808610620009de575b50602087019485600a600052602060002060005b838110620009c05750505050600060095580620007e3575b15620007d8579360ff60015b16926000945b87518610156200071c57600096875b845181101562000710576001600160a01b03620005ab898c62000c61565b51166001600160a01b03620005c1838862000c61565b511614620005d2576001016200058d565b509296509460015b15620005ee575b600101949591956200057e565b93604051620005fd8162000b73565b60018152602036818301376001600160a01b036200061c878b62000c61565b5116620006298262000c53565b5262000636828662000c61565b5160405190620006468262000b57565b815260208082019283526000604080840182905260095482526008909252208151815591518051906001600160401b0382116200029a576020906200068f836001870162000caa565b0160018401600052602060002060005b838110620006f2575050505091620006d3620006e992600260406001960151151591019060ff801983541691151516179055565b620006e060095462000c76565b60095562000c76565b949050620005e1565b82516001600160a01b0316818301556020909201916001016200069f565b509296959095620005da565b8792508693604051936040850190604086525180915260608501929060005b818110620007b85750505060209084830382860152519182815201919060005b818110620007a157857f8cf21a9a99c6e6e294434d3c1510565c9bff4dc3726dea94d4ffa88607e604cd86860387a142600b55600c55604051614025908162000d408239f35b82518452602093840193909201916001016200075b565b82516001600160a01b03168552602094850194909201916001016200073b565b9360ff600062000578565b620007f18195939562000bc8565b9262000801604051948562000b8f565b818452601f19620008128362000bc8565b013660208601376000946000965b8951881015620008c95760005b8951811015620008ba576001600160a01b036200084b8a8d62000c61565b51166001600160a01b0362000861838d62000c61565b51161462000872576001016200082d565b509296959193909291600190620008ac906001600160a01b03620008978a8e62000c61565b5116620008a5828a62000c61565b5262000c76565b965b01969290939162000820565b509193909296600190620008ae565b949196509450620008da8462000c53565b5160405190620008ea8262000b57565b8152602080820192835260016040830152600080526008905280517f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c790815591518051906001600160401b0382116200029a576020906200094f836001870162000caa565b0160018401600052602060002060005b838110620009a2575050505090600260406200098c930151151591019060ff801983541691151516179055565b6200099960095462000c76565b6009556200056c565b82516001600160a01b0316818301556020909201916001016200095f565b82516001600160a01b03168183015560209092019160010162000554565b600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89081019086015b81811062000a1a575062000540565b6000815560010162000a0b565b604051630767a3f160e31b8152600490fd5b60405162461bcd60e51b815260206004820152602760248201527f57726f6e672070657263656e7461676520636f756e7420666f722061737365746044820152662067726f75707360c81b6064820152608490fd5b60ff600062000454565b60405162461bcd60e51b8152602060048201526012602482015271139bc8185cdcd95d1cc81c1c9bdd9a59195960721b6044820152606490fd5b62461bcd60e51b8252602060c4820152601760e48201527f4e6f2070657263656e74616765732070726f766964656400000000000000000061010490910152606490fd5b60405163d93c066560e01b8152600490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b8151815260209182019101620000d1565b606081019081106001600160401b038211176200029a57604052565b604081019081106001600160401b038211176200029a57604052565b601f909101601f19168101906001600160401b038211908210176200029a57604052565b51906001600160a01b038216820362000b4157565b6001600160401b0381116200029a5760051b60200190565b9080601f8301121562000b415781519060209162000bfe8162000bc8565b9362000c0e604051958662000b8f565b81855260208086019260051b82010192831162000b4157602001905b82821062000c39575050505090565b83809162000c478462000bb3565b81520191019062000c2a565b805115620002845760200190565b8051821015620002845760209160051b010190565b600019811462000c865760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921162000c8657565b6801000000000000000082116200029a5780549180825582811062000cce57505050565b600091600052602060002092830192015b82811062000cec57505050565b81815560010162000cdf565b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c908163124528b81461228357816313e4ad5c1461220157816314bcec9f146121c45781631626ba7e146121075781631a650cc7146120a157816321371809146120345781633158174b14611fdd5781633f4ba83a14611f1e578163449e815d14611ed757816344caaba914611e875781634585e33b146119cc57816349689f581461197757816350371600146116125781635373433f1461153a5781635488a0b6146115005781635c975abb146114be5781636e04ff0d14611486578163715018a6146113ea5781637b1837de1461130a5781637f94dd33146112b75781638456cb591461122057816387685fb9146111605781638da5cb5b1461110f578163a6df16d7146110a2578163b0cc3d7614611067578163b4407fe114611012578163bdb3509114610fa6578163bf2e5de414610eec578163c45a015514610e96578163caa648b414610e54578163d9db093d14610dc0578163df4ac49d14610d83578163f2fde38b14610ca0578163f3fef3a314610b7f578163f4ea93d814610b45578163f4fdb8e31461024657508063f698da251461020a5763fb3f2b0003610011573461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090600c549051908152f35b5080fd5b503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610206576020906006549051908152f35b839150346102065760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065767ffffffffffffffff928135848111610b41576102989036908401612530565b91602492833590868211610b3d5736602383011215610b3d5781830135916102bf836124cd565b906102cc8651928361248c565b838252602093878584019160051b83010191368311610b395788869101915b838310610b295750505050604435888111610b255761030d9036908601612530565b926103166133e7565b815115610aca57825115610a6f57959496809891949895819582985b85518a10156103d557839a845b88518110156103c65773ffffffffffffffffffffffffffffffffffffffff806103688e8b612a96565b511690610375838c612a96565b5116146103845760010161033f565b50929990939a5061039a60019c92959c98612aaa565b975b156103b2575b600101989199929a93909a610332565b976103be600191612aaa565b9890506103a2565b50929990939a9b91949b61039c565b8785948c898f8d978b6103f88715159a8b600014610a675760ff60015b16612ad7565b8951036109e657859a869b5b8a518d101561042c5761042460019161041d8f8e612a96565b5190612ad7565b9c019b610404565b8b60648c92036109be57885b6009548110156104a057808a5260088c52898981208181558d6001908183019081549185815582610474575b5050505060020155600101610438565b85528420949392919085015b80861061049257508f82939495610464565b928555938401938d92610480565b5090888b989493928b85518581116109935768010000000000000000811161099357600a5481600a55808210610953575b508b8701600a85528c855b83811061090a57505050508183600955610731575b50156107295760ff60015b169881975b85518910156106f1578299835b81518110156106e75773ffffffffffffffffffffffffffffffffffffffff806105378d8b612a96565b5116906105448385612a96565b5116146105535760010161050e565b5099509760015b15610569575b60010197610501565b998651878101818110878211176106bc57906105ab91895260018082528436818401378d73ffffffffffffffffffffffffffffffffffffffff9384918b612a96565b51166105b683612a89565b526105c18488612a96565b51928a51936105cf85612454565b84528584019283528a84018781526009548852600887528b8820945185559251805191838601918b841161069057889061060985856127ee565b0191895287892090895b84811061067d575050505050509161066261067592600260019551151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b61066d600954612aaa565b600955612aaa565b9a9050610560565b8351821683820155928901928501610613565b8f8f8b6041837f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b898560418d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b509998909861055a565b827f8cf21a9a99c6e6e294434d3c1510565c9bff4dc3726dea94d4ffa88607e604cd85886107238b51928392836138d7565b0390a180f35b60ff816104fc565b610746909a949891939a999599979697613888565b95829783995b8b518b10156107f057845b88518110156107df578b8d61078273ffffffffffffffffffffffffffffffffffffffff928392612a96565b51168161078f848d612a96565b51161461079f5750600101610757565b6107cf91509a8c9b6001939597999f9496989d8f906107bd91612a96565b51166107c9828d612a96565b52612aaa565b995b01999492909b95939161074c565b509193959b909294996001906107d1565b959b949299509690975098949861080684612a89565b519087519161081483612454565b82528b8201908152600188830181815285805260088e528986209351845591518051918401908883116108df578e9061084d84846127ee565b019086528d8087209087905b8482106108b55750505050509060026108a19251151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b6108ac600954612aaa565b6009558a6104f1565b9060019173ffffffffffffffffffffffffffffffffffffffff85511694019381840155018f610859565b8b8760418f7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b825173ffffffffffffffffffffffffffffffffffffffff167fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a88201559101908d906001016104dc565b817fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a891820191015b81811061098857506104d1565b85815560010161097b565b888460418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8588517f3b3d1f88000000000000000000000000000000000000000000000000000000008152fd5b6084836027848b8951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f57726f6e672070657263656e7461676520636f756e7420666f7220617373657460448201527f2067726f757073000000000000000000000000000000000000000000000000006064820152fd5b60ff886103f2565b846012886064938951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4e6f206173736574732070726f766964656400000000000000000000000000006044820152fd5b846017886064938951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4e6f2070657263656e74616765732070726f76696465640000000000000000006044820152fd5b8780fd5b82358152918101918691016102eb565b8980fd5b8580fd5b8380fd5b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610206576020905160648152f35b905034610c9c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c57610bb76124e5565b60243591610bc36133e7565b600260015414610c7557507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59173ffffffffffffffffffffffffffffffffffffffff6020926002600155610c1e610c1982613c78565b612e1f565b1693610c6981517fa9059cbb000000000000000000000000000000000000000000000000000000008582015233602482015283604482015260448152610c6381612470565b86613df0565b51908152a26001805580f35b83517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c57610cd96124e5565b90610ce26133e7565b73ffffffffffffffffffffffffffffffffffffffff809216928315610d545750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610206576020906009549051908152f35b5050346102065760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065790610e5091610dfe6133e7565b805191806020840152818301527f1b00000000000000000000000000000000000000000000000000000000000000606083015260418252610e3e82612470565b51918291602083526020830190612704565b0390f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090610e8f61330c565b9051908152f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065760209073ffffffffffffffffffffffffffffffffffffffff60025460081c169051908152f35b828434610fa357602092837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065790829181838051610f2f81612454565b82815260608882015201523581526008845220610f96825192610f5184612454565b82548452606060ff6002610f6760018701612e84565b958888019687520154169382860194151585528251968796818852519087015251918501526080840190612762565b9051151560608301520390f35b80fd5b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c577f5a5fab736bb25f660ff902a421818c06b970866f4b164d46e8f04f6b838433f59160209135906110066133e7565b81600c5551908152a180f35b5050346102065760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090610e8f6110516124e5565b61105961250d565b906064359160443591613055565b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090610e8f612eed565b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c573591600a54831015610fa3575073ffffffffffffffffffffffffffffffffffffffff61110060209361264d565b92905490519260031b1c168152f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b828434610fa357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa3578151918291600a54808552602080950194600a83527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a892905b8282106111f357610e5086866111e1828b038361248c565b51918291602083526020830190612762565b835473ffffffffffffffffffffffffffffffffffffffff16875295860195600193840193909101906111c9565b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589161127c6133e7565b611284613852565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00600254161760025551338152a180f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065760209073ffffffffffffffffffffffffffffffffffffffff600554169051908152f35b50503461020657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610206577f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a52460206113656124e5565b73ffffffffffffffffffffffffffffffffffffffff602435916113866133e7565b611392610c1982613c78565b85517f23b872dd000000000000000000000000000000000000000000000000000000008582015233602482015230604482015260648082018590528152911694906113e290610c6360848261248c565b51908152a280f35b8334610fa357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa3576114216133e7565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b828434610fa357506114973661269c565b5050610e506114a4612afc565b839291925193849315158452806020850152830190612704565b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065760209060ff6002541690519015158152f35b8334610fa357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa357611537613924565b80f35b83833461020657602092837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c578373ffffffffffffffffffffffffffffffffffffffff61158b6124e5565b169160248451809481937f70a0823100000000000000000000000000000000000000000000000000000000835230908301525afa9283156116075780936115d5575b505051908152f35b909192508382813d8311611600575b6115ee818361248c565b81010312610fa35750519083806115cd565b503d6115e4565b8251903d90823e3d90fd5b8383346102065760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102065761164b6124e5565b9261165461250d565b9360443560643590608435926116686133e7565b855160a0810181811067ffffffffffffffff82111761194b57875273ffffffffffffffffffffffffffffffffffffffff8092169586825260209988848c8501921694858352818501878152606086019089825260808701928b845273__$054ffb9fa461ad576bb893157679246c53$__9581600754966116e788612aaa565b60075551997f30c10b20000000000000000000000000000000000000000000000000000000008b525116888a0152511660248801525160448701525160648601525160848501523060a485015260c484015261010092838160e481855af493841561194157908c9392918c9561189d575b505061180893600654928b51958694859384937ffcc4c5e50000000000000000000000000000000000000000000000000000000085528401610100909392919360e061012082019580518352602081015173ffffffffffffffffffffffffffffffffffffffff8091166020850152806040830151166040850152806060830151166060850152608082015116608084015260a081015160a084015260c081015160c0840152015160e08201520152565b03915af4978815611892578098611860575b50508551948552878501528484015260608301526080820152827f323c05cdeadfff71a7441e36a3a55c023180f013af664c0fc25687e2b5a2bf4560a03093a351908152f35b909197508882813d831161188b575b611879818361248c565b81010312610fa357505195888061181a565b503d61186f565b8751903d90823e3d90fd5b81939550809294503d831161193a575b6118b7818361248c565b81010312610b3957918a916118089360e08b51916118d483612408565b805183526118e38682016128b7565b868401526118f28d82016128b7565b8d840152611902606082016128b7565b6060840152611913608082016128b7565b608084015260a081015160a084015260c081015160c0840152015160e0820152938d611758565b503d6118ad565b8a513d8d823e3d90fd5b6024896041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c5791819235815260086020522060ff6002825492015416825191825215156020820152f35b838334610206576119dc3661269c565b50506119e6613852565b6119ee613471565b9273__$f94b0ca8a231630a19e0ad00a09b79d3a3$__938251907fdba0a0ed0000000000000000000000000000000000000000000000000000000082528282015260249060056024820152600f604482015260c081606481895af4908115611e7d578591611dcb575b508351927fc1be912e00000000000000000000000000000000000000000000000000000000845260e484019360e082820152600354809552610104810194600388527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90885b818110611d9f575050508251602482015286816020998a860151604483015288860151606483015281806060998a890151608483015260a0608099608081015160a4850152015160c483015203915af4938415611d95578794611c83575b505050835190868201908783528351809252858301918885019188905b8a838310611c3957505050505090807f392ba15c29c60d794434c0fb16db409c7ab1489f7cb2a99badebc06ad8488374920390a1835b8151811015611c355780611b8460019284612a96565b5173ffffffffffffffffffffffffffffffffffffffff907f7603cff60dc3d7d1025c12f1b8ade67aa4b048ccf2c115ac624b5cbfdfe9759482825116928a830193611c2c828651169280611be48d8801948d8651908a0197885192613055565b965116965116915192518b519384933098859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a301611b6e565b8480f35b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528282015116828801528a8101518b88015289015189870152948101949093019260019190910190611b38565b90919293503d8088843e611c97818461248c565b8201928883850312610b2557825167ffffffffffffffff93848211610b3957019284601f85011215611d9157835192611ccf846124cd565b95611cdc8a51978861248c565b8487528b8088019560071b87010195818711611d8d578c01945b868610611d0d575050505050505090868080611b1b565b8886830312611d8d578a5189810181811086821117611d62578c5289918e91611d35896128b7565b8152611d42838a016128b7565b838201528d808a0151908201528c8901518d820152815201950194611cf6565b848e6041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8b80fd5b8880fd5b86513d89823e3d90fd5b825473ffffffffffffffffffffffffffffffffffffffff16885260209097019660019283019201611abd565b905060c0813d60c011611e75575b81611de660c0938361248c565b81010312611e715783519060c0820182811067ffffffffffffffff821117611e45579060a0918652805183526020810151602084015285810151868401526060810151606084015260808101516080840152015160a082015286611a57565b6024876041877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b3d9150611dd9565b84513d87823e3d90fd5b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657606090611ec2612a51565b90839293519384526020840152151590820152f35b50503461020657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090610e8f611f156124e5565b60243590612911565b905034610c9c57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c57611f566133e7565b6002549060ff821615611fb657507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006020921660025551338152a180f35b82517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b828434610fa35760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa357506120176124e5565b50612026606435604435613445565b825191151582526020820152f35b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c573591600354831015610fa3575073ffffffffffffffffffffffffffffffffffffffff6120926020936125e7565b90549060031b1c169051908152f35b905034610c9c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c578160209360ff9273ffffffffffffffffffffffffffffffffffffffff6120f66124e5565b168252855220541690519015158152f35b905034610c9c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c9c576024359067ffffffffffffffff8211610b415736602383011215610b415781810135612162816125ad565b9261216f8551948561248c565b8184523660248383010111610b3d579160209586837fffffffff00000000000000000000000000000000000000000000000000000000969460246121bc9701838701378401015235612838565b915191168152f35b50503461020657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020657602090600b549051908152f35b8334610fa35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610fa35773ffffffffffffffffffffffffffffffffffffffff61224e6124e5565b6122566133e7565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600554161760055580f35b91905034610c9c576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b415767ffffffffffffffff908335828111610b3d576122d69036908601612530565b936122df6133e7565b84519283116123dc576801000000000000000083116123dc57506003548260035580831061239c575b50602084019060038652855b83811061235457867f05ceb613a91160c27bc798daf304568529eb02f563b31317bee548c8d2e3f7b2610723888851918291602083526020830190612762565b825173ffffffffffffffffffffffffffffffffffffffff167fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b82015591810191600101612314565b827fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91820191015b8181106123d15750612308565b8681556001016123c4565b8560416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b610100810190811067ffffffffffffffff82111761242557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761242557604052565b6080810190811067ffffffffffffffff82111761242557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761242557604052565b67ffffffffffffffff81116124255760051b60200190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361250857565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361250857565b9080601f8301121561250857602090823561254a816124cd565b93612558604051958661248c565b81855260208086019260051b82010192831161250857602001905b828210612581575050505090565b813573ffffffffffffffffffffffffffffffffffffffff81168103612508578152908301908301612573565b67ffffffffffffffff811161242557601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60035481101561261e5760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600a5481101561261e57600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80190600090565b805482101561261e5760005260206000200190600090565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126125085760043567ffffffffffffffff9283821161250857806023830112156125085781600401359384116125085760248483010111612508576024019190565b919082519283825260005b84811061274e5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b60208183018101518483018201520161270f565b90815180825260208080930193019160005b828110612782575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101612774565b818102929181159184041417156127bf57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6801000000000000000082116124255780549180825582811061281057505050565b600091600052602060002092830192015b82811061282d57505050565b818155600101612821565b61284e9161284591613ccd565b90929192613d09565b73ffffffffffffffffffffffffffffffffffffffff8060005416911614612893577fffffffff0000000000000000000000000000000000000000000000000000000090565b7f1626ba7e0000000000000000000000000000000000000000000000000000000090565b519073ffffffffffffffffffffffffffffffffffffffff8216820361250857565b81156128e2570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff908160025460081c166040519283917f741bef1a00000000000000000000000000000000000000000000000000000000835282600460209687935afa928315612a0b578492600094612a17575b506044908260405195869485937f7de4fd1000000000000000000000000000000000000000000000000000000000855216600484015260006024840152165afa918215612a0b576000926129db575b50506129d790670de0b6b3a7640000926127ac565b0490565b90809250813d8311612a04575b6129f2818361248c565b810103126125085751816129d76129c2565b503d6129e8565b6040513d6000823e3d90fd5b8381949295503d8311612a4a575b612a2f818361248c565b81010312612508576044612a4385936128b7565b9390612973565b503d612a25565b612a5961330c565b908115612a7e57612a71612a6b613471565b83613698565b90612a7b836136c2565b90565b600091508190600190565b80511561261e5760200190565b805182101561261e5760209160051b010190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146127bf5760010190565b919082018092116127bf57565b90816020910312612508575180151581036125085790565b73__$f94b0ca8a231630a19e0ad00a09b79d3a3$__60005b60038054821015612df457600190818301908184116127bf578291925b612b41575b505050600101612b14565b90938195929554861015612deb5773ffffffffffffffffffffffffffffffffffffffff8060025460081c1690604080518080947f741bef1a000000000000000000000000000000000000000000000000000000008252602095869160049485915afa908115612d535785859392898c8f94600093612d9b575b50612bd887606493612bcc82946125e7565b9054911b1c16956125e7565b9054908d1b1c1693875198899384927f802431fb000000000000000000000000000000000000000000000000000000008452888401526024968784015260006044840152165afa948515612d905790869291600096612d5e575b509085929185519384927faed39d4c00000000000000000000000000000000000000000000000000000000845283015281895af4908115612d5357600091612d26575b5015612c91575050505084809695949501929591909493612b31565b90919294612cf69450612cb982612cac612d22999b9a6125e7565b905490841b1c169a6125e7565b9054911b1c169051978894850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810185528461248c565b9190565b612d469150853d8711612d4c575b612d3e818361248c565b810190612ae4565b38612c75565b503d612d34565b83513d6000823e3d90fd5b9195909282813d8311612d89575b612d76818361248c565b81010312610fa357505193859138612c32565b503d612d6c565b84513d6000823e3d90fd5b9596505050915082813d8311612de4575b612db6818361248c565b81010312610fa35750908a858a606487612bd8818d612bcc612dd8839b6128b7565b96945050935050612bba565b503d612dac565b93829550612b36565b505050604051906020820182811067ffffffffffffffff821117612425576040526000825260009190565b15612e2657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4173736574206e6f7420666f756e6420696e20616e792067726f7570000000006044820152fd5b90604051918281549182825260209260208301916000526020600020936000905b828210612ebd57505050612ebb9250038361248c565b565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958895509381019390910190612ea5565b6000906009545b808310612f02575060009150565b8260005260089260209380855260409460ff600287600020015416612f2d5750506001019250612ef4565b925092600094855b83600052858552600180836000200180548910156130495790612f59898893612684565b909173ffffffffffffffffffffffffffffffffffffffff938493546024600394895197889384927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152881b1c165afa93841561303e57908a8a8a8e94600098613000575b50936001989693612ff29693612fe793612ff89a97600052528a60002001612684565b9054911b1c16612911565b90612ad7565b960195612f35565b9450509050828196929495963d8311613037575b61301e818361248c565b81010312610fa35750519291908a908a8a8a6001612fc4565b503d613014565b86513d6000823e3d90fd5b50509450509350505090565b919061305f6133e7565b670de0b6b3a76400008061307386856127ac565b04906007549561308287612aaa565b600755610e104201928342116127bf5760e0976040948551926130a484612408565b6000809b858280975260209d8e820152828a8201528260608201528260808201528260a08201528260c08201520152650100000000008210156132af57918a916131c894938851926130f584612408565b8352308484018190528984015273ffffffffffffffffffffffffffffffffffffffff8c8116606085019081528b82166080860190815260a086018e815260c0870194855260509590951b60e087019081526006548d517ffcc4c5e5000000000000000000000000000000000000000000000000000000008152885160048201526020890151861660248201526040909801518516604489015292518416606488015290519092166084860152925160a4850152905160c48401525160e48301526101048201529283908190610124820190565b038173__$054ffb9fa461ad576bb893157679246c53$__5af49889156132a357819961326a575b50505084927f7603cff60dc3d7d1025c12f1b8ade67aa4b048ccf2c115ac624b5cbfdfe975949492613225613264938a986127ac565b0490519384933098859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a390565b90918093979a9950813d831161329c575b613285818361248c565b81010312610fa357505195969382826132256131ef565b503d61327b565b508451903d90823e3d90fd5b60648b8851907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601060248201527f45787069727920746f6f206c61726765000000000000000000000000000000006044820152fd5b600080600a545b80821061331f57505090565b909173ffffffffffffffffffffffffffffffffffffffff61333f8461264d565b90549060031b1c1660409081517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208082602481865afa9384156133dd57506000936133a9575b505091612ff26133a192600194612911565b920190613313565b8181949293943d83116133d6575b6133c1818361248c565b81010312610fa357505190612ff2600161338f565b503d6133b7565b513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff60005416330361340857565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b919082039182116127bf57565b81811115613462579061345791613438565b905b60058211159190565b61346b91613438565b90613459565b60008060038054915b8281106134875750505090565b613490816125e7565b9073ffffffffffffffffffffffffffffffffffffffff9182915490851b1c166040918251917f70a08231000000000000000000000000000000000000000000000000000000008352600490308285015260209160249383868681865afa95861561368d5760009661365e575b5085613512575b5050505050505060010161347a565b81848260029d9a9d5460081c168951928380927f741bef1a0000000000000000000000000000000000000000000000000000000082525afa90811561365357908594939291600091613614575b50906044929160008a5198899687957f7de4fd10000000000000000000000000000000000000000000000000000000008752860152840152165afa9384156133dd57506000936135d9575b505091670de0b6b3a76400006135c56135cc936001956127ac565b0490612ad7565b9390388080808080613503565b8181949293943d831161360d575b6135f1818361248c565b81010312610fa357505190670de0b6b3a76400006135c56135aa565b503d6135e7565b9192939482813d831161364c575b61362c818361248c565b81010312610fa35750916044916136448695946128b7565b90919261355f565b503d613622565b88513d6000823e3d90fd5b90958482813d8311613686575b613675818361248c565b81010312610fa357505194386134fc565b503d61366b565b87513d6000823e3d90fd5b80156136bb57612710918281029281840414901517156127bf57612a7b916128d8565b5050600090565b6009549060005b8281106136d857505050600190565b80600052602060088152604080600020908051916136f583612454565b805483526001918160ff600261370d86809601612e84565b9288880193845201541615158286015260009586945b61376b575b50505050506064918281029281840414901517156127bf5761374d84613755936128d8565b905190613445565b5015613763576001016136c9565b505050600090565b90919293958251805188101561384b5787836024926137a073ffffffffffffffffffffffffffffffffffffffff938492612a96565b51168751938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa91821561303e57908796959493929160009261380f575b5091612ff26138079288946138008d8951612a96565b5116612911565b970194613723565b91909293809596975082813d8311613844575b61382c818361248c565b81010312610fa3575051869594939291612ff26137ea565b503d613822565b5095613728565b60ff6002541661385e57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b90613892826124cd565b61389f604051918261248c565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06138cd82946124cd565b0190602036910137565b906138ea90604083526040830190612762565b81810360209283015282518082529082019282019160005b828110613910575050505090565b835185529381019392810192600101613902565b61392c61330c565b908115613c745760095461393f81613888565b90613949816124cd565b906040946139598651938461248c565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0613986836124cd565b0160005b818110613c635750506000906000600c54905b848110613aac575050506139b3575b5050509050565b91600a94919454946139cd6139c787613888565b96613888565b93600092835b828510613a1c57505050505092613a107f49eb56415ad74aa1cb4921343ded5a68ae5f5d7455e12bb65975bbcf857e1413939451928392836138d7565b0390a1803880806139ac565b919490929593966000925b613a318989612a96565b5151841015613a9657613a8e818b613a7860019473ffffffffffffffffffffffffffffffffffffffff613a708f8f8c91613a6a91612a96565b51612a96565b511692612a96565b52613a838b88612a96565b516107c9828a612a96565b930192613a27565b90979496919560019095019491939192506139d3565b8060005260206008815289806000208151613ac681612454565b815481526001809460ff6002613add848701612e84565b9583860196875201541615158584015260009485925b613b7a575b5050506064928381029381850414901517156127bf57613b198787946128d8565b90519081811115613b6b5790613b2e91613438565b905b81613b3b868d612a96565b5251613b47858b612a96565b52613b52848a612a96565b5011613b62575b5060010161399d565b93506001613b59565b613b7491613438565b90613b30565b8495919295518051871015613c5a578360249493928892613bb173ffffffffffffffffffffffffffffffffffffffff948592612a96565b51169051958680927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa908115613c4d578894600092613c15575b5091612ff2613c0b9286946138008b8b51612a96565b9501918f90613af3565b9190929380955082813d8311613c46575b613c30818361248c565b81010312610fa357505187939291612ff2613bf5565b503d613c26565b50508f513d6000823e3d90fd5b50819550613af8565b80606060208093880101520161398a565b9050565b600a549060005b828110613c8e57505050600090565b613c978161264d565b9073ffffffffffffffffffffffffffffffffffffffff90548185169260031b1c1614613cc557600101613c7f565b505050600190565b8151919060418303613cfe57613cf792506020820151906060604084015193015160001a90613eb2565b9192909190565b505060009160029190565b6004811015613dc15780613d1b575050565b60018103613d4d5760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b60028103613d8657602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b600314613d905750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008073ffffffffffffffffffffffffffffffffffffffff613e4893169360208151910182865af13d15613eaa573d90613e29826125ad565b91613e37604051938461248c565b82523d6000602084013e5b83613f4f565b8051908115159182613e8f575b5050613e5e5750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b613ea29250602080918301019101612ae4565b153880613e55565b606090613e42565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613f4357926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15613f3757805173ffffffffffffffffffffffffffffffffffffffff811615613f2e57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b90613f8e5750805115613f6457805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580613fe6575b613f9f575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15613f9756fea2646970667358221220fa7dad25ca86c38ece62e3ae233f56d7b07e0559b6513931cf1ef70be71cf39b64736f6c634300081700336080806040523462000b455762004be6803803809162000020828562000b93565b8339810160e08282031262000b45576200003a8262000bb7565b90620000496020840162000bb7565b60408401519091906001600160401b03811162000b4557816200006e91860162000be4565b60608501519091906001600160401b03811162000b455785019281601f8501121562000b4557835190620000a28262000bcc565b94620000b2604051968762000b93565b828652602086016020819460051b8301019185831162000b4557602001905b82821062000b4a57505050608087015160a088015190936001600160401b03821162000b45576200010b60c09162000113938b0162000be4565b980162000bb7565b956001600160a01b0381161562000b2c578062000134620001489262000cfc565b6001805560ff196002541660025562000cfc565b6002549060ff821662000b1a577f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a17f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a16001600160a81b031990911660089190911b610100600160a81b031617600255600580546001600160a01b0319166001600160a01b03871617905560005b8651811015620002b0576001600160a01b0362000205828962000c65565b5116906003918254680100000000000000008110156200029a576001810180855581101562000284576000938452602090932090920180546001600160a01b0319169092179091556001906001600160a01b0362000264828a62000c65565b5116600052600460205260406000208260ff1982541617905501620001e7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b50859085601a6020604051620002c68162000b77565b828152017f31696e6368204c696d6974204f726465722050726f746f636f6c0000000000008152209060016020604051620003018162000b77565b82815201600d60fa1b815220906040519160208301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f85526040840152606083015246608083015260018060a01b031660a082015260a0815260c081019181831060018060401b038411176200029a57826040528151902060065586511562000ad657505083511562000a9c579391926000916000916000945b81518610156200043d57600096875b845181101562000431576001600160a01b03620003c9898662000c65565b51166001600160a01b03620003df838862000c65565b511614620003f057600101620003ab565b509590979196506200040460019462000c7a565b935b156200041a575b600101949590966200039c565b936200042860019162000c7a565b9490506200040d565b50959097919662000406565b9387939287916200045b90851562000a925760ff60015b1662000ca0565b86510362000a3d57600093845b875186101562000496576200048d60019162000485888b62000c65565b519062000ca0565b95019462000468565b87606488920362000a2b5760005b6009548110156200050957806000526008602052604060002060008155600181018054906000815581620004e6575b50509060006002600193015501620004a4565b6000526020600020908101905b81811015620004d35760008155600101620004f3565b508551869590936001600160401b0385116200029a576801000000000000000085116200029a57600a5485600a55808610620009e2575b50602087019485600a600052602060002060005b838110620009c45750505050600060095580620007e7575b15620007dc579360ff60015b16926000945b87518610156200071c57600096875b845181101562000710576001600160a01b03620005ab898c62000c65565b51166001600160a01b03620005c1838862000c65565b511614620005d2576001016200058d565b509296509460015b15620005ee575b600101949591956200057e565b93604051620005fd8162000b77565b60018152602036818301376001600160a01b036200061c878b62000c65565b5116620006298262000c57565b5262000636828662000c65565b5160405190620006468262000b5b565b815260208082019283526000604080840182905260095482526008909252208151815591518051906001600160401b0382116200029a576020906200068f836001870162000cae565b0160018401600052602060002060005b838110620006f2575050505091620006d3620006e992600260406001960151151591019060ff801983541691151516179055565b620006e060095462000c7a565b60095562000c7a565b949050620005e1565b82516001600160a01b0316818301556020909201916001016200069f565b509296959095620005da565b8792508693604051936040850190604086525180915260608501929060005b818110620007bc5750505060209084830382860152519182815201919060005b818110620007a557857f8cf21a9a99c6e6e294434d3c1510565c9bff4dc3726dea94d4ffa88607e604cd86860387a142600b55600c5542600d55604051613ea2908162000d448239f35b82518452602093840193909201916001016200075b565b82516001600160a01b03168552602094850194909201916001016200073b565b9360ff600062000578565b620007f58195939562000bcc565b9262000805604051948562000b93565b818452601f19620008168362000bcc565b013660208601376000946000965b8951881015620008cd5760005b8951811015620008be576001600160a01b036200084f8a8d62000c65565b51166001600160a01b0362000865838d62000c65565b511614620008765760010162000831565b509296959193909291600190620008b0906001600160a01b036200089b8a8e62000c65565b5116620008a9828a62000c65565b5262000c7a565b965b01969290939162000824565b509193909296600190620008b2565b949196509450620008de8462000c57565b5160405190620008ee8262000b5b565b8152602080820192835260016040830152600080526008905280517f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c790815591518051906001600160401b0382116200029a5760209062000953836001870162000cae565b0160018401600052602060002060005b838110620009a65750505050906002604062000990930151151591019060ff801983541691151516179055565b6200099d60095462000c7a565b6009556200056c565b82516001600160a01b03168183015560209092019160010162000963565b82516001600160a01b03168183015560209092019160010162000554565b600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89081019086015b81811062000a1e575062000540565b6000815560010162000a0f565b604051630767a3f160e31b8152600490fd5b60405162461bcd60e51b815260206004820152602760248201527f57726f6e672070657263656e7461676520636f756e7420666f722061737365746044820152662067726f75707360c81b6064820152608490fd5b60ff600062000454565b60405162461bcd60e51b8152602060048201526012602482015271139bc8185cdcd95d1cc81c1c9bdd9a59195960721b6044820152606490fd5b62461bcd60e51b8252602060c4820152601760e48201527f4e6f2070657263656e74616765732070726f766964656400000000000000000061010490910152606490fd5b60405163d93c066560e01b8152600490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b8151815260209182019101620000d1565b606081019081106001600160401b038211176200029a57604052565b604081019081106001600160401b038211176200029a57604052565b601f909101601f19168101906001600160401b038211908210176200029a57604052565b51906001600160a01b038216820362000b4557565b6001600160401b0381116200029a5760051b60200190565b9080601f8301121562000b455781519060209162000c028162000bcc565b9362000c12604051958662000b93565b81855260208086019260051b82010192831162000b4557602001905b82821062000c3d575050505090565b83809162000c4b8462000bb7565b81520191019062000c2e565b805115620002845760200190565b8051821015620002845760209160051b010190565b600019811462000c8a5760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921162000c8a57565b6801000000000000000082116200029a5780549180825582811062000cd257505050565b600091600052602060002092830192015b82811062000cf057505050565b81815560010162000ce3565b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c918263106b9ca11461258057508163124528b8146123fb57816313e4ad5c1461237957816314bcec9f1461233c5781631626ba7e1461227f5781631a650cc71461221957816321371809146121ac5781633158174b146121555781633f4ba83a14612096578163449e815d1461204f57816344caaba914611fff5781634585e33b14611b4457816349689f5814611aef578163503716001461178a5781635373433f146116b25781635b7dcaed146116465781635c975abb146116045781636e04ff0d146115cc578163715018a6146115305781637b1837de146114505781637f94dd33146113fd5781638456cb591461136657816387685fb9146112a65781638da5cb5b14611255578163947a36fb14611218578163997be569146111c9578163a6df16d71461115c578163b0cc3d7614611121578163b4407fe1146110cc578163bf2e5de414611012578163c45a015514610fbc578163c6bb232014610ecc578163caa648b414610e8a578163d9db093d14610df6578163df4ac49d14610db9578163f2fde38b14610cd6578163f3fef3a314610bb5578163f4ea93d814610b7b578163f4fdb8e314610229575063f698da25146101ea5780610012565b3461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225576020906006549051908152f35b5080fd5b839150346102255760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255767ffffffffffffffff928135848111610b775761027b90369084016126e2565b91602492833590868211610b735736602383011215610b735781830135916102a28361267f565b906102af8651928361263e565b838252602093878584019160051b83010191368311610b6f5788869101915b838310610b5f5750505050604435888111610b5b576102f090369086016126e2565b926102f9613654565b815115610b0057825115610aa557959496809891949895819582985b85518a10156103b857839a845b88518110156103a95773ffffffffffffffffffffffffffffffffffffffff8061034b8e8b612c7c565b511690610358838c612c7c565b51161461036757600101610322565b50929990939a5061037d60019c92959c98612c90565b975b15610395575b600101989199929a93909a610315565b976103a1600191612c90565b989050610385565b50929990939a9b91949b61037f565b8785948c898f8d978b6103db8715159a8b600014610a9d5760ff60015b16612cbd565b895103610a1c57859a869b5b8a518d101561040f576104076001916104008f8e612c7c565b5190612cbd565b9c019b6103e7565b8b60648c92036109f457885b60095481101561048357808a5260088c52898981208181558d6001908183019081549185815582610457575b505050506002015560010161041b565b85528420949392919085015b80861061047557508f82939495610447565b928555938401938d92610463565b5090888b989493928b85518581116109c9576801000000000000000081116109c957600a5481600a55808210610989575b508b8701600a85528c855b8381106109405750505050818360095561072a575b50156107225760ff60015b169881975b85518910156106d4578299835b81518110156106ca5773ffffffffffffffffffffffffffffffffffffffff8061051a8d8b612c7c565b5116906105278385612c7c565b511614610536576001016104f1565b5099509760015b1561054c575b600101976104e4565b9986518781018181108782111761069f579061058e91895260018082528436818401378d73ffffffffffffffffffffffffffffffffffffffff9384918b612c7c565b511661059983612c6f565b526105a48488612c7c565b51928a51936105b285612606565b84528584019283528a84018781526009548852600887528b8820945185559251805191838601918b84116106735788906105ec85856129d4565b0191895287892090895b848110610660575050505050509161064561065892600260019551151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b610650600954612c90565b600955612c90565b9a9050610543565b83518216838201559289019285016105f6565b8f8f8b6041837f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b898560418d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b509998909861053d565b5085518681527f8cf21a9a99c6e6e294434d3c1510565c9bff4dc3726dea94d4ffa88607e604cd91819061071c908661070f848c018b612914565b918483039085015261295e565b0390a180f35b60ff816104df565b95967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610777610762899d979b94969d9c989c61267f565b9861076f8b519a8b61263e565b808a5261267f565b013686890137829783995b8b518b101561082657845b8851811015610815578b8d6107b873ffffffffffffffffffffffffffffffffffffffff928392612c7c565b5116816107c5848d612c7c565b5116146107d5575060010161078d565b61080591509a8c9b6001939597999f9496989d8f906107f391612c7c565b51166107ff828d612c7c565b52612c90565b995b01999492909b959391610782565b509193959b90929499600190610807565b959b949299509690975098949861083c84612c6f565b519087519161084a83612606565b82528b8201908152600188830181815285805260088e52898620935184559151805191840190888311610915578e9061088384846129d4565b019086528d8087209087905b8482106108eb5750505050509060026108d79251151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b6108e2600954612c90565b6009558a6104d4565b9060019173ffffffffffffffffffffffffffffffffffffffff85511694019381840155018f61088f565b8b8760418f7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b825173ffffffffffffffffffffffffffffffffffffffff167fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a88201559101908d906001016104bf565b817fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a891820191015b8181106109be57506104b4565b8581556001016109b1565b888460418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8588517f3b3d1f88000000000000000000000000000000000000000000000000000000008152fd5b6084836027848b8951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f57726f6e672070657263656e7461676520636f756e7420666f7220617373657460448201527f2067726f757073000000000000000000000000000000000000000000000000006064820152fd5b60ff886103d5565b846012886064938951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4e6f206173736574732070726f766964656400000000000000000000000000006044820152fd5b846017886064938951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4e6f2070657263656e74616765732070726f76696465640000000000000000006044820152fd5b8780fd5b82358152918101918691016102ce565b8980fd5b8580fd5b8380fd5b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225576020905160648152f35b905034610cd257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd257610bed612697565b60243591610bf9613654565b600260015414610cab57507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59173ffffffffffffffffffffffffffffffffffffffff6020926002600155610c54610c4f82613af5565b613005565b1693610c9f81517fa9059cbb000000000000000000000000000000000000000000000000000000008582015233602482015283604482015260448152610c9981612622565b86613c6d565b51908152a26001805580f35b83517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd257610d0f612697565b90610d18613654565b73ffffffffffffffffffffffffffffffffffffffff809216928315610d8a5750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225576020906009549051908152f35b5050346102255760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255790610e8691610e34613654565b805191806020840152818301527f1b00000000000000000000000000000000000000000000000000000000000000606083015260418252610e7482612622565b519182916020835260208301906128b6565b0390f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090610ec5613579565b9051908152f35b905034610cd257827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd257610f0b600d54600c5490612cbd565b4210610f6057507fd0489b16e641d6e7209575900e1253909da7c587d3949634e24e5f8f11d00c0f9042600d55610f406130d3565b90610f54815192828493845283019061295e565b4260208301520390a180f35b602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600960248201527f546f6f206561726c7900000000000000000000000000000000000000000000006044820152fd5b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760209073ffffffffffffffffffffffffffffffffffffffff60025460081c169051908152f35b8284346110c957602092837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225579082918183805161105581612606565b828152606088820152015235815260088452206110bc82519261107784612606565b82548452606060ff600261108d6001870161306a565b958888019687520154169382860194151585528251968796818852519087015251918501526080840190612914565b9051151560608301520390f35b80fd5b5050346102255760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090610ec561110b612697565b6111136126bf565b9060643591604435916132c2565b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090610ec561315a565b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2573591600a548310156110c9575073ffffffffffffffffffffffffffffffffffffffff6111ba6020936127ff565b92905490519260031b1c168152f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557610e86906112056130d3565b905191829160208352602083019061295e565b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090600c549051908152f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b8284346110c957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110c9578151918291600a54808552602080950194600a83527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a892905b82821061133957610e868686611327828b038361263e565b51918291602083526020830190612914565b835473ffffffffffffffffffffffffffffffffffffffff168752958601956001938401939091019061130f565b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916113c2613654565b6113ca613abf565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00600254161760025551338152a180f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760209073ffffffffffffffffffffffffffffffffffffffff600554169051908152f35b50503461022557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225577f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a52460206114ab612697565b73ffffffffffffffffffffffffffffffffffffffff602435916114cc613654565b6114d8610c4f82613af5565b85517f23b872dd0000000000000000000000000000000000000000000000000000000085820152336024820152306044820152606480820185905281529116949061152890610c9960848261263e565b51908152a280f35b83346110c957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110c957611567613654565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8284346110c957506115dd3661284e565b5050610e866115ea612ce2565b8392919251938493151584528060208501528301906128b6565b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760209060ff6002541690519015158152f35b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2577fc6f44473d25b86976ee7357c1339328224e349abc5486edc3007ef658a57608a9160209135906116a6613654565b81600c5551908152a180f35b83833461022557602092837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2578373ffffffffffffffffffffffffffffffffffffffff611703612697565b169160248451809481937f70a0823100000000000000000000000000000000000000000000000000000000835230908301525afa92831561177f57809361174d575b505051908152f35b909192508382813d8311611778575b611766818361263e565b810103126110c9575051908380611745565b503d61175c565b8251903d90823e3d90fd5b8383346102255760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610225576117c3612697565b926117cc6126bf565b9360443560643590608435926117e0613654565b855160a0810181811067ffffffffffffffff821117611ac357875273ffffffffffffffffffffffffffffffffffffffff8092169586825260209988848c8501921694858352818501878152606086019089825260808701928b845273__$054ffb9fa461ad576bb893157679246c53$__95816007549661185f88612c90565b60075551997f30c10b20000000000000000000000000000000000000000000000000000000008b525116888a0152511660248801525160448701525160648601525160848501523060a485015260c484015261010092838160e481855af4938415611ab957908c9392918c95611a15575b505061198093600654928b51958694859384937ffcc4c5e50000000000000000000000000000000000000000000000000000000085528401610100909392919360e061012082019580518352602081015173ffffffffffffffffffffffffffffffffffffffff8091166020850152806040830151166040850152806060830151166060850152608082015116608084015260a081015160a084015260c081015160c0840152015160e08201520152565b03915af4978815611a0a5780986119d8575b50508551948552878501528484015260608301526080820152827f323c05cdeadfff71a7441e36a3a55c023180f013af664c0fc25687e2b5a2bf4560a03093a351908152f35b909197508882813d8311611a03575b6119f1818361263e565b810103126110c9575051958880611992565b503d6119e7565b8751903d90823e3d90fd5b81939550809294503d8311611ab2575b611a2f818361263e565b81010312610b6f57918a916119809360e08b5191611a4c836125ba565b80518352611a5b868201612a9d565b86840152611a6a8d8201612a9d565b8d840152611a7a60608201612a9d565b6060840152611a8b60808201612a9d565b608084015260a081015160a084015260c081015160c0840152015160e0820152938d6118d0565b503d611a25565b8a513d8d823e3d90fd5b6024896041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd25791819235815260086020522060ff6002825492015416825191825215156020820152f35b83833461022557611b543661284e565b5050611b5e613abf565b611b666136de565b9273__$f94b0ca8a231630a19e0ad00a09b79d3a3$__938251907fdba0a0ed0000000000000000000000000000000000000000000000000000000082528282015260249060056024820152600f604482015260c081606481895af4908115611ff5578591611f43575b508351927fc1be912e00000000000000000000000000000000000000000000000000000000845260e484019360e082820152600354809552610104810194600388527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90885b818110611f17575050508251602482015286816020998a860151604483015288860151606483015281806060998a890151608483015260a0608099608081015160a4850152015160c483015203915af4938415611f0d578794611dfb575b505050835190868201908783528351809252858301918885019188905b8a838310611db157505050505090807f392ba15c29c60d794434c0fb16db409c7ab1489f7cb2a99badebc06ad8488374920390a1835b8151811015611dad5780611cfc60019284612c7c565b5173ffffffffffffffffffffffffffffffffffffffff907f7603cff60dc3d7d1025c12f1b8ade67aa4b048ccf2c115ac624b5cbfdfe9759482825116928a830193611da4828651169280611d5c8d8801948d8651908a01978851926132c2565b965116965116915192518b519384933098859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a301611ce6565b8480f35b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528282015116828801528a8101518b88015289015189870152948101949093019260019190910190611cb0565b90919293503d8088843e611e0f818461263e565b8201928883850312610b5b57825167ffffffffffffffff93848211610b6f57019284601f85011215611f0957835192611e478461267f565b95611e548a51978861263e565b8487528b8088019560071b87010195818711611f05578c01945b868610611e85575050505050505090868080611c93565b8886830312611f05578a5189810181811086821117611eda578c5289918e91611ead89612a9d565b8152611eba838a01612a9d565b838201528d808a0151908201528c8901518d820152815201950194611e6e565b848e6041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8b80fd5b8880fd5b86513d89823e3d90fd5b825473ffffffffffffffffffffffffffffffffffffffff16885260209097019660019283019201611c35565b905060c0813d60c011611fed575b81611f5e60c0938361263e565b81010312611fe95783519060c0820182811067ffffffffffffffff821117611fbd579060a0918652805183526020810151602084015285810151868401526060810151606084015260808101516080840152015160a082015286611bcf565b6024876041877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b3d9150611f51565b84513d87823e3d90fd5b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102255760609061203a612c37565b90839293519384526020840152151590820152f35b50503461022557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090610ec561208d612697565b60243590612af7565b905034610cd257827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2576120ce613654565b6002549060ff82161561212e57507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006020921660025551338152a180f35b82517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b8284346110c95760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110c9575061218f612697565b5061219e6064356044356136b2565b825191151582526020820152f35b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd25735916003548310156110c9575073ffffffffffffffffffffffffffffffffffffffff61220a602093612799565b90549060031b1c169051908152f35b905034610cd25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2578160209360ff9273ffffffffffffffffffffffffffffffffffffffff61226e612697565b168252855220541690519015158152f35b905034610cd257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cd2576024359067ffffffffffffffff8211610b775736602383011215610b7757818101356122da8161275f565b926122e78551948561263e565b8184523660248383010111610b73579160209586837fffffffff00000000000000000000000000000000000000000000000000000000969460246123349701838701378401015235612a1e565b915191168152f35b50503461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090600b549051908152f35b83346110c95760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110c95773ffffffffffffffffffffffffffffffffffffffff6123c6612697565b6123ce613654565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600554161760055580f35b91905034610cd2576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b775767ffffffffffffffff908335828111610b735761244e90369086016126e2565b93612457613654565b845192831161255457680100000000000000008311612554575060035482600355808310612514575b50602084019060038652855b8381106124cc57867f05ceb613a91160c27bc798daf304568529eb02f563b31317bee548c8d2e3f7b261071c888851918291602083526020830190612914565b825173ffffffffffffffffffffffffffffffffffffffff167fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b8201559181019160010161248c565b827fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91820191015b8181106125495750612480565b86815560010161253c565b8560416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b84903461022557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022557602090600d548152f35b610100810190811067ffffffffffffffff8211176125d757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176125d757604052565b6080810190811067ffffffffffffffff8211176125d757604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176125d757604052565b67ffffffffffffffff81116125d75760051b60200190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036126ba57565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff821682036126ba57565b9080601f830112156126ba5760209082356126fc8161267f565b9361270a604051958661263e565b81855260208086019260051b8201019283116126ba57602001905b828210612733575050505090565b813573ffffffffffffffffffffffffffffffffffffffff811681036126ba578152908301908301612725565b67ffffffffffffffff81116125d757601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6003548110156127d05760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600a548110156127d057600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80190600090565b80548210156127d05760005260206000200190600090565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126126ba5760043567ffffffffffffffff928382116126ba57806023830112156126ba5781600401359384116126ba57602484830101116126ba576024019190565b919082519283825260005b8481106129005750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016128c1565b90815180825260208080930193019160005b828110612934575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101612926565b90815180825260208080930193019160005b82811061297e575050505090565b835185529381019392810192600101612970565b818102929181159184041417156129a557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6801000000000000000082116125d7578054918082558281106129f657505050565b600091600052602060002092830192015b828110612a1357505050565b818155600101612a07565b612a3491612a2b91613b4a565b90929192613b86565b73ffffffffffffffffffffffffffffffffffffffff8060005416911614612a79577fffffffff0000000000000000000000000000000000000000000000000000000090565b7f1626ba7e0000000000000000000000000000000000000000000000000000000090565b519073ffffffffffffffffffffffffffffffffffffffff821682036126ba57565b8115612ac8570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff908160025460081c166040519283917f741bef1a00000000000000000000000000000000000000000000000000000000835282600460209687935afa928315612bf1578492600094612bfd575b506044908260405195869485937f7de4fd1000000000000000000000000000000000000000000000000000000000855216600484015260006024840152165afa918215612bf157600092612bc1575b5050612bbd90670de0b6b3a764000092612992565b0490565b90809250813d8311612bea575b612bd8818361263e565b810103126126ba575181612bbd612ba8565b503d612bce565b6040513d6000823e3d90fd5b8381949295503d8311612c30575b612c15818361263e565b810103126126ba576044612c298593612a9d565b9390612b59565b503d612c0b565b612c3f613579565b908115612c6457612c57612c516136de565b83613905565b90612c618361392f565b90565b600091508190600190565b8051156127d05760200190565b80518210156127d05760209160051b010190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146129a55760010190565b919082018092116129a557565b908160209103126126ba575180151581036126ba5790565b73__$f94b0ca8a231630a19e0ad00a09b79d3a3$__60005b60038054821015612fda57600190818301908184116129a5578291925b612d27575b505050600101612cfa565b90938195929554861015612fd15773ffffffffffffffffffffffffffffffffffffffff8060025460081c1690604080518080947f741bef1a000000000000000000000000000000000000000000000000000000008252602095869160049485915afa908115612f395785859392898c8f94600093612f81575b50612dbe87606493612db28294612799565b9054911b1c1695612799565b9054908d1b1c1693875198899384927f802431fb000000000000000000000000000000000000000000000000000000008452888401526024968784015260006044840152165afa948515612f765790869291600096612f44575b509085929185519384927faed39d4c00000000000000000000000000000000000000000000000000000000845283015281895af4908115612f3957600091612f0c575b5015612e77575050505084809695949501929591909493612d17565b90919294612edc9450612e9f82612e92612f08999b9a612799565b905490841b1c169a612799565b9054911b1c169051978894850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810185528461263e565b9190565b612f2c9150853d8711612f32575b612f24818361263e565b810190612cca565b38612e5b565b503d612f1a565b83513d6000823e3d90fd5b9195909282813d8311612f6f575b612f5c818361263e565b810103126110c957505193859138612e18565b503d612f52565b84513d6000823e3d90fd5b9596505050915082813d8311612fca575b612f9c818361263e565b810103126110c95750908a858a606487612dbe818d612db2612fbe839b612a9d565b96945050935050612da0565b503d612f92565b93829550612d1c565b505050604051906020820182811067ffffffffffffffff8211176125d7576040526000825260009190565b1561300c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4173736574206e6f7420666f756e6420696e20616e792067726f7570000000006044820152fd5b90604051918281549182825260209260208301916000526020600020936000905b8282106130a3575050506130a19250038361263e565b565b855473ffffffffffffffffffffffffffffffffffffffff168452600195860195889550938101939091019061308b565b6009546130df8161267f565b9060406130ef604051938461263e565b8183526130fb8261267f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06020910136602086013760009060005b84811061313b57505050505090565b80600191845260088352848420546131538289612c7c565b520161312c565b6000906009545b80831061316f575060009150565b8260005260089260209380855260409460ff60028760002001541661319a5750506001019250613161565b925092600094855b83600052858552600180836000200180548910156132b657906131c6898893612836565b909173ffffffffffffffffffffffffffffffffffffffff938493546024600394895197889384927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152881b1c165afa9384156132ab57908a8a8a8e9460009861326d575b5093600198969361325f9693613254936132659a97600052528a60002001612836565b9054911b1c16612af7565b90612cbd565b9601956131a2565b9450509050828196929495963d83116132a4575b61328b818361263e565b810103126110c95750519291908a908a8a8a6001613231565b503d613281565b86513d6000823e3d90fd5b50509450509350505090565b91906132cc613654565b670de0b6b3a7640000806132e08685612992565b0490600754956132ef87612c90565b600755610e104201928342116129a55760e097604094855192613311846125ba565b6000809b858280975260209d8e820152828a8201528260608201528260808201528260a08201528260c082015201526501000000000082101561351c57918a916134359493885192613362846125ba565b8352308484018190528984015273ffffffffffffffffffffffffffffffffffffffff8c8116606085019081528b82166080860190815260a086018e815260c0870194855260509590951b60e087019081526006548d517ffcc4c5e5000000000000000000000000000000000000000000000000000000008152885160048201526020890151861660248201526040909801518516604489015292518416606488015290519092166084860152925160a4850152905160c48401525160e48301526101048201529283908190610124820190565b038173__$054ffb9fa461ad576bb893157679246c53$__5af49889156135105781996134d7575b50505084927f7603cff60dc3d7d1025c12f1b8ade67aa4b048ccf2c115ac624b5cbfdfe9759494926134926134d1938a98612992565b0490519384933098859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a390565b90918093979a9950813d8311613509575b6134f2818361263e565b810103126110c9575051959693828261349261345c565b503d6134e8565b508451903d90823e3d90fd5b60648b8851907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601060248201527f45787069727920746f6f206c61726765000000000000000000000000000000006044820152fd5b600080600a545b80821061358c57505090565b909173ffffffffffffffffffffffffffffffffffffffff6135ac846127ff565b90549060031b1c1660409081517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208082602481865afa93841561364a5750600093613616575b50509161325f61360e92600194612af7565b920190613580565b8181949293943d8311613643575b61362e818361263e565b810103126110c95750519061325f60016135fc565b503d613624565b513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff60005416330361367557565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b919082039182116129a557565b818111156136cf57906136c4916136a5565b905b60058211159190565b6136d8916136a5565b906136c6565b60008060038054915b8281106136f45750505090565b6136fd81612799565b9073ffffffffffffffffffffffffffffffffffffffff9182915490851b1c166040918251917f70a08231000000000000000000000000000000000000000000000000000000008352600490308285015260209160249383868681865afa9586156138fa576000966138cb575b508561377f575b505050505050506001016136e7565b81848260029d9a9d5460081c168951928380927f741bef1a0000000000000000000000000000000000000000000000000000000082525afa9081156138c057908594939291600091613881575b50906044929160008a5198899687957f7de4fd10000000000000000000000000000000000000000000000000000000008752860152840152165afa93841561364a5750600093613846575b505091670de0b6b3a764000061383261383993600195612992565b0490612cbd565b9390388080808080613770565b8181949293943d831161387a575b61385e818361263e565b810103126110c957505190670de0b6b3a7640000613832613817565b503d613854565b9192939482813d83116138b9575b613899818361263e565b810103126110c95750916044916138b1869594612a9d565b9091926137cc565b503d61388f565b88513d6000823e3d90fd5b90958482813d83116138f3575b6138e2818361263e565b810103126110c95750519438613769565b503d6138d8565b87513d6000823e3d90fd5b801561392857612710918281029281840414901517156129a557612c6191612abe565b5050600090565b6009549060005b82811061394557505050600190565b806000526020600881526040806000209080519161396283612606565b805483526001918160ff600261397a8680960161306a565b9288880193845201541615158286015260009586945b6139d8575b50505050506064918281029281840414901517156129a5576139ba846139c293612abe565b9051906136b2565b50156139d057600101613936565b505050600090565b909192939582518051881015613ab8578783602492613a0d73ffffffffffffffffffffffffffffffffffffffff938492612c7c565b51168751938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9182156132ab579087969594939291600092613a7c575b509161325f613a74928894613a6d8d8951612c7c565b5116612af7565b970194613990565b91909293809596975082813d8311613ab1575b613a99818361263e565b810103126110c957505186959493929161325f613a57565b503d613a8f565b5095613995565b60ff60025416613acb57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b600a549060005b828110613b0b57505050600090565b613b14816127ff565b9073ffffffffffffffffffffffffffffffffffffffff90548185169260031b1c1614613b4257600101613afc565b505050600190565b8151919060418303613b7b57613b7492506020820151906060604084015193015160001a90613d2f565b9192909190565b505060009160029190565b6004811015613c3e5780613b98575050565b60018103613bca5760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b60028103613c0357602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b600314613c0d5750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008073ffffffffffffffffffffffffffffffffffffffff613cc593169360208151910182865af13d15613d27573d90613ca68261275f565b91613cb4604051938461263e565b82523d6000602084013e5b83613dcc565b8051908115159182613d0c575b5050613cdb5750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b613d1f9250602080918301019101612cca565b153880613cd2565b606090613cbf565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613dc057926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15613db457805173ffffffffffffffffffffffffffffffffffffffff811615613dab57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b90613e0b5750805115613de157805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580613e63575b613e1c575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15613e1456fea26469706673582212200396abeb646ba5b751576a153d04898017f7bda40c878bd2f090a9e215095a4764736f6c63430008170033a2646970667358221220bea1f9820825c369de2221962c8d14abe4c1a833949ced74cf4d98d43fb421f764736f6c63430008170033",
  "libraries": {
    "LimitOrderLib": "0x0E801D84Fa97b50751Dbf25036d067dCf18858bF",
    "StablecoinGridLib": "0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf"
  },
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "BalancerCreated(address,address,bool)": {
        "details": "Emitted when a new balancer is created"
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "userDriftBalancers": {
        "details": "Lists of deployed drift and time balancers per user"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDriftBalancer(address[],uint256[],uint256[],uint256)": {
        "notice": "Create a new OptimizedDriftBalancer"
      },
      "createTimeBalancer(address[],uint256[],uint256[],uint256)": {
        "notice": "Create a new OptimizedTimeBalancer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/portfolio/factory/OptimizedBalancerFactory.sol:OptimizedBalancerFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3318,
        "contract": "contracts/portfolio/factory/OptimizedBalancerFactory.sol:OptimizedBalancerFactory",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3321,
        "contract": "contracts/portfolio/factory/OptimizedBalancerFactory.sol:OptimizedBalancerFactory",
        "label": "stablecoins",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3324,
        "contract": "contracts/portfolio/factory/OptimizedBalancerFactory.sol:OptimizedBalancerFactory",
        "label": "limitOrderProtocol",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILimitOrderProtocol)3723"
      },
      {
        "astId": 3359,
        "contract": "contracts/portfolio/factory/OptimizedBalancerFactory.sol:OptimizedBalancerFactory",
        "label": "userDriftBalancers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3364,
        "contract": "contracts/portfolio/factory/OptimizedBalancerFactory.sol:OptimizedBalancerFactory",
        "label": "userTimeBalancers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(ILimitOrderProtocol)3723": {
        "encoding": "inplace",
        "label": "contract ILimitOrderProtocol",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}