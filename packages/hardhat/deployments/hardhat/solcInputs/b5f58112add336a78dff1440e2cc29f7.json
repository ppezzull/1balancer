{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "contracts/portfolio/balancers/Balancer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../interfaces/IERC1271.sol\";\n\n/**\n * @title Balancer\n * @notice Minimal portfolio balancer that relies on off-chain computation.\n * Off-chain service computes target allocation changes and crafts a Proposal\n * that is EIP-712 signed by the owner (or an authorized signer). The proposal\n * can adjust target percentages and move assets in/out (deposit/withdraw).\n * No on-chain price feeds, automation, or oracle integrations are present.\n */\ncontract Balancer is Ownable, IERC1271 {\n    using SafeERC20 for IERC20;\n\n    // ===== Data Structures =====\n    struct OrderDelta { // describes a single asset adjustment\n        address token;              // asset address\n        int256 percentageDelta;     // relative change (bps, signed) applied to previous target\n        uint256 newPercentage;      // absolute target percentage override (bps, 0 = ignore)\n        uint256 amount;             // amount of tokens to transfer\n        bool isDeposit;             // true -> pull from signer, false -> send to owner\n    }\n\n    // Primary type hashes (computed from canonical EIP-712 type strings)\n    // OrderDelta: keccak256(\"OrderDelta(address token,int256 percentageDelta,uint256 newPercentage,uint256 amount,bool isDeposit)\")\n    bytes32 private constant ORDER_DELTA_TYPEHASH = keccak256(\"OrderDelta(address token,int256 percentageDelta,uint256 newPercentage,uint256 amount,bool isDeposit)\");\n    // Proposal depends on OrderDelta so full encoded type is:\n    // Proposal(uint256 nonce,uint256 deadline,OrderDelta[] deltas)OrderDelta(address token,int256 percentageDelta,uint256 newPercentage,uint256 amount,bool isDeposit)\n    bytes32 private constant PROPOSAL_TYPEHASH = keccak256(\"Proposal(uint256 nonce,uint256 deadline,OrderDelta[] deltas)OrderDelta(address token,int256 percentageDelta,uint256 newPercentage,uint256 amount,bool isDeposit)\");\n\n    // Domain separator components\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 private constant NAME_HASH = keccak256(bytes(\"Balancer\"));\n    bytes32 private constant VERSION_HASH = keccak256(bytes(\"1\"));\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    // ===== Storage =====\n    address[] public assets;               // list of tracked tokens\n    mapping(address => uint256) public targetPercentageBps; // target allocation per token (basis points, total SHOULD sum to 10_000)\n    mapping(address => bool) public isAsset; // quick lookup\n    uint256 public lastRebalanceTimestamp;  // last successful execution\n    uint256 public nonce;                   // monotonically increasing signed proposal nonce\n    address public authorizedSigner;        // optional delegate signer\n\n    // ===== Events =====\n    event AssetsInitialized(address[] assets, uint256[] targetPercBps, uint256[] deposits);\n    event ProposalExecuted(uint256 indexed nonce, address executor, OrderDelta[] deltas);\n    event SignerUpdated(address newSigner);\n\n    // ===== Errors =====\n    error ArrayLengthMismatch();\n    error InvalidAsset();\n    error Expired();\n    error BadSignature();\n    error ZeroAddress();\n\n    constructor(\n        address _owner,\n        address[] memory _assets,\n        uint256[] memory _targetPercentageBps,\n        uint256[] memory _initialDepositAmounts\n    ) Ownable(_owner) {\n        if (_assets.length != _targetPercentageBps.length || _assets.length != _initialDepositAmounts.length) {\n            revert ArrayLengthMismatch();\n        }\n        uint256 total;\n        for (uint256 i; i < _assets.length; i++) {\n            address token = _assets[i];\n            if (token == address(0)) revert ZeroAddress();\n            assets.push(token);\n            isAsset[token] = true;\n            targetPercentageBps[token] = _targetPercentageBps[i];\n            total += _targetPercentageBps[i];\n            if (_initialDepositAmounts[i] > 0) {\n                IERC20(token).safeTransferFrom(_owner, address(this), _initialDepositAmounts[i]);\n            }\n        }\n        // soft requirement: total == 10_000 (100%). Not enforced strictly to retain flexibility.\n        lastRebalanceTimestamp = block.timestamp;\n    authorizedSigner = _owner;\n\n        _CACHED_CHAIN_ID = block.chainid;\n        _DOMAIN_SEPARATOR = keccak256(abi.encode(\n            EIP712_DOMAIN_TYPEHASH,\n            NAME_HASH,\n            VERSION_HASH,\n            block.chainid,\n            address(this)\n        ));\n\n    emit AssetsInitialized(_assets, _targetPercentageBps, _initialDepositAmounts);\n    }\n\n    // ===== View helpers =====\n    function domainSeparator() public view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _DOMAIN_SEPARATOR;\n        }\n        // In the (unlikely) event of a fork, recompute dynamically\n        return keccak256(abi.encode(\n            EIP712_DOMAIN_TYPEHASH,\n            NAME_HASH,\n            VERSION_HASH,\n            block.chainid,\n            address(this)\n        ));\n    }\n\n    function assetCount() external view returns (uint256) { return assets.length; }\n\n    // ===== Owner admin =====\n    function updateAuthorizedSigner(address newSigner) external onlyOwner {\n        if (newSigner == address(0)) revert ZeroAddress();\n        authorizedSigner = newSigner;\n        emit SignerUpdated(newSigner);\n    }\n\n    // ===== Proposal Execution =====\n    function executeSignedRebalance(\n        OrderDelta[] calldata deltas,\n        uint256 deadline,\n        bytes calldata signature\n    ) external {\n        if (block.timestamp > deadline) revert Expired();\n\n        bytes32 structHash = _hashProposal(deltas, nonce, deadline);\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator(), structHash));\n\n        // Validate signature: accept EOAs that recover to owner/authorizedSigner\n        // or contract signers that implement EIP-1271.\n        address recovered;\n        bool valid;\n        {\n            (address r, ECDSA.RecoverError err, ) = ECDSA.tryRecover(digest, signature);\n            recovered = r;\n            if (err == ECDSA.RecoverError.NoError && (r == owner() || r == authorizedSigner)) {\n                valid = true;\n            }\n        }\n        if (!valid) {\n            // fallback: if owner or authorizedSigner are contracts, query their isValidSignature per EIP-1271\n            if (_isContract(owner())) {\n                try IERC1271(owner()).isValidSignature(digest, signature) returns (bytes4 res) {\n                    if (res == IERC1271.isValidSignature.selector) valid = true;\n                } catch {}\n            }\n            if (!valid && authorizedSigner != address(0) && _isContract(authorizedSigner)) {\n                try IERC1271(authorizedSigner).isValidSignature(digest, signature) returns (bytes4 res) {\n                    if (res == IERC1271.isValidSignature.selector) valid = true;\n                } catch {}\n            }\n        }\n        if (!valid) revert BadSignature();\n\n        // Effects\n        nonce++;\n        lastRebalanceTimestamp = block.timestamp;\n\n        // Apply each delta\n        for (uint256 i; i < deltas.length; i++) {\n            OrderDelta calldata d = deltas[i];\n            if (!isAsset[d.token]) revert InvalidAsset();\n\n            if (d.newPercentage > 0) {\n                targetPercentageBps[d.token] = d.newPercentage; // absolute override\n            } else if (d.percentageDelta != 0) {\n                int256 current = int256(targetPercentageBps[d.token]);\n                int256 updated = current + d.percentageDelta; // can go negative transiently; clamp at 0\n                if (updated < 0) updated = 0;\n                targetPercentageBps[d.token] = uint256(updated);\n            }\n\n            if (d.amount > 0) {\n                if (d.isDeposit) {\n                    IERC20(d.token).safeTransferFrom(recovered, address(this), d.amount);\n                } else {\n                    IERC20(d.token).safeTransfer(owner(), d.amount);\n                }\n            }\n        }\n\n        emit ProposalExecuted(nonce - 1, msg.sender, deltas);\n    }\n\n    // ===== Hash helpers (public for test support) =====\n    function hashOrderDelta(OrderDelta calldata d) public pure returns (bytes32) {\n        return keccak256(abi.encode(\n            ORDER_DELTA_TYPEHASH,\n            d.token,\n            d.percentageDelta,\n            d.newPercentage,\n            d.amount,\n            d.isDeposit\n        ));\n    }\n\n    function hashProposal(OrderDelta[] calldata deltas, uint256 _nonce, uint256 deadline) external pure returns (bytes32) {\n        return _hashProposal(deltas, _nonce, deadline);\n    }\n\n    function _hashProposal(OrderDelta[] calldata deltas, uint256 _nonce, uint256 deadline) internal pure returns (bytes32) {\n        bytes32[] memory deltaHashes = new bytes32[](deltas.length);\n        for (uint256 i; i < deltas.length; i++) {\n            OrderDelta calldata d = deltas[i];\n            deltaHashes[i] = keccak256(abi.encode(\n                ORDER_DELTA_TYPEHASH,\n                d.token,\n                d.percentageDelta,\n                d.newPercentage,\n                d.amount,\n                d.isDeposit\n            ));\n        }\n        bytes32 deltasHash = keccak256(abi.encodePacked(deltaHashes));\n        return keccak256(abi.encode(\n            PROPOSAL_TYPEHASH,\n            _nonce,\n            deadline,\n            deltasHash\n        ));\n    }\n\n    // ===== EIP-1271 compatibility =====\n    /// @notice Expose EIP-1271 `isValidSignature` for contract signers\n    /// @dev Returns 0x1626ba7e when signature is valid per EIP-1271\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) external view override returns (bytes4) {\n        // Try EOA style recovery first\n        (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(_hash, _signature);\n        if (err == ECDSA.RecoverError.NoError && (recovered == owner() || recovered == authorizedSigner)) {\n            return IERC1271.isValidSignature.selector;\n        }\n        // Contract owner/authorizedSigner fallback\n        if (_isContract(owner())) {\n            try IERC1271(owner()).isValidSignature(_hash, _signature) returns (bytes4 res) {\n                if (res == IERC1271.isValidSignature.selector) return res;\n            } catch {}\n        }\n        if (authorizedSigner != address(0) && _isContract(authorizedSigner)) {\n            try IERC1271(authorizedSigner).isValidSignature(_hash, _signature) returns (bytes4 res) {\n                if (res == IERC1271.isValidSignature.selector) return res;\n            } catch {}\n        }\n        return 0xffffffff; // invalid\n    }\n\n    function _isContract(address account) internal view returns (bool) {\n        return account.code.length > 0;\n    }\n}\n"
    },
    "contracts/portfolio/factory/BalancerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport \"../balancers/Balancer.sol\";\n\n/**\n * @title BalancerFactory (minimal)\n * @notice Deploys Balancer instances with initial deposits. No automation, no oracles.\n */\ncontract BalancerFactory is Ownable {\n    using SafeERC20 for IERC20;\n\n    event BalancerCreated(address indexed owner, address balancer);\n\n    address[] public allBalancers;\n    mapping(address => address[]) public userBalancers; // owner => balancers\n\n    constructor() Ownable(msg.sender) {}\n\n    // ===== Errors =====\n    error ArrayLengthMismatch();\n    error PermitOrderMismatch();\n    error PermitInsufficientValue();\n    error InsufficientBalance();\n    error InsufficientAllowance();\n\n    // ===== Types =====\n    struct PermitInput {\n        address token;       // ERC20 token address\n        uint256 value;       // allowance to approve to the Factory (spender)\n        uint256 deadline;    // EIP-2612 deadline\n        uint8 v; bytes32 r; bytes32 s; // ECDSA parts\n    }\n\n    /**\n     * @notice Deploy a new Balancer and fund it in the same tx using EIP-2612 permits per token.\n     * The permits authorize this Factory as spender; then the Factory transfers to the Balancer.\n     * This avoids needing to know the Balancer address in advance and works without CREATE2.\n     *\n     * Requirements:\n     * - assets.length == targetPercBps.length == initialDepositAmounts.length\n     * - permits.length == assets.length and aligned by index when amount > 0\n     * - each token supports EIP-2612\n     */\n    function createBalancer(\n        address[] calldata assets,\n        uint256[] calldata targetPercBps,\n        uint256[] calldata initialDepositAmounts,\n        PermitInput[] calldata permits\n    ) external returns (address balancerAddr) {\n        if (assets.length != targetPercBps.length || assets.length != initialDepositAmounts.length) {\n            revert ArrayLengthMismatch();\n        }\n        if (permits.length != assets.length) {\n            revert ArrayLengthMismatch();\n        }\n\n        // 1) Validate alignment and intended allowances BEFORE deploying\n        for (uint256 i; i < assets.length; i++) {\n            uint256 amount = initialDepositAmounts[i];\n            if (amount == 0) continue;\n            address token = assets[i];\n            PermitInput calldata p = permits[i];\n            if (p.token != token) revert PermitOrderMismatch();\n            if (p.value < amount) revert PermitInsufficientValue();\n        }\n\n        // 2) Execute permits to grant allowance to the Factory and verify balances/allowances\n        for (uint256 i; i < assets.length; i++) {\n            uint256 amount = initialDepositAmounts[i];\n            if (amount == 0) continue;\n            address token = assets[i];\n            PermitInput calldata p = permits[i];\n\n            // EIP-2612 permit: approve Factory as spender\n            IERC20Permit(token).permit(msg.sender, address(this), p.value, p.deadline, p.v, p.r, p.s);\n\n            // Check allowance set by permit and user balance\n            if (IERC20(token).allowance(msg.sender, address(this)) < amount) revert PermitInsufficientValue();\n            if (IERC20(token).balanceOf(msg.sender) < amount) revert InsufficientBalance();\n        }\n\n        // 3) Deploy balancer with zero initial pulls; we'll fund via Factory transfers after permits\n        uint256[] memory zeros = new uint256[](assets.length);\n        Balancer balancer = new Balancer(\n            msg.sender,\n            assets,\n            targetPercBps,\n            zeros\n        );\n        balancerAddr = address(balancer);\n\n        // 4) Move funds now that allowances are guaranteed\n        for (uint256 i; i < assets.length; i++) {\n            uint256 amount = initialDepositAmounts[i];\n            if (amount == 0) continue;\n            address token = assets[i];\n            IERC20(token).safeTransferFrom(msg.sender, balancerAddr, amount);\n        }\n\n        allBalancers.push(balancerAddr);\n        userBalancers[msg.sender].push(balancerAddr);\n        emit BalancerCreated(msg.sender, balancerAddr);\n    }\n\n    function balancerCount() external view returns (uint256) { return allBalancers.length; }\n    function getUserBalancers(address user) external view returns (address[] memory) { return userBalancers[user]; }\n}\n"
    },
    "contracts/portfolio/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided hash\n     * @param _hash      Hash of the data to be signed\n     * @param _signature Signature byte array associated with _hash\n     *\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */ \n    function isValidSignature(\n        bytes32 _hash, \n        bytes memory _signature\n    ) external view returns (bytes4 magicValue);\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000000
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}