{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitInsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitOrderMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "balancer",
          "type": "address"
        }
      ],
      "name": "BalancerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allBalancers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "targetPercBps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "initialDepositAmounts",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BalancerFactory.PermitInput[]",
          "name": "permits",
          "type": "tuple[]"
        }
      ],
      "name": "createBalancer",
      "outputs": [
        {
          "internalType": "address",
          "name": "balancerAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBalancers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBalancers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0319af6b4b50f15a8572573dce1030ab7fb405341611a37f0c19c7ac69841da7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "2825557",
    "logsBloom": "0x
    "blockHash": "0xa9f6c490bae0dd18879030f3a189d23f1be6467b89173eb278530fca5ada7fb9",
    "transactionHash": "0x0319af6b4b50f15a8572573dce1030ab7fb405341611a37f0c19c7ac69841da7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13,
        "transactionHash": "0x0319af6b4b50f15a8572573dce1030ab7fb405341611a37f0c19c7ac69841da7",
        "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa9f6c490bae0dd18879030f3a189d23f1be6467b89173eb278530fca5ada7fb9"
      }
    ],
    "blockNumber": 13,
    "cumulativeGasUsed": "2825557",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1dbe172297066b2d05e2c9c7b6ba9dd2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitInsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitOrderMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"balancer\",\"type\":\"address\"}],\"name\":\"BalancerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBalancers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"targetPercBps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialDepositAmounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BalancerFactory.PermitInput[]\",\"name\":\"permits\",\"type\":\"tuple[]\"}],\"name\":\"createBalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"balancerAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBalancers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBalancers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BalancerFactory (minimal)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBalancer(address[],uint256[],uint256[],(address,uint256,uint256,uint8,bytes32,bytes32)[])\":{\"notice\":\"Deploy a new Balancer and fund it in the same tx using EIP-2612 permits per token. The permits authorize this Factory as spender; then the Factory transfers to the Balancer. This avoids needing to know the Balancer address in advance and works without CREATE2. Requirements: - assets.length == targetPercBps.length == initialDepositAmounts.length - permits.length == assets.length and aligned by index when amount > 0 - each token supports EIP-2612\"}},\"notice\":\"Deploys Balancer instances with initial deposits. No automation, no oracles.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/portfolio/factory/BalancerFactory.sol\":\"BalancerFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"contracts/portfolio/balancers/Balancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title Balancer\\n * @notice Minimal portfolio balancer that relies on off-chain computation.\\n * Off-chain service computes target allocation changes and crafts a Proposal\\n * that is EIP-712 signed by the owner (or an authorized signer). The proposal\\n * can adjust target percentages and move assets in/out (deposit/withdraw).\\n * No on-chain price feeds, automation, or oracle integrations are present.\\n */\\ncontract Balancer is Ownable, IERC1271 {\\n    using SafeERC20 for IERC20;\\n\\n    // ===== Data Structures =====\\n    struct OrderDelta { // describes a single asset adjustment\\n        address token;              // asset address\\n        int256 percentageDelta;     // relative change (bps, signed) applied to previous target\\n        uint256 newPercentage;      // absolute target percentage override (bps, 0 = ignore)\\n        uint256 amount;             // amount of tokens to transfer\\n        bool isDeposit;             // true -> pull from signer, false -> send to owner\\n    }\\n\\n    // Primary type hashes (computed from canonical EIP-712 type strings)\\n    // OrderDelta: keccak256(\\\"OrderDelta(address token,int256 percentageDelta,uint256 newPercentage,uint256 amount,bool isDeposit)\\\")\\n    bytes32 private constant ORDER_DELTA_TYPEHASH = keccak256(\\\"OrderDelta(address token,int256 percentageDelta,uint256 newPercentage,uint256 amount,bool isDeposit)\\\");\\n    // Proposal depends on OrderDelta so full encoded type is:\\n    // Proposal(uint256 nonce,uint256 deadline,OrderDelta[] deltas)OrderDelta(address token,int256 percentageDelta,uint256 newPercentage,uint256 amount,bool isDeposit)\\n    bytes32 private constant PROPOSAL_TYPEHASH = keccak256(\\\"Proposal(uint256 nonce,uint256 deadline,OrderDelta[] deltas)OrderDelta(address token,int256 percentageDelta,uint256 newPercentage,uint256 amount,bool isDeposit)\\\");\\n\\n    // Domain separator components\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 private constant NAME_HASH = keccak256(bytes(\\\"Balancer\\\"));\\n    bytes32 private constant VERSION_HASH = keccak256(bytes(\\\"1\\\"));\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    // ===== Storage =====\\n    address[] public assets;               // list of tracked tokens\\n    mapping(address => uint256) public targetPercentageBps; // target allocation per token (basis points, total SHOULD sum to 10_000)\\n    mapping(address => bool) public isAsset; // quick lookup\\n    uint256 public lastRebalanceTimestamp;  // last successful execution\\n    uint256 public nonce;                   // monotonically increasing signed proposal nonce\\n    address public authorizedSigner;        // optional delegate signer\\n\\n    // ===== Events =====\\n    event AssetsInitialized(address[] assets, uint256[] targetPercBps, uint256[] deposits);\\n    event ProposalExecuted(uint256 indexed nonce, address executor, OrderDelta[] deltas);\\n    event SignerUpdated(address newSigner);\\n\\n    // ===== Errors =====\\n    error ArrayLengthMismatch();\\n    error InvalidAsset();\\n    error Expired();\\n    error BadSignature();\\n    error ZeroAddress();\\n\\n    constructor(\\n        address _owner,\\n        address[] memory _assets,\\n        uint256[] memory _targetPercentageBps,\\n        uint256[] memory _initialDepositAmounts\\n    ) Ownable(_owner) {\\n        if (_assets.length != _targetPercentageBps.length || _assets.length != _initialDepositAmounts.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        uint256 total;\\n        for (uint256 i; i < _assets.length; i++) {\\n            address token = _assets[i];\\n            if (token == address(0)) revert ZeroAddress();\\n            assets.push(token);\\n            isAsset[token] = true;\\n            targetPercentageBps[token] = _targetPercentageBps[i];\\n            total += _targetPercentageBps[i];\\n            if (_initialDepositAmounts[i] > 0) {\\n                IERC20(token).safeTransferFrom(_owner, address(this), _initialDepositAmounts[i]);\\n            }\\n        }\\n        // soft requirement: total == 10_000 (100%). Not enforced strictly to retain flexibility.\\n        lastRebalanceTimestamp = block.timestamp;\\n    authorizedSigner = _owner;\\n\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _DOMAIN_SEPARATOR = keccak256(abi.encode(\\n            EIP712_DOMAIN_TYPEHASH,\\n            NAME_HASH,\\n            VERSION_HASH,\\n            block.chainid,\\n            address(this)\\n        ));\\n\\n    emit AssetsInitialized(_assets, _targetPercentageBps, _initialDepositAmounts);\\n    }\\n\\n    // ===== View helpers =====\\n    function domainSeparator() public view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _DOMAIN_SEPARATOR;\\n        }\\n        // In the (unlikely) event of a fork, recompute dynamically\\n        return keccak256(abi.encode(\\n            EIP712_DOMAIN_TYPEHASH,\\n            NAME_HASH,\\n            VERSION_HASH,\\n            block.chainid,\\n            address(this)\\n        ));\\n    }\\n\\n    function assetCount() external view returns (uint256) { return assets.length; }\\n\\n    // ===== Owner admin =====\\n    function updateAuthorizedSigner(address newSigner) external onlyOwner {\\n        if (newSigner == address(0)) revert ZeroAddress();\\n        authorizedSigner = newSigner;\\n        emit SignerUpdated(newSigner);\\n    }\\n\\n    // ===== Proposal Execution =====\\n    function executeSignedRebalance(\\n        OrderDelta[] calldata deltas,\\n        uint256 deadline,\\n        bytes calldata signature\\n    ) external {\\n        if (block.timestamp > deadline) revert Expired();\\n\\n        bytes32 structHash = _hashProposal(deltas, nonce, deadline);\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator(), structHash));\\n\\n        // Validate signature: accept EOAs that recover to owner/authorizedSigner\\n        // or contract signers that implement EIP-1271.\\n        address recovered;\\n        bool valid;\\n        {\\n            (address r, ECDSA.RecoverError err, ) = ECDSA.tryRecover(digest, signature);\\n            recovered = r;\\n            if (err == ECDSA.RecoverError.NoError && (r == owner() || r == authorizedSigner)) {\\n                valid = true;\\n            }\\n        }\\n        if (!valid) {\\n            // fallback: if owner or authorizedSigner are contracts, query their isValidSignature per EIP-1271\\n            if (_isContract(owner())) {\\n                try IERC1271(owner()).isValidSignature(digest, signature) returns (bytes4 res) {\\n                    if (res == IERC1271.isValidSignature.selector) valid = true;\\n                } catch {}\\n            }\\n            if (!valid && authorizedSigner != address(0) && _isContract(authorizedSigner)) {\\n                try IERC1271(authorizedSigner).isValidSignature(digest, signature) returns (bytes4 res) {\\n                    if (res == IERC1271.isValidSignature.selector) valid = true;\\n                } catch {}\\n            }\\n        }\\n        if (!valid) revert BadSignature();\\n\\n        // Effects\\n        nonce++;\\n        lastRebalanceTimestamp = block.timestamp;\\n\\n        // Apply each delta\\n        for (uint256 i; i < deltas.length; i++) {\\n            OrderDelta calldata d = deltas[i];\\n            if (!isAsset[d.token]) revert InvalidAsset();\\n\\n            if (d.newPercentage > 0) {\\n                targetPercentageBps[d.token] = d.newPercentage; // absolute override\\n            } else if (d.percentageDelta != 0) {\\n                int256 current = int256(targetPercentageBps[d.token]);\\n                int256 updated = current + d.percentageDelta; // can go negative transiently; clamp at 0\\n                if (updated < 0) updated = 0;\\n                targetPercentageBps[d.token] = uint256(updated);\\n            }\\n\\n            if (d.amount > 0) {\\n                if (d.isDeposit) {\\n                    IERC20(d.token).safeTransferFrom(recovered, address(this), d.amount);\\n                } else {\\n                    IERC20(d.token).safeTransfer(owner(), d.amount);\\n                }\\n            }\\n        }\\n\\n        emit ProposalExecuted(nonce - 1, msg.sender, deltas);\\n    }\\n\\n    // ===== Hash helpers (public for test support) =====\\n    function hashOrderDelta(OrderDelta calldata d) public pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORDER_DELTA_TYPEHASH,\\n            d.token,\\n            d.percentageDelta,\\n            d.newPercentage,\\n            d.amount,\\n            d.isDeposit\\n        ));\\n    }\\n\\n    function hashProposal(OrderDelta[] calldata deltas, uint256 _nonce, uint256 deadline) external pure returns (bytes32) {\\n        return _hashProposal(deltas, _nonce, deadline);\\n    }\\n\\n    function _hashProposal(OrderDelta[] calldata deltas, uint256 _nonce, uint256 deadline) internal pure returns (bytes32) {\\n        bytes32[] memory deltaHashes = new bytes32[](deltas.length);\\n        for (uint256 i; i < deltas.length; i++) {\\n            OrderDelta calldata d = deltas[i];\\n            deltaHashes[i] = keccak256(abi.encode(\\n                ORDER_DELTA_TYPEHASH,\\n                d.token,\\n                d.percentageDelta,\\n                d.newPercentage,\\n                d.amount,\\n                d.isDeposit\\n            ));\\n        }\\n        bytes32 deltasHash = keccak256(abi.encodePacked(deltaHashes));\\n        return keccak256(abi.encode(\\n            PROPOSAL_TYPEHASH,\\n            _nonce,\\n            deadline,\\n            deltasHash\\n        ));\\n    }\\n\\n    // ===== EIP-1271 compatibility =====\\n    /// @notice Expose EIP-1271 `isValidSignature` for contract signers\\n    /// @dev Returns 0x1626ba7e when signature is valid per EIP-1271\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) external view override returns (bytes4) {\\n        // Try EOA style recovery first\\n        (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(_hash, _signature);\\n        if (err == ECDSA.RecoverError.NoError && (recovered == owner() || recovered == authorizedSigner)) {\\n            return IERC1271.isValidSignature.selector;\\n        }\\n        // Contract owner/authorizedSigner fallback\\n        if (_isContract(owner())) {\\n            try IERC1271(owner()).isValidSignature(_hash, _signature) returns (bytes4 res) {\\n                if (res == IERC1271.isValidSignature.selector) return res;\\n            } catch {}\\n        }\\n        if (authorizedSigner != address(0) && _isContract(authorizedSigner)) {\\n            try IERC1271(authorizedSigner).isValidSignature(_hash, _signature) returns (bytes4 res) {\\n                if (res == IERC1271.isValidSignature.selector) return res;\\n            } catch {}\\n        }\\n        return 0xffffffff; // invalid\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd56126e276e249cfbb1d8f4cfb11b291a0a495e4406cde3031c2f6294b611328\",\"license\":\"MIT\"},\"contracts/portfolio/factory/BalancerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"../balancers/Balancer.sol\\\";\\n\\n/**\\n * @title BalancerFactory (minimal)\\n * @notice Deploys Balancer instances with initial deposits. No automation, no oracles.\\n */\\ncontract BalancerFactory is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event BalancerCreated(address indexed owner, address balancer);\\n\\n    address[] public allBalancers;\\n    mapping(address => address[]) public userBalancers; // owner => balancers\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // ===== Errors =====\\n    error ArrayLengthMismatch();\\n    error PermitOrderMismatch();\\n    error PermitInsufficientValue();\\n    error InsufficientBalance();\\n    error InsufficientAllowance();\\n\\n    // ===== Types =====\\n    struct PermitInput {\\n        address token;       // ERC20 token address\\n        uint256 value;       // allowance to approve to the Factory (spender)\\n        uint256 deadline;    // EIP-2612 deadline\\n        uint8 v; bytes32 r; bytes32 s; // ECDSA parts\\n    }\\n\\n    /**\\n     * @notice Deploy a new Balancer and fund it in the same tx using EIP-2612 permits per token.\\n     * The permits authorize this Factory as spender; then the Factory transfers to the Balancer.\\n     * This avoids needing to know the Balancer address in advance and works without CREATE2.\\n     *\\n     * Requirements:\\n     * - assets.length == targetPercBps.length == initialDepositAmounts.length\\n     * - permits.length == assets.length and aligned by index when amount > 0\\n     * - each token supports EIP-2612\\n     */\\n    function createBalancer(\\n        address[] calldata assets,\\n        uint256[] calldata targetPercBps,\\n        uint256[] calldata initialDepositAmounts,\\n        PermitInput[] calldata permits\\n    ) external returns (address balancerAddr) {\\n        if (assets.length != targetPercBps.length || assets.length != initialDepositAmounts.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        if (permits.length != assets.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n\\n        // 1) Validate alignment and intended allowances BEFORE deploying\\n        for (uint256 i; i < assets.length; i++) {\\n            uint256 amount = initialDepositAmounts[i];\\n            if (amount == 0) continue;\\n            address token = assets[i];\\n            PermitInput calldata p = permits[i];\\n            if (p.token != token) revert PermitOrderMismatch();\\n            if (p.value < amount) revert PermitInsufficientValue();\\n        }\\n\\n        // 2) Execute permits to grant allowance to the Factory and verify balances/allowances\\n        for (uint256 i; i < assets.length; i++) {\\n            uint256 amount = initialDepositAmounts[i];\\n            if (amount == 0) continue;\\n            address token = assets[i];\\n            PermitInput calldata p = permits[i];\\n\\n            // EIP-2612 permit: approve Factory as spender\\n            IERC20Permit(token).permit(msg.sender, address(this), p.value, p.deadline, p.v, p.r, p.s);\\n\\n            // Check allowance set by permit and user balance\\n            if (IERC20(token).allowance(msg.sender, address(this)) < amount) revert PermitInsufficientValue();\\n            if (IERC20(token).balanceOf(msg.sender) < amount) revert InsufficientBalance();\\n        }\\n\\n        // 3) Deploy balancer with zero initial pulls; we'll fund via Factory transfers after permits\\n        uint256[] memory zeros = new uint256[](assets.length);\\n        Balancer balancer = new Balancer(\\n            msg.sender,\\n            assets,\\n            targetPercBps,\\n            zeros\\n        );\\n        balancerAddr = address(balancer);\\n\\n        // 4) Move funds now that allowances are guaranteed\\n        for (uint256 i; i < assets.length; i++) {\\n            uint256 amount = initialDepositAmounts[i];\\n            if (amount == 0) continue;\\n            address token = assets[i];\\n            IERC20(token).safeTransferFrom(msg.sender, balancerAddr, amount);\\n        }\\n\\n        allBalancers.push(balancerAddr);\\n        userBalancers[msg.sender].push(balancerAddr);\\n        emit BalancerCreated(msg.sender, balancerAddr);\\n    }\\n\\n    function balancerCount() external view returns (uint256) { return allBalancers.length; }\\n    function getUserBalancers(address user) external view returns (address[] memory) { return userBalancers[user]; }\\n}\\n\",\"keccak256\":\"0xfdfda4c9be4eabb31fdd9938a6b5ed963f2fc951f8a5baa28f8617d124d894fa\",\"license\":\"MIT\"},\"contracts/portfolio/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided hash\\n     * @param _hash      Hash of the data to be signed\\n     * @param _signature Signature byte array associated with _hash\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */ \\n    function isValidSignature(\\n        bytes32 _hash, \\n        bytes memory _signature\\n    ) external view returns (bytes4 magicValue);\\n} \",\"keccak256\":\"0x60494e1c9a2fb5d3a83ef50d3ab449bb89afb17924423e299818804db4f6f3b0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461007a5733156100645760008054336001600160a01b03198216811783556040519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361320790816100808239f35b631e4fbdf760e01b815260006004820152602490fd5b600080fdfe60808060405260043610156200001457600080fd5b60003560e01c90816332bb00fb1462000d7857508063715018a61462000cd8578063735d99301462000c505780638da5cb5b1462000bfc57806399368bce1462000238578063cf6bf14914620001ac578063f2fde38b14620000c35763f923d360146200008057600080fd5b34620000be5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be576020600154604051908152f35b600080fd5b34620000be5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be57620000fe62000e5d565b6200010862000f6d565b73ffffffffffffffffffffffffffffffffffffffff8091169081156200017b57600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b34620000be5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be57620001e762000e5d565b6024359073ffffffffffffffffffffffffffffffffffffffff809116600052600260205260406000208054831015620000be57602092620002289162000e81565b9190546040519260031b1c168152f35b34620000be5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be5760043567ffffffffffffffff8111620000be576200028c90369060040162000e9a565b60243567ffffffffffffffff8111620000be57620002af90369060040162000e9a565b92909160443567ffffffffffffffff8111620000be57620002d590369060040162000e9a565b94909360643567ffffffffffffffff8111620000be5736602382011215620000be5767ffffffffffffffff816004013511620000be5736602460c083600401350283010111620000be5782841480159062000bf1575b62000bc7578381600401350362000bc75760005b84811062000b18575060005b84811062000859575050620003608362000f54565b9062000370604051928362000ece565b8382527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06200039f8562000f54565b01366020840137604051928361216d81011067ffffffffffffffff61216d86011117620005c95761216d6200106585393361216d8501908152608060208201819052810186905260a001908660005b8781106200080c57505061216d85018203604061216d870101528082527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111620000be57908493929160051b809260208301370160206040818301928261216d8701820301606061216d8801015284518094520192019060005b818110620007f25750505003906000f0938415620007e65760005b82811062000627578560015490680100000000000000009182811015620005c9576001810180600155811015620005f8577fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60173ffffffffffffffffffffffffffffffffffffffff82167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790553360005260026020526040600020805492831015620005c957826200054291600160209501815562000e81565b81549060031b9073ffffffffffffffffffffffffffffffffffffffff808516831b921b191617905560405173ffffffffffffffffffffffffffffffffffffffff821681527f1b655f6b1b4c6330e0fde0f84395dbb79296701c13a227618ea9f906bbacb8bb833392a273ffffffffffffffffffffffffffffffffffffffff60405191168152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6200063481838762000f10565b358015620007dc5773ffffffffffffffffffffffffffffffffffffffff620006686200066284878962000f10565b62000f21565b1690604051907f23b872dd00000000000000000000000000000000000000000000000000000000602083015233602483015273ffffffffffffffffffffffffffffffffffffffff891660448301526064820152606481528060a081011067ffffffffffffffff60a083011117620005c95760008160a082930160405260208151910182855af13d15620007ce573d67ffffffffffffffff8111620005c9576200075591604051916200074360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018462000ece565b82523d6000602084013e5b8362000fbf565b8051908115159182620007a7575b50506200077657506001905b0162000484565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b8192509060209181010312620000be5760200151801590811503620000be57888062000763565b62000755906060906200074e565b506001906200076f565b6040513d6000823e3d90fd5b825184528594506020938401939092019160010162000469565b909283359073ffffffffffffffffffffffffffffffffffffffff82168203620000be576020809173ffffffffffffffffffffffffffffffffffffffff6001941681520194019101620003ee565b6200086681898962000f10565b35801562000b0e576200087f6200066283888a62000f10565b620008938385600401356024870162000f43565b60608101359060ff82168203620000be5773ffffffffffffffffffffffffffffffffffffffff83163b15620000be5760a09060ff604051937fd505accf0000000000000000000000000000000000000000000000000000000085523360048601523060248601526020830135604486015260408301356064860152166084840152608081013560a4840152013560c482015260008160e4818373ffffffffffffffffffffffffffffffffffffffff87165af18015620007e65762000af4575b506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015260208160448173ffffffffffffffffffffffffffffffffffffffff86165afa8015620007e657839160009162000ab9575b501062000a8f57602073ffffffffffffffffffffffffffffffffffffffff916024604051809481937f70a08231000000000000000000000000000000000000000000000000000000008352336004840152165afa908115620007e65760009162000a57575b501062000a2d576001905b016200034b565b60046040517ff4d678b8000000000000000000000000000000000000000000000000000000008152fd5b90506020813d60201162000a86575b8162000a756020938362000ece565b81010312620000be57518a62000a1b565b3d915062000a66565b60046040517fa0bdddd2000000000000000000000000000000000000000000000000000000008152fd5b9150506020813d60201162000aeb575b8162000ad86020938362000ece565b81010312620000be578290518c620009b6565b3d915062000ac9565b67ffffffffffffffff8111620005c9576040528a62000952565b5060019062000a26565b62000b2581898962000f10565b35801562000bbd5762000b3e6200066283888a62000f10565b62000b528385600401356024870162000f43565b9062000b5e8262000f21565b73ffffffffffffffffffffffffffffffffffffffff91821691160362000b9357602001351062000a8f576001905b016200033f565b60046040517f58215db3000000000000000000000000000000000000000000000000000000008152fd5b5060019062000b8c565b60046040517fa24a13a6000000000000000000000000000000000000000000000000000000008152fd5b50868414156200032b565b34620000be5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b34620000be5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be57600435600154811015620000be5773ffffffffffffffffffffffffffffffffffffffff60209160016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015416604051908152f35b34620000be5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be5762000d1362000f6d565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34620000be576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be579073ffffffffffffffffffffffffffffffffffffffff918262000dcc62000e5d565b16600052600281526040600020908154808452818401908193600052826000209060005b81811062000e46575050508362000e0991038462000ece565b60405192818401908285525180915260408401929160005b82811062000e2f5785850386f35b835187168552938101939281019260010162000e21565b825488168452928401926001928301920162000df0565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203620000be57565b8054821015620005f85760005260206000200190600090565b9181601f84011215620000be5782359167ffffffffffffffff8311620000be576020808501948460051b010111620000be57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117620005c957604052565b9190811015620005f85760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff81168103620000be5790565b9190811015620005f85760c0020190565b67ffffffffffffffff8111620005c95760051b60200190565b73ffffffffffffffffffffffffffffffffffffffff60005416330362000f8f57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b9062001000575080511562000fd657805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806200105a575b62001013575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b156200100a56fe60c0806040523462000338576200216d8038038091620000208285620005a2565b8339810160808282031262000338576200003a82620005c6565b60208301516001600160401b0381116200033857830182601f8201121562000338578051936200006a85620005db565b916200007a6040519384620005a2565b858352602083016020819760051b830101918683116200033857602001905b8282106200056b5750505060408101516001600160401b038111620003385784620000c6918301620005f3565b60608201519094906001600160401b0381116200033857620000e99201620005f3565b906001600160a01b038316156200055257600080546001600160a01b031981166001600160a01b03868116918217845560405193919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a38151855181149081159162000545575b5062000536575060009060005b81518110156200039f576001600160a01b036200018082846200065c565b51169283156200038d5760018054680100000000000000008110156200033d578181018083558110156200037757816000526020600020018560018060a01b031982541617905584600052600360205260406000209060ff19825416179055620001eb82886200065c565b518460005260026020526040600020556200020782886200065c565b5181018091116200036157926200021f82866200065c565b5162000230575b5060010162000162565b6200023c82866200065c565b516040516323b872dd60e01b60208201526001600160a01b03881660248201523060448201526064808201929092529081526001600160401b0360a08201908111908211176200033d5760008160a082930160405260208151910182855af13d1562000353573d6001600160401b0381116200033d57620002e39160405191620002d16020601f19601f8401160184620005a2565b82523d6000602084013e5b83620006a7565b805190811515918262000311575b505015620002265760249060405190635274afe760e01b82526004820152fd5b819250906020918101031262000338576020015180159081150362000338573880620002f1565b600080fd5b634e487b7160e01b600052604160045260246000fd5b620002e390606090620002dc565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405163d92e233d60e01b8152600490fd5b42600455600680546001600160a01b0319166001600160a01b0387161790554660a0526040518490889088908590600890602090620003de8162000586565b82815201672130b630b731b2b960c11b81522092604051620004008162000586565b60016020819282815201603160f81b815220926040519360208501967f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8852604086015260608501524660808501523060a085015260a0845260c084019584871060018060401b038811176200033d5760408790528451902060805260608652516101208401819052610140840192919060005b8181106200051757505050507f4f53ac031d4fe7e2706b2eb17a7c80a7863819c0fb6c71d807d9176f3b6fa14794620004df620004f19260bf1995868683030160e087015262000671565b90848483030161010085015262000671565b030190a1604051611a5d90816200071082396080518161158c015260a051816114540152f35b83516001600160a01b0316855260209485019490930192820162000494565b63512509d360e11b8152600490fd5b9050835114153862000155565b604051631e4fbdf760e01b815260006004820152602490fd5b602080916200057a84620005c6565b81520191019062000099565b604081019081106001600160401b038211176200033d57604052565b601f909101601f19168101906001600160401b038211908210176200033d57604052565b51906001600160a01b03821682036200033857565b6001600160401b0381116200033d5760051b60200190565b9080601f8301121562000338578151906020916200061181620005db565b93620006216040519586620005a2565b81855260208086019260051b8201019283116200033857602001905b8282106200064c575050505090565b815181529083019083016200063d565b8051821015620003775760209160051b010190565b90815180825260208080930193019160005b82811062000692575050505090565b83518552938101939281019260010162000683565b90620006d05750805115620006be57805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158062000705575b620006e3575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15620006da56fe6080604052600436101561001257600080fd5b60003560e01c80631626ba7e14610ed8578063669ed93514610dfc578063715018a614610d605780638375547814610cfb5780638da5cb5b14610ca9578063affed0e014610c6d578063b83d815714610c31578063be50016814610b4a578063c771909c14610af8578063c87fa42a14610a8e578063cf35bdd014610a09578063d1b56227146109a7578063eafe7a741461096b578063f27431e7146101f4578063f2fde38b146101125763f698da25146100cc57600080fd5b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d576020610105611452565b604051908152f35b600080fd5b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d57610149610f8d565b6101516115ea565b73ffffffffffffffffffffffffffffffffffffffff8091169081156101c357600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b3461010d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5767ffffffffffffffff60043581811161010d57610244903690600401610fb0565b90916024359060443590811161010d57610262903690600401610f5f565b91908142116109415761027a60055492838688611653565b610282611452565b906040519060208201927f1901000000000000000000000000000000000000000000000000000000000000845260228301526042820152604281526102c681610fe1565b5190206000916102e06102da3687846110df565b836115ae565b5060048197929710156109125715806108d4575b6108cb575b8315610701575b505050156106d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461042a576001016005554260045560005b828110610459575050600554917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830192831161042a5760405191806040840133855260406020860152526060830191906000905b8082106103c157857fc7da47883a0e724423bc819cb5237c240de1657791ca64962c54f9c1d55799af86860387a2005b909192833573ffffffffffffffffffffffffffffffffffffffff811680910361010d5781526020840135602082015260408401356040820152606084013560608201526080908185013580151580910361010d5760019282015260a08091019401920190610391565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610464818486611413565b9073ffffffffffffffffffffffffffffffffffffffff610483836113e5565b16600052600360205260ff60406000205416156106ad5760408201358015610609579160019273ffffffffffffffffffffffffffffffffffffffff6104c7836113e5565b1660005260026020526040600020555b6060810135806104ea575b50500161033c565b6104f660808301611406565b156105875773ffffffffffffffffffffffffffffffffffffffff61051c610580936113e5565b16604051917f23b872dd00000000000000000000000000000000000000000000000000000000602084015273ffffffffffffffffffffffffffffffffffffffff8716602484015230604484015260649081840152825261057b8261102c565b6118af565b85806104e2565b73ffffffffffffffffffffffffffffffffffffffff6105a8610604936113e5565b1673ffffffffffffffffffffffffffffffffffffffff6000541691604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152602484015260448301526044825261057b82610fe1565b610580565b506020820135918261061f575b600192506104d7565b73ffffffffffffffffffffffffffffffffffffffff61063d826113e5565b166000526002806020526040600020549084808301126000831290801582169115161761042a5760008560019684019301126106a4575b73ffffffffffffffffffffffffffffffffffffffff610692846113e5565b16600052602052604060002055610616565b60009150610674565b60046040517fc891add2000000000000000000000000000000000000000000000000000000008152fd5b60046040517f5cd5d233000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff908160005416803b61081d575b50841580610810575b80610802575b61073d575b50610300565b6107809260209260065416906040518095819482937f1626ba7e00000000000000000000000000000000000000000000000000000000998a85526004850161114e565b03915afa600091816107d1575b5061079a575b8080610737565b7fffffffff0000000000000000000000000000000000000000000000000000000016146107c9575b8580610793565b5060016107c2565b6107f491925060203d6020116107fb575b6107ec8183611064565b810190611116565b908861078d565b503d6107e2565b5081600654163b1515610732565b508160065416151561072c565b6040516020817f1626ba7e00000000000000000000000000000000000000000000000000000000938482528180610859888b8d6004850161114e565b03915afa600091816108aa575b50610872575b50610723565b7fffffffff0000000000000000000000000000000000000000000000000000000016146108a1575b898061086c565b6001945061089a565b6108c491925060203d6020116107fb576107ec8183611064565b908c610866565b600193506102f9565b5073ffffffffffffffffffffffffffffffffffffffff8060005416818816908114918215610904575b50506102f4565b6006541614905089806108fd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60046040517f203d82d8000000000000000000000000000000000000000000000000000000008152fd5b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d576020600154604051908152f35b3461010d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5760043567ffffffffffffffff811161010d576101056109fb6020923690600401610fb0565b906044359160243591611653565b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5760043560015481101561010d5773ffffffffffffffffffffffffffffffffffffffff60209160016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015416604051908152f35b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5773ffffffffffffffffffffffffffffffffffffffff610ada610f8d565b166000526003602052602060ff604060002054166040519015158152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d57602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b3461010d5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5760043573ffffffffffffffffffffffffffffffffffffffff8116810361010d5760843590811515820361010d57604080517f507944c4a2331482d8a308351f4ac04a5f96237b108e686c1d7e33075ad48df3602080830191825273ffffffffffffffffffffffffffffffffffffffff94909416928201929092526024356060820152604435608082015260643560a082015292151560c08085019190915283529091610c2660e082611064565b519020604051908152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d576020600454604051908152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d576020600554604051908152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5773ffffffffffffffffffffffffffffffffffffffff610d47610f8d565b1660005260026020526020604060002054604051908152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d57610d976115ea565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5773ffffffffffffffffffffffffffffffffffffffff610e48610f8d565b610e506115ea565b168015610eae576020817f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c73927fffffffffffffffffffffffff00000000000000000000000000000000000000006006541617600655604051908152a1005b60046040517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b3461010d5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5760243567ffffffffffffffff811161010d57610f35610f2c6020923690600401610f5f565b9060043561119a565b7fffffffff0000000000000000000000000000000000000000000000000000000060405191168152f35b9181601f8401121561010d5782359167ffffffffffffffff831161010d576020838186019501011161010d57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361010d57565b9181601f8401121561010d5782359167ffffffffffffffff831161010d5760208085019460a0850201011161010d57565b6080810190811067ffffffffffffffff821117610ffd57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610ffd57604052565b6040810190811067ffffffffffffffff821117610ffd57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610ffd57604052565b67ffffffffffffffff8111610ffd57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9291926110eb826110a5565b916110f96040519384611064565b82948184528183011161010d578281602093846000960137010152565b9081602091031261010d57517fffffffff000000000000000000000000000000000000000000000000000000008116810361010d5790565b9183606094601f927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0948652604060208701528160408701528686013760008582860101520116010190565b906111a96102da3685846110df565b506004811015610912571590816113a5575b5061137e5773ffffffffffffffffffffffffffffffffffffffff8060005416803b6112d1575b506006541692831515806112c7575b61121d575b505050507fffffffff0000000000000000000000000000000000000000000000000000000090565b61125b936020926040518096819482937f1626ba7e00000000000000000000000000000000000000000000000000000000988985526004850161114e565b03915afa600092816112a6575b50611275575b80806111f5565b7fffffffff000000000000000000000000000000000000000000000000000000008216146112a3578061126e565b90565b6112c091935060203d6020116107fb576107ec8183611064565b9138611268565b50833b15156111f0565b604051906020827f1626ba7e0000000000000000000000000000000000000000000000000000000092838252818061130e8b8a8c6004850161114e565b03915afa6000928161135d575b50611327575b506111e1565b7fffffffff000000000000000000000000000000000000000000000000000000008216146113555780611321565b935050505090565b61137791935060203d6020116107fb576107ec8183611064565b913861131b565b5050507f1626ba7e0000000000000000000000000000000000000000000000000000000090565b60005473ffffffffffffffffffffffffffffffffffffffff918216908216811492509082156113d7575b5050386111bb565b6006541614905038806113cf565b3573ffffffffffffffffffffffffffffffffffffffff8116810361010d5790565b35801515810361010d5790565b91908110156114235760a0020190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f0000000000000000000000000000000000000000000000000000000000000000461461158a577f42616c616e63657200000000000000000000000000000000000000000000000060206040516114a881611048565b6008815201527f310000000000000000000000000000000000000000000000000000000000000060206040516114dd81611048565b60018152015260405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f080ac0997b950d52c0dbe3d09be6b60bd4073597dcc1116238cadeaeddd6293f60408201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff821117610ffd5760405251902090565b7f000000000000000000000000000000000000000000000000000000000000000090565b81519190604183036115df576115d892506020820151906060604084015193015160001a90611812565b9192909190565b505060009160029190565b73ffffffffffffffffffffffffffffffffffffffff60005416330361160b57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b67ffffffffffffffff8111610ffd5760051b60200190565b91909261165f8461163b565b60409461166e86519283611064565b80825261167a8161163b565b602095868401927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080930136853760005b81811061174657505050908651918287810180955190939060005b8a82821061172f57505050506116e29203908101835282611064565b519020918451938401947f3e4e05ca93cbfca12befd1933c0f022d0fb04689f83cf61366f1874fc44d810a865284015260608301526080820152608081526117298161102c565b51902090565b8351875295860195879450909201916001016116c6565b88611752828486611413565b6117f38c6117e7611762846113e5565b9161176f60808601611406565b81517f507944c4a2331482d8a308351f4ac04a5f96237b108e686c1d7e33075ad48df388820190815273ffffffffffffffffffffffffffffffffffffffff90951660208601529686013560408501529085013560608085019190915290940135608083015292151560a08201529291829060c0850190565b03878101835282611064565b519020908651811015611423576001918a8260051b89010152016116ab565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116118a357926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa1561189757805173ffffffffffffffffffffffffffffffffffffffff81161561188e57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b73ffffffffffffffffffffffffffffffffffffffff1690611907600080836020829551910182875af13d1561197f573d906118e9826110a5565b916118f76040519384611064565b82523d84602084013e5b84611987565b908151918215159283611950575b50505061191f5750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b81929350906020918101031261197b5760200151908115918215036119785750388080611915565b80fd5b5080fd5b606090611901565b906119c6575080511561199c57805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580611a1e575b6119d7575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b156119cf56fea2646970667358221220ad5dbbaf4b4fbeb0391e85ea12072cdf1186df0ba37d173534e51cbb1bf2a88864736f6c63430008170033a2646970667358221220a87efb9c1f047d282a2c02cf3a8676d718f6b69249eecc51e18dce2bac0408b564736f6c63430008170033",
  "deployedBytecode": "0x60808060405260043610156200001457600080fd5b60003560e01c90816332bb00fb1462000d7857508063715018a61462000cd8578063735d99301462000c505780638da5cb5b1462000bfc57806399368bce1462000238578063cf6bf14914620001ac578063f2fde38b14620000c35763f923d360146200008057600080fd5b34620000be5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be576020600154604051908152f35b600080fd5b34620000be5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be57620000fe62000e5d565b6200010862000f6d565b73ffffffffffffffffffffffffffffffffffffffff8091169081156200017b57600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b34620000be5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be57620001e762000e5d565b6024359073ffffffffffffffffffffffffffffffffffffffff809116600052600260205260406000208054831015620000be57602092620002289162000e81565b9190546040519260031b1c168152f35b34620000be5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be5760043567ffffffffffffffff8111620000be576200028c90369060040162000e9a565b60243567ffffffffffffffff8111620000be57620002af90369060040162000e9a565b92909160443567ffffffffffffffff8111620000be57620002d590369060040162000e9a565b94909360643567ffffffffffffffff8111620000be5736602382011215620000be5767ffffffffffffffff816004013511620000be5736602460c083600401350283010111620000be5782841480159062000bf1575b62000bc7578381600401350362000bc75760005b84811062000b18575060005b84811062000859575050620003608362000f54565b9062000370604051928362000ece565b8382527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06200039f8562000f54565b01366020840137604051928361216d81011067ffffffffffffffff61216d86011117620005c95761216d6200106585393361216d8501908152608060208201819052810186905260a001908660005b8781106200080c57505061216d85018203604061216d870101528082527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111620000be57908493929160051b809260208301370160206040818301928261216d8701820301606061216d8801015284518094520192019060005b818110620007f25750505003906000f0938415620007e65760005b82811062000627578560015490680100000000000000009182811015620005c9576001810180600155811015620005f8577fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60173ffffffffffffffffffffffffffffffffffffffff82167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790553360005260026020526040600020805492831015620005c957826200054291600160209501815562000e81565b81549060031b9073ffffffffffffffffffffffffffffffffffffffff808516831b921b191617905560405173ffffffffffffffffffffffffffffffffffffffff821681527f1b655f6b1b4c6330e0fde0f84395dbb79296701c13a227618ea9f906bbacb8bb833392a273ffffffffffffffffffffffffffffffffffffffff60405191168152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6200063481838762000f10565b358015620007dc5773ffffffffffffffffffffffffffffffffffffffff620006686200066284878962000f10565b62000f21565b1690604051907f23b872dd00000000000000000000000000000000000000000000000000000000602083015233602483015273ffffffffffffffffffffffffffffffffffffffff891660448301526064820152606481528060a081011067ffffffffffffffff60a083011117620005c95760008160a082930160405260208151910182855af13d15620007ce573d67ffffffffffffffff8111620005c9576200075591604051916200074360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018462000ece565b82523d6000602084013e5b8362000fbf565b8051908115159182620007a7575b50506200077657506001905b0162000484565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b8192509060209181010312620000be5760200151801590811503620000be57888062000763565b62000755906060906200074e565b506001906200076f565b6040513d6000823e3d90fd5b825184528594506020938401939092019160010162000469565b909283359073ffffffffffffffffffffffffffffffffffffffff82168203620000be576020809173ffffffffffffffffffffffffffffffffffffffff6001941681520194019101620003ee565b6200086681898962000f10565b35801562000b0e576200087f6200066283888a62000f10565b620008938385600401356024870162000f43565b60608101359060ff82168203620000be5773ffffffffffffffffffffffffffffffffffffffff83163b15620000be5760a09060ff604051937fd505accf0000000000000000000000000000000000000000000000000000000085523360048601523060248601526020830135604486015260408301356064860152166084840152608081013560a4840152013560c482015260008160e4818373ffffffffffffffffffffffffffffffffffffffff87165af18015620007e65762000af4575b506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015260208160448173ffffffffffffffffffffffffffffffffffffffff86165afa8015620007e657839160009162000ab9575b501062000a8f57602073ffffffffffffffffffffffffffffffffffffffff916024604051809481937f70a08231000000000000000000000000000000000000000000000000000000008352336004840152165afa908115620007e65760009162000a57575b501062000a2d576001905b016200034b565b60046040517ff4d678b8000000000000000000000000000000000000000000000000000000008152fd5b90506020813d60201162000a86575b8162000a756020938362000ece565b81010312620000be57518a62000a1b565b3d915062000a66565b60046040517fa0bdddd2000000000000000000000000000000000000000000000000000000008152fd5b9150506020813d60201162000aeb575b8162000ad86020938362000ece565b81010312620000be578290518c620009b6565b3d915062000ac9565b67ffffffffffffffff8111620005c9576040528a62000952565b5060019062000a26565b62000b2581898962000f10565b35801562000bbd5762000b3e6200066283888a62000f10565b62000b528385600401356024870162000f43565b9062000b5e8262000f21565b73ffffffffffffffffffffffffffffffffffffffff91821691160362000b9357602001351062000a8f576001905b016200033f565b60046040517f58215db3000000000000000000000000000000000000000000000000000000008152fd5b5060019062000b8c565b60046040517fa24a13a6000000000000000000000000000000000000000000000000000000008152fd5b50868414156200032b565b34620000be5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b34620000be5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be57600435600154811015620000be5773ffffffffffffffffffffffffffffffffffffffff60209160016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015416604051908152f35b34620000be5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be5762000d1362000f6d565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34620000be576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620000be579073ffffffffffffffffffffffffffffffffffffffff918262000dcc62000e5d565b16600052600281526040600020908154808452818401908193600052826000209060005b81811062000e46575050508362000e0991038462000ece565b60405192818401908285525180915260408401929160005b82811062000e2f5785850386f35b835187168552938101939281019260010162000e21565b825488168452928401926001928301920162000df0565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203620000be57565b8054821015620005f85760005260206000200190600090565b9181601f84011215620000be5782359167ffffffffffffffff8311620000be576020808501948460051b010111620000be57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117620005c957604052565b9190811015620005f85760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff81168103620000be5790565b9190811015620005f85760c0020190565b67ffffffffffffffff8111620005c95760051b60200190565b73ffffffffffffffffffffffffffffffffffffffff60005416330362000f8f57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b9062001000575080511562000fd657805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806200105a575b62001013575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b156200100a56fe60c0806040523462000338576200216d8038038091620000208285620005a2565b8339810160808282031262000338576200003a82620005c6565b60208301516001600160401b0381116200033857830182601f8201121562000338578051936200006a85620005db565b916200007a6040519384620005a2565b858352602083016020819760051b830101918683116200033857602001905b8282106200056b5750505060408101516001600160401b038111620003385784620000c6918301620005f3565b60608201519094906001600160401b0381116200033857620000e99201620005f3565b906001600160a01b038316156200055257600080546001600160a01b031981166001600160a01b03868116918217845560405193919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a38151855181149081159162000545575b5062000536575060009060005b81518110156200039f576001600160a01b036200018082846200065c565b51169283156200038d5760018054680100000000000000008110156200033d578181018083558110156200037757816000526020600020018560018060a01b031982541617905584600052600360205260406000209060ff19825416179055620001eb82886200065c565b518460005260026020526040600020556200020782886200065c565b5181018091116200036157926200021f82866200065c565b5162000230575b5060010162000162565b6200023c82866200065c565b516040516323b872dd60e01b60208201526001600160a01b03881660248201523060448201526064808201929092529081526001600160401b0360a08201908111908211176200033d5760008160a082930160405260208151910182855af13d1562000353573d6001600160401b0381116200033d57620002e39160405191620002d16020601f19601f8401160184620005a2565b82523d6000602084013e5b83620006a7565b805190811515918262000311575b505015620002265760249060405190635274afe760e01b82526004820152fd5b819250906020918101031262000338576020015180159081150362000338573880620002f1565b600080fd5b634e487b7160e01b600052604160045260246000fd5b620002e390606090620002dc565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405163d92e233d60e01b8152600490fd5b42600455600680546001600160a01b0319166001600160a01b0387161790554660a0526040518490889088908590600890602090620003de8162000586565b82815201672130b630b731b2b960c11b81522092604051620004008162000586565b60016020819282815201603160f81b815220926040519360208501967f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8852604086015260608501524660808501523060a085015260a0845260c084019584871060018060401b038811176200033d5760408790528451902060805260608652516101208401819052610140840192919060005b8181106200051757505050507f4f53ac031d4fe7e2706b2eb17a7c80a7863819c0fb6c71d807d9176f3b6fa14794620004df620004f19260bf1995868683030160e087015262000671565b90848483030161010085015262000671565b030190a1604051611a5d90816200071082396080518161158c015260a051816114540152f35b83516001600160a01b0316855260209485019490930192820162000494565b63512509d360e11b8152600490fd5b9050835114153862000155565b604051631e4fbdf760e01b815260006004820152602490fd5b602080916200057a84620005c6565b81520191019062000099565b604081019081106001600160401b038211176200033d57604052565b601f909101601f19168101906001600160401b038211908210176200033d57604052565b51906001600160a01b03821682036200033857565b6001600160401b0381116200033d5760051b60200190565b9080601f8301121562000338578151906020916200061181620005db565b93620006216040519586620005a2565b81855260208086019260051b8201019283116200033857602001905b8282106200064c575050505090565b815181529083019083016200063d565b8051821015620003775760209160051b010190565b90815180825260208080930193019160005b82811062000692575050505090565b83518552938101939281019260010162000683565b90620006d05750805115620006be57805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158062000705575b620006e3575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15620006da56fe6080604052600436101561001257600080fd5b60003560e01c80631626ba7e14610ed8578063669ed93514610dfc578063715018a614610d605780638375547814610cfb5780638da5cb5b14610ca9578063affed0e014610c6d578063b83d815714610c31578063be50016814610b4a578063c771909c14610af8578063c87fa42a14610a8e578063cf35bdd014610a09578063d1b56227146109a7578063eafe7a741461096b578063f27431e7146101f4578063f2fde38b146101125763f698da25146100cc57600080fd5b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d576020610105611452565b604051908152f35b600080fd5b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d57610149610f8d565b6101516115ea565b73ffffffffffffffffffffffffffffffffffffffff8091169081156101c357600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b3461010d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5767ffffffffffffffff60043581811161010d57610244903690600401610fb0565b90916024359060443590811161010d57610262903690600401610f5f565b91908142116109415761027a60055492838688611653565b610282611452565b906040519060208201927f1901000000000000000000000000000000000000000000000000000000000000845260228301526042820152604281526102c681610fe1565b5190206000916102e06102da3687846110df565b836115ae565b5060048197929710156109125715806108d4575b6108cb575b8315610701575b505050156106d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461042a576001016005554260045560005b828110610459575050600554917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830192831161042a5760405191806040840133855260406020860152526060830191906000905b8082106103c157857fc7da47883a0e724423bc819cb5237c240de1657791ca64962c54f9c1d55799af86860387a2005b909192833573ffffffffffffffffffffffffffffffffffffffff811680910361010d5781526020840135602082015260408401356040820152606084013560608201526080908185013580151580910361010d5760019282015260a08091019401920190610391565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610464818486611413565b9073ffffffffffffffffffffffffffffffffffffffff610483836113e5565b16600052600360205260ff60406000205416156106ad5760408201358015610609579160019273ffffffffffffffffffffffffffffffffffffffff6104c7836113e5565b1660005260026020526040600020555b6060810135806104ea575b50500161033c565b6104f660808301611406565b156105875773ffffffffffffffffffffffffffffffffffffffff61051c610580936113e5565b16604051917f23b872dd00000000000000000000000000000000000000000000000000000000602084015273ffffffffffffffffffffffffffffffffffffffff8716602484015230604484015260649081840152825261057b8261102c565b6118af565b85806104e2565b73ffffffffffffffffffffffffffffffffffffffff6105a8610604936113e5565b1673ffffffffffffffffffffffffffffffffffffffff6000541691604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152602484015260448301526044825261057b82610fe1565b610580565b506020820135918261061f575b600192506104d7565b73ffffffffffffffffffffffffffffffffffffffff61063d826113e5565b166000526002806020526040600020549084808301126000831290801582169115161761042a5760008560019684019301126106a4575b73ffffffffffffffffffffffffffffffffffffffff610692846113e5565b16600052602052604060002055610616565b60009150610674565b60046040517fc891add2000000000000000000000000000000000000000000000000000000008152fd5b60046040517f5cd5d233000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff908160005416803b61081d575b50841580610810575b80610802575b61073d575b50610300565b6107809260209260065416906040518095819482937f1626ba7e00000000000000000000000000000000000000000000000000000000998a85526004850161114e565b03915afa600091816107d1575b5061079a575b8080610737565b7fffffffff0000000000000000000000000000000000000000000000000000000016146107c9575b8580610793565b5060016107c2565b6107f491925060203d6020116107fb575b6107ec8183611064565b810190611116565b908861078d565b503d6107e2565b5081600654163b1515610732565b508160065416151561072c565b6040516020817f1626ba7e00000000000000000000000000000000000000000000000000000000938482528180610859888b8d6004850161114e565b03915afa600091816108aa575b50610872575b50610723565b7fffffffff0000000000000000000000000000000000000000000000000000000016146108a1575b898061086c565b6001945061089a565b6108c491925060203d6020116107fb576107ec8183611064565b908c610866565b600193506102f9565b5073ffffffffffffffffffffffffffffffffffffffff8060005416818816908114918215610904575b50506102f4565b6006541614905089806108fd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60046040517f203d82d8000000000000000000000000000000000000000000000000000000008152fd5b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d576020600154604051908152f35b3461010d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5760043567ffffffffffffffff811161010d576101056109fb6020923690600401610fb0565b906044359160243591611653565b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5760043560015481101561010d5773ffffffffffffffffffffffffffffffffffffffff60209160016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015416604051908152f35b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5773ffffffffffffffffffffffffffffffffffffffff610ada610f8d565b166000526003602052602060ff604060002054166040519015158152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d57602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b3461010d5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5760043573ffffffffffffffffffffffffffffffffffffffff8116810361010d5760843590811515820361010d57604080517f507944c4a2331482d8a308351f4ac04a5f96237b108e686c1d7e33075ad48df3602080830191825273ffffffffffffffffffffffffffffffffffffffff94909416928201929092526024356060820152604435608082015260643560a082015292151560c08085019190915283529091610c2660e082611064565b519020604051908152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d576020600454604051908152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d576020600554604051908152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5773ffffffffffffffffffffffffffffffffffffffff610d47610f8d565b1660005260026020526020604060002054604051908152f35b3461010d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d57610d976115ea565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461010d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5773ffffffffffffffffffffffffffffffffffffffff610e48610f8d565b610e506115ea565b168015610eae576020817f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c73927fffffffffffffffffffffffff00000000000000000000000000000000000000006006541617600655604051908152a1005b60046040517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b3461010d5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010d5760243567ffffffffffffffff811161010d57610f35610f2c6020923690600401610f5f565b9060043561119a565b7fffffffff0000000000000000000000000000000000000000000000000000000060405191168152f35b9181601f8401121561010d5782359167ffffffffffffffff831161010d576020838186019501011161010d57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361010d57565b9181601f8401121561010d5782359167ffffffffffffffff831161010d5760208085019460a0850201011161010d57565b6080810190811067ffffffffffffffff821117610ffd57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610ffd57604052565b6040810190811067ffffffffffffffff821117610ffd57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610ffd57604052565b67ffffffffffffffff8111610ffd57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9291926110eb826110a5565b916110f96040519384611064565b82948184528183011161010d578281602093846000960137010152565b9081602091031261010d57517fffffffff000000000000000000000000000000000000000000000000000000008116810361010d5790565b9183606094601f927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0948652604060208701528160408701528686013760008582860101520116010190565b906111a96102da3685846110df565b506004811015610912571590816113a5575b5061137e5773ffffffffffffffffffffffffffffffffffffffff8060005416803b6112d1575b506006541692831515806112c7575b61121d575b505050507fffffffff0000000000000000000000000000000000000000000000000000000090565b61125b936020926040518096819482937f1626ba7e00000000000000000000000000000000000000000000000000000000988985526004850161114e565b03915afa600092816112a6575b50611275575b80806111f5565b7fffffffff000000000000000000000000000000000000000000000000000000008216146112a3578061126e565b90565b6112c091935060203d6020116107fb576107ec8183611064565b9138611268565b50833b15156111f0565b604051906020827f1626ba7e0000000000000000000000000000000000000000000000000000000092838252818061130e8b8a8c6004850161114e565b03915afa6000928161135d575b50611327575b506111e1565b7fffffffff000000000000000000000000000000000000000000000000000000008216146113555780611321565b935050505090565b61137791935060203d6020116107fb576107ec8183611064565b913861131b565b5050507f1626ba7e0000000000000000000000000000000000000000000000000000000090565b60005473ffffffffffffffffffffffffffffffffffffffff918216908216811492509082156113d7575b5050386111bb565b6006541614905038806113cf565b3573ffffffffffffffffffffffffffffffffffffffff8116810361010d5790565b35801515810361010d5790565b91908110156114235760a0020190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f0000000000000000000000000000000000000000000000000000000000000000461461158a577f42616c616e63657200000000000000000000000000000000000000000000000060206040516114a881611048565b6008815201527f310000000000000000000000000000000000000000000000000000000000000060206040516114dd81611048565b60018152015260405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f080ac0997b950d52c0dbe3d09be6b60bd4073597dcc1116238cadeaeddd6293f60408201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff821117610ffd5760405251902090565b7f000000000000000000000000000000000000000000000000000000000000000090565b81519190604183036115df576115d892506020820151906060604084015193015160001a90611812565b9192909190565b505060009160029190565b73ffffffffffffffffffffffffffffffffffffffff60005416330361160b57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b67ffffffffffffffff8111610ffd5760051b60200190565b91909261165f8461163b565b60409461166e86519283611064565b80825261167a8161163b565b602095868401927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080930136853760005b81811061174657505050908651918287810180955190939060005b8a82821061172f57505050506116e29203908101835282611064565b519020918451938401947f3e4e05ca93cbfca12befd1933c0f022d0fb04689f83cf61366f1874fc44d810a865284015260608301526080820152608081526117298161102c565b51902090565b8351875295860195879450909201916001016116c6565b88611752828486611413565b6117f38c6117e7611762846113e5565b9161176f60808601611406565b81517f507944c4a2331482d8a308351f4ac04a5f96237b108e686c1d7e33075ad48df388820190815273ffffffffffffffffffffffffffffffffffffffff90951660208601529686013560408501529085013560608085019190915290940135608083015292151560a08201529291829060c0850190565b03878101835282611064565b519020908651811015611423576001918a8260051b89010152016116ab565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116118a357926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa1561189757805173ffffffffffffffffffffffffffffffffffffffff81161561188e57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b73ffffffffffffffffffffffffffffffffffffffff1690611907600080836020829551910182875af13d1561197f573d906118e9826110a5565b916118f76040519384611064565b82523d84602084013e5b84611987565b908151918215159283611950575b50505061191f5750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b81929350906020918101031261197b5760200151908115918215036119785750388080611915565b80fd5b5080fd5b606090611901565b906119c6575080511561199c57805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580611a1e575b6119d7575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b156119cf56fea2646970667358221220ad5dbbaf4b4fbeb0391e85ea12072cdf1186df0ba37d173534e51cbb1bf2a88864736f6c63430008170033a2646970667358221220a87efb9c1f047d282a2c02cf3a8676d718f6b69249eecc51e18dce2bac0408b564736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BalancerFactory (minimal)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBalancer(address[],uint256[],uint256[],(address,uint256,uint256,uint8,bytes32,bytes32)[])": {
        "notice": "Deploy a new Balancer and fund it in the same tx using EIP-2612 permits per token. The permits authorize this Factory as spender; then the Factory transfers to the Balancer. This avoids needing to know the Balancer address in advance and works without CREATE2. Requirements: - assets.length == targetPercBps.length == initialDepositAmounts.length - permits.length == assets.length and aligned by index when amount > 0 - each token supports EIP-2612"
      }
    },
    "notice": "Deploys Balancer instances with initial deposits. No automation, no oracles.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/portfolio/factory/BalancerFactory.sol:BalancerFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5343,
        "contract": "contracts/portfolio/factory/BalancerFactory.sol:BalancerFactory",
        "label": "allBalancers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5348,
        "contract": "contracts/portfolio/factory/BalancerFactory.sol:BalancerFactory",
        "label": "userBalancers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}