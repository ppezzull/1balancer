{
  "address": "0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf",
  "abi": [
    {
      "inputs": [],
      "name": "LOWER_BOUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPPER_BOUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stablecoinValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nLevels",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gridRangeBps",
          "type": "uint256"
        }
      ],
      "name": "calculateGridParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "capital",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nLevels",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minOrderSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxOrderSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gridRangeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pegPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct StablecoinGridLib.GridParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stablecoins",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "capital",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nLevels",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minOrderSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxOrderSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gridRangeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pegPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct StablecoinGridLib.GridParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "generateGridOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct StablecoinGridLib.Order[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "isPriceWithinBounds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d3dd64ea83eac8a905438131765c7d446fdf331e064b74d2781eeb625cc93f8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf",
    "transactionIndex": 0,
    "gasUsed": "619986",
    "logsBloom": "0x
    "blockHash": "0x161a034afef25779644f36fa2d3819ad1c522fac98de84f0cef45c9fea25c2b0",
    "transactionHash": "0x6d3dd64ea83eac8a905438131765c7d446fdf331e064b74d2781eeb625cc93f8",
    "logs": [],
    "blockNumber": 51,
    "cumulativeGasUsed": "619986",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e736b96b87eaf292c5db7ad7ea0f1279",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LOWER_BOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPPER_BOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLevels\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gridRangeBps\",\"type\":\"uint256\"}],\"name\":\"calculateGridParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLevels\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOrderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOrderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gridRangeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pegPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct StablecoinGridLib.GridParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stablecoins\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLevels\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOrderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOrderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gridRangeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pegPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct StablecoinGridLib.GridParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"generateGridOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct StablecoinGridLib.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"isPriceWithinBounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@ppezzull\",\"details\":\"Grid trading logic for stablecoins extracted from StableLimit\",\"kind\":\"dev\",\"methods\":{\"calculateGridParams(uint256,uint256,uint256)\":{\"details\":\"Calculate grid order parameters\"},\"generateGridOrders(address[],StablecoinGridLib.GridParams)\":{\"details\":\"Generate grid orders for stablecoin pairs\"},\"isPriceWithinBounds(uint256)\":{\"details\":\"Check if price is within acceptable bounds\"},\"validateStablecoinPair(address,address,mapping(address => bool) storage)\":{\"details\":\"Validate stablecoin pair for grid trading\"}},\"title\":\"StablecoinGridLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/portfolio/libraries/StablecoinGridLib.sol\":\"StablecoinGridLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/portfolio/libraries/StablecoinGridLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title StablecoinGridLib\\n * @dev Grid trading logic for stablecoins extracted from StableLimit\\n * @author @ppezzull\\n */\\nlibrary StablecoinGridLib {\\n    struct Order {\\n        address fromToken;\\n        address toToken;\\n        uint256 amount;\\n        uint256 limitPrice; // Price with 1e18 precision\\n    }\\n\\n    struct GridParams {\\n        uint256 capital;\\n        uint256 nLevels;\\n        uint256 minOrderSize;\\n        uint256 maxOrderSize;\\n        uint256 gridRangeBps;\\n        uint256 pegPrice;\\n    }\\n\\n    // Constants\\n    uint256 private constant PRICE_PRECISION = 1e18;\\n    uint256 private constant USDC_DECIMALS = 6;\\n    uint256 private constant DAI_DECIMALS = 18;\\n\\n    // Price deviation bounds (1e18 representation)\\n    uint256 public constant LOWER_BOUND = 998 * 1e15; // 0.998\\n    uint256 public constant UPPER_BOUND = 1002 * 1e15; // 1.002\\n\\n    /**\\n     * @dev Generate grid orders for stablecoin pairs\\n     */\\n    function generateGridOrders(\\n        address[] memory stablecoins,\\n        GridParams memory params\\n    ) external pure returns (Order[] memory orders) {\\n        if (params.nLevels == 0) return new Order[](0);\\n\\n        uint256 nPairs = stablecoins.length > 1 ? stablecoins.length : 0;\\n        if (nPairs < 2) return new Order[](0);\\n\\n        uint256 nLevelsAdjusted = params.nLevels;\\n        uint256 baseOrderAmount = params.capital / (params.nLevels * 2 * (nPairs - 1));\\n\\n        if (baseOrderAmount < params.minOrderSize) {\\n            nLevelsAdjusted = params.capital / (params.minOrderSize * 2 * (nPairs - 1));\\n            if (nLevelsAdjusted == 0) nLevelsAdjusted = 1;\\n        } else if (baseOrderAmount > params.maxOrderSize) {\\n            nLevelsAdjusted = params.capital / (params.maxOrderSize * 2 * (nPairs - 1));\\n            uint256 maxLevels = 100;\\n            if (nLevelsAdjusted > maxLevels) nLevelsAdjusted = maxLevels;\\n        }\\n\\n        if (nLevelsAdjusted == 0) return new Order[](0);\\n\\n        uint256 finalOrderAmount = params.capital / (nLevelsAdjusted * 2 * (nPairs - 1));\\n        orders = new Order[](nLevelsAdjusted * 2 * (nPairs - 1));\\n        uint256 idx = 0;\\n\\n        for (uint256 pair = 0; pair < nPairs - 1; pair++) {\\n            address fromToken = stablecoins[pair];\\n            address toToken = stablecoins[(pair + 1) % nPairs];\\n            for (uint256 i = 0; i < nLevelsAdjusted; i++) {\\n                uint256 offset = ((((i + 1) * PRICE_PRECISION) / nLevelsAdjusted) * params.gridRangeBps) / 10000;\\n                orders[idx++] = Order(fromToken, toToken, finalOrderAmount, params.pegPrice + offset);\\n                orders[idx++] = Order(toToken, fromToken, finalOrderAmount, params.pegPrice - offset);\\n            }\\n        }\\n\\n        return orders;\\n    }\\n\\n    /**\\n     * @dev Check if price is within acceptable bounds\\n     */\\n    function isPriceWithinBounds(uint256 price) external pure returns (bool) {\\n        return price >= LOWER_BOUND && price <= UPPER_BOUND;\\n    }\\n\\n    /**\\n     * @dev Calculate grid order parameters\\n     */\\n    function calculateGridParams(\\n        uint256 stablecoinValue,\\n        uint256 nLevels,\\n        uint256 gridRangeBps\\n    ) external pure returns (GridParams memory params) {\\n        params.capital = stablecoinValue / 10; // Use 10% of stablecoin value\\n        params.nLevels = nLevels;\\n        params.minOrderSize = 10 * (10 ** USDC_DECIMALS); // 10 USDC\\n        params.maxOrderSize = params.capital;\\n        params.gridRangeBps = gridRangeBps;\\n        params.pegPrice = 1 * PRICE_PRECISION; // 1 USD for stablecoins\\n    }\\n\\n    /**\\n     * @dev Validate stablecoin pair for grid trading\\n     */\\n    function validateStablecoinPair(\\n        address token1,\\n        address token2,\\n        mapping(address => bool) storage isStablecoin\\n    ) external view returns (bool) {\\n        return isStablecoin[token1] && isStablecoin[token2] && token1 != token2;\\n    }\\n} \",\"keccak256\":\"0x000911067fcede7f92b982a1713c720d32c2aea3a969b65e8761901e30a5b9b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a57610a449081610020823930815050f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182636198e135146103e157508163ac58423a1461033f578163aed39d4c146102de578163c1be912e14610143578163dba0a0ed146100a5575063de719b761461006757600080fd5b817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a15760209051670de7d1b0f0f100008152f35b5080fd5b905060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013f5760c092506100dd61041c565b9160208301908084019060608501916080860193600a60a0880196350480975260243581526298968082528684526044358552670de0b6b3a76400008652825196875251602087015251908501525160608401525160808301525160a0820152f35b8280fd5b838360e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a15782359267ffffffffffffffff841161013f573660238501121561013f57830135926101a161019c856104cf565b61048b565b908194808352602460208094019160051b830101913683116102da57602401905b8282106102aa5750505060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc36011261013f5761020193929361041c565b906024358252604435818301526064358383015261023b606092608435606082015260809560a435608083015260c43560a08301526105f6565b9280519482860193838752855180955283838801960197925b8584106102615787870388f35b8851805173ffffffffffffffffffffffffffffffffffffffff90811689528187015116888701528082015188830152820151878301529784019795820195600190930192610254565b813573ffffffffffffffffffffffffffffffffffffffff811681036102d65781529083019083016101c2565b8680fd5b8580fd5b905060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013f57602092503590670dd99bb65dd70000821015918261032c575b50519015158152f35b670de7d1b0f0f100001015915038610323565b83915060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a157359173ffffffffffffffffffffffffffffffffffffffff80841680940361013f5760243590811680910361013f57836020948452604435855260ff838520541693846103cf575b50836103c4575b5050519015158152f35b1415915083806103ba565b8281528390205460ff169350856103b3565b8490817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a15780670dd99bb65dd7000060209252f35b6040519060c0820182811067ffffffffffffffff82111761043c57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906080820182811067ffffffffffffffff82111761043c57604052565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761043c57604052565b67ffffffffffffffff811161043c5760051b60200190565b6040516020810181811067ffffffffffffffff82111761043c576040526000815290565b8181029291811591840414171561051e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8115610557570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b805182101561059a5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461051e5760010190565b60208201805115610a03578151600060018211156109fb5750905b600282106109ef5751918351928060011b8181046002148215171561051e57837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810111948561051e5761068b610691927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87019061050b565b9061054d565b9060408601918251811060001461097357505084519051908160011b918083046002149015171561051e578461051e5761068b6106f1927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86019061050b565b90811561096a575b811561095a5784518260011b9483860460020361051e5761051e576107476107719161068b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87018861050b565b947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85019061050b565b947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107ab6107a261019c896104cf565b978089526104cf565b0160005b81811061092b57505060009060005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860181106107f1575050505050505090565b73ffffffffffffffffffffffffffffffffffffffff806108118387610586565b5116906001830180841161051e5788156105575788610831910687610586565b511660005b878110610848575050506001016107be565b6001810180821161051e57670de0b6b3a76400009081810291818304149015171561051e5761088861087d8a6127109361054d565b60808801519061050b565b049060a08601805183810180911161051e576020988e6108d7928f886108ac61046b565b9d8e8c8152015260408d015260608c01526108c6826105c9565b9a6108d18383610586565b52610586565b505191828181031161051e578c978c610924926001956108f561046b565b92888452896020850152604084015203606082015261091d82610917816105c9565b9b610586565b528d610586565b5001610836565b60209061093661046b565b60008152600083820152600060408201526000606082015282828b010152016107af565b50505050506109676104e7565b90565b600191506106f9565b90929150606086015180911161098a575b506106f9565b9350905083518360011b938085046002149015171561051e576109d69061068b6000957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86019061050b565b90606482116109e6575b38610984565b606491506109e0565b505050506109676104e7565b905090610611565b5050506109676104e756fea26469706673582212204fed3ed494d6d33643c61d8785d3691238f37a0994eef6c1fc9db6169c82d1b664736f6c63430008170033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c9182636198e135146103e157508163ac58423a1461033f578163aed39d4c146102de578163c1be912e14610143578163dba0a0ed146100a5575063de719b761461006757600080fd5b817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a15760209051670de7d1b0f0f100008152f35b5080fd5b905060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013f5760c092506100dd61041c565b9160208301908084019060608501916080860193600a60a0880196350480975260243581526298968082528684526044358552670de0b6b3a76400008652825196875251602087015251908501525160608401525160808301525160a0820152f35b8280fd5b838360e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a15782359267ffffffffffffffff841161013f573660238501121561013f57830135926101a161019c856104cf565b61048b565b908194808352602460208094019160051b830101913683116102da57602401905b8282106102aa5750505060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc36011261013f5761020193929361041c565b906024358252604435818301526064358383015261023b606092608435606082015260809560a435608083015260c43560a08301526105f6565b9280519482860193838752855180955283838801960197925b8584106102615787870388f35b8851805173ffffffffffffffffffffffffffffffffffffffff90811689528187015116888701528082015188830152820151878301529784019795820195600190930192610254565b813573ffffffffffffffffffffffffffffffffffffffff811681036102d65781529083019083016101c2565b8680fd5b8580fd5b905060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013f57602092503590670dd99bb65dd70000821015918261032c575b50519015158152f35b670de7d1b0f0f100001015915038610323565b83915060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a157359173ffffffffffffffffffffffffffffffffffffffff80841680940361013f5760243590811680910361013f57836020948452604435855260ff838520541693846103cf575b50836103c4575b5050519015158152f35b1415915083806103ba565b8281528390205460ff169350856103b3565b8490817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a15780670dd99bb65dd7000060209252f35b6040519060c0820182811067ffffffffffffffff82111761043c57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906080820182811067ffffffffffffffff82111761043c57604052565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761043c57604052565b67ffffffffffffffff811161043c5760051b60200190565b6040516020810181811067ffffffffffffffff82111761043c576040526000815290565b8181029291811591840414171561051e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8115610557570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b805182101561059a5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461051e5760010190565b60208201805115610a03578151600060018211156109fb5750905b600282106109ef5751918351928060011b8181046002148215171561051e57837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810111948561051e5761068b610691927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87019061050b565b9061054d565b9060408601918251811060001461097357505084519051908160011b918083046002149015171561051e578461051e5761068b6106f1927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86019061050b565b90811561096a575b811561095a5784518260011b9483860460020361051e5761051e576107476107719161068b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87018861050b565b947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85019061050b565b947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107ab6107a261019c896104cf565b978089526104cf565b0160005b81811061092b57505060009060005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860181106107f1575050505050505090565b73ffffffffffffffffffffffffffffffffffffffff806108118387610586565b5116906001830180841161051e5788156105575788610831910687610586565b511660005b878110610848575050506001016107be565b6001810180821161051e57670de0b6b3a76400009081810291818304149015171561051e5761088861087d8a6127109361054d565b60808801519061050b565b049060a08601805183810180911161051e576020988e6108d7928f886108ac61046b565b9d8e8c8152015260408d015260608c01526108c6826105c9565b9a6108d18383610586565b52610586565b505191828181031161051e578c978c610924926001956108f561046b565b92888452896020850152604084015203606082015261091d82610917816105c9565b9b610586565b528d610586565b5001610836565b60209061093661046b565b60008152600083820152600060408201526000606082015282828b010152016107af565b50505050506109676104e7565b90565b600191506106f9565b90929150606086015180911161098a575b506106f9565b9350905083518360011b938085046002149015171561051e576109d69061068b6000957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86019061050b565b90606482116109e6575b38610984565b606491506109e0565b505050506109676104e7565b905090610611565b5050506109676104e756fea26469706673582212204fed3ed494d6d33643c61d8785d3691238f37a0994eef6c1fc9db6169c82d1b664736f6c63430008170033",
  "devdoc": {
    "author": "@ppezzull",
    "details": "Grid trading logic for stablecoins extracted from StableLimit",
    "kind": "dev",
    "methods": {
      "calculateGridParams(uint256,uint256,uint256)": {
        "details": "Calculate grid order parameters"
      },
      "generateGridOrders(address[],StablecoinGridLib.GridParams)": {
        "details": "Generate grid orders for stablecoin pairs"
      },
      "isPriceWithinBounds(uint256)": {
        "details": "Check if price is within acceptable bounds"
      },
      "validateStablecoinPair(address,address,mapping(address => bool) storage)": {
        "details": "Validate stablecoin pair for grid trading"
      }
    },
    "title": "StablecoinGridLib",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}