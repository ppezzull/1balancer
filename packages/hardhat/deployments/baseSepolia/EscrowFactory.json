{
  "address": "0x135aCf86351F2113726318dE6b4ca66FA90d54Fd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_limitOrderProtocol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EscrowAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedDeployment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidImmutables",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSafetyDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedCaller",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hashlockHash",
          "type": "bytes32"
        }
      ],
      "name": "DstEscrowCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hashlockHash",
          "type": "bytes32"
        }
      ],
      "name": "SrcEscrowCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORCHESTRATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESOLVER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyDeposit",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hashlockHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcPublicWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcDeployedAt",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstDeployedAt",
                  "type": "uint32"
                }
              ],
              "internalType": "struct TimelocksLib.Timelocks",
              "name": "timelocks",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutablesLib.Immutables",
          "name": "immutables",
          "type": "tuple"
        }
      ],
      "name": "addressOfEscrowDst",
      "outputs": [
        {
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyDeposit",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hashlockHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcPublicWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcDeployedAt",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstDeployedAt",
                  "type": "uint32"
                }
              ],
              "internalType": "struct TimelocksLib.Timelocks",
              "name": "timelocks",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutablesLib.Immutables",
          "name": "immutables",
          "type": "tuple"
        }
      ],
      "name": "addressOfEscrowSrc",
      "outputs": [
        {
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyDeposit",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hashlockHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcPublicWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcDeployedAt",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstDeployedAt",
                  "type": "uint32"
                }
              ],
              "internalType": "struct TimelocksLib.Timelocks",
              "name": "timelocks",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutablesLib.Immutables",
          "name": "immutables",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "srcCancellationTimestamp",
          "type": "uint256"
        }
      ],
      "name": "createDstEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyDeposit",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hashlockHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcPublicWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcDeployedAt",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstDeployedAt",
                  "type": "uint32"
                }
              ],
              "internalType": "struct TimelocksLib.Timelocks",
              "name": "timelocks",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutablesLib.Immutables",
          "name": "srcImmutables",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyDeposit",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hashlockHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcPublicWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcDeployedAt",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstDeployedAt",
                  "type": "uint32"
                }
              ],
              "internalType": "struct TimelocksLib.Timelocks",
              "name": "timelocks",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutablesLib.Immutables",
          "name": "dstImmutables",
          "type": "tuple"
        }
      ],
      "name": "createEscrowPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "srcEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstEscrow",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyDeposit",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hashlockHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcPublicWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "srcDeployedAt",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstWithdrawal",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstCancellation",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "dstDeployedAt",
                  "type": "uint32"
                }
              ],
              "internalType": "struct TimelocksLib.Timelocks",
              "name": "timelocks",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutablesLib.Immutables",
          "name": "immutables",
          "type": "tuple"
        }
      ],
      "name": "createSrcEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowDstImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowSrcImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "escrows",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "offsets",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "interactions",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILimitOrderProtocol.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        }
      ],
      "name": "fillOrderWithEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "getEscrowPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "srcEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstEscrow",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "orchestrator",
          "type": "address"
        }
      ],
      "name": "grantOrchestratorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isValidEscrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitOrderProtocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        }
      ],
      "name": "verifyEscrowStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdff4ffa361a75178d07dfe1facf3314e184000c10615eb884c5aaec0e0219396",
  "receipt": {
    "to": null,
    "from": "0x3861C9ff421C9b2Af29811B5030122E0c23Ea74C",
    "contractAddress": "0x135aCf86351F2113726318dE6b4ca66FA90d54Fd",
    "transactionIndex": 6,
    "gasUsed": "5258314",
    "logsBloom": "0x
    "blockHash": "0xe35b389c7a428b40032c3e77c73e8527f53d0bbf99500ce0bf6f996210a44a44",
    "transactionHash": "0xdff4ffa361a75178d07dfe1facf3314e184000c10615eb884c5aaec0e0219396",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 29189866,
        "transactionHash": "0xdff4ffa361a75178d07dfe1facf3314e184000c10615eb884c5aaec0e0219396",
        "address": "0x135aCf86351F2113726318dE6b4ca66FA90d54Fd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003861c9ff421c9b2af29811b5030122e0c23ea74c",
          "0x0000000000000000000000003861c9ff421c9b2af29811b5030122e0c23ea74c"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xe35b389c7a428b40032c3e77c73e8527f53d0bbf99500ce0bf6f996210a44a44"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 29189866,
        "transactionHash": "0xdff4ffa361a75178d07dfe1facf3314e184000c10615eb884c5aaec0e0219396",
        "address": "0x135aCf86351F2113726318dE6b4ca66FA90d54Fd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe098e2e7d2d4d3ca0e3877ceaaf3cdfbd47483f6699688ad12b1d6732deef10b",
          "0x0000000000000000000000003861c9ff421c9b2af29811b5030122e0c23ea74c",
          "0x0000000000000000000000003861c9ff421c9b2af29811b5030122e0c23ea74c"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xe35b389c7a428b40032c3e77c73e8527f53d0bbf99500ce0bf6f996210a44a44"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 29189866,
        "transactionHash": "0xdff4ffa361a75178d07dfe1facf3314e184000c10615eb884c5aaec0e0219396",
        "address": "0x135aCf86351F2113726318dE6b4ca66FA90d54Fd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005938297bfdeef3ac56eb4198e0b484b2a0b3add8",
          "0x0000000000000000000000003861c9ff421c9b2af29811b5030122e0c23ea74c"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xe35b389c7a428b40032c3e77c73e8527f53d0bbf99500ce0bf6f996210a44a44"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 29189866,
        "transactionHash": "0xdff4ffa361a75178d07dfe1facf3314e184000c10615eb884c5aaec0e0219396",
        "address": "0x135aCf86351F2113726318dE6b4ca66FA90d54Fd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe098e2e7d2d4d3ca0e3877ceaaf3cdfbd47483f6699688ad12b1d6732deef10b",
          "0x0000000000000000000000005938297bfdeef3ac56eb4198e0b484b2a0b3add8",
          "0x0000000000000000000000003861c9ff421c9b2af29811b5030122e0c23ea74c"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xe35b389c7a428b40032c3e77c73e8527f53d0bbf99500ce0bf6f996210a44a44"
      }
    ],
    "blockNumber": 29189866,
    "cumulativeGasUsed": "5863589",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000001",
    "0x5938297bfdeeF3ac56EB4198E0B484b2A0B3adD8"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff6b231b8e9ed4cc6ee3e5ff2718dde3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_limitOrderProtocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EscrowAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImmutables\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSafetyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashlockHash\",\"type\":\"bytes32\"}],\"name\":\"DstEscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashlockHash\",\"type\":\"bytes32\"}],\"name\":\"SrcEscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORCHESTRATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashlockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcPublicWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcDeployedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstDeployedAt\",\"type\":\"uint32\"}],\"internalType\":\"struct TimelocksLib.Timelocks\",\"name\":\"timelocks\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutablesLib.Immutables\",\"name\":\"immutables\",\"type\":\"tuple\"}],\"name\":\"addressOfEscrowDst\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashlockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcPublicWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcDeployedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstDeployedAt\",\"type\":\"uint32\"}],\"internalType\":\"struct TimelocksLib.Timelocks\",\"name\":\"timelocks\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutablesLib.Immutables\",\"name\":\"immutables\",\"type\":\"tuple\"}],\"name\":\"addressOfEscrowSrc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashlockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcPublicWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcDeployedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstDeployedAt\",\"type\":\"uint32\"}],\"internalType\":\"struct TimelocksLib.Timelocks\",\"name\":\"timelocks\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutablesLib.Immutables\",\"name\":\"immutables\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"srcCancellationTimestamp\",\"type\":\"uint256\"}],\"name\":\"createDstEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashlockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcPublicWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcDeployedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstDeployedAt\",\"type\":\"uint32\"}],\"internalType\":\"struct TimelocksLib.Timelocks\",\"name\":\"timelocks\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutablesLib.Immutables\",\"name\":\"srcImmutables\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashlockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcPublicWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcDeployedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstDeployedAt\",\"type\":\"uint32\"}],\"internalType\":\"struct TimelocksLib.Timelocks\",\"name\":\"timelocks\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutablesLib.Immutables\",\"name\":\"dstImmutables\",\"type\":\"tuple\"}],\"name\":\"createEscrowPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"srcEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstEscrow\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashlockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcPublicWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"srcDeployedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstWithdrawal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstCancellation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dstDeployedAt\",\"type\":\"uint32\"}],\"internalType\":\"struct TimelocksLib.Timelocks\",\"name\":\"timelocks\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutablesLib.Immutables\",\"name\":\"immutables\",\"type\":\"tuple\"}],\"name\":\"createSrcEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowDstImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowSrcImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct ILimitOrderProtocol.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"}],\"name\":\"fillOrderWithEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"getEscrowPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"srcEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstEscrow\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orchestrator\",\"type\":\"address\"}],\"name\":\"grantOrchestratorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidEscrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOrderProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"}],\"name\":\"verifyEscrowStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Deploys and manages escrows for cross-chain atomic swaps\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addressOfEscrowDst((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))\":{\"details\":\"Used by orchestration service for coordination\",\"params\":{\"immutables\":\"Escrow parameters\"},\"returns\":{\"escrowAddress\":\"Computed escrow address\"}},\"addressOfEscrowSrc((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))\":{\"details\":\"Used by orchestration service for coordination\",\"params\":{\"immutables\":\"Escrow parameters\"},\"returns\":{\"escrowAddress\":\"Computed escrow address\"}},\"createDstEscrow((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256),uint256)\":{\"details\":\"Called by orchestration service on destination chain\",\"params\":{\"immutables\":\"Escrow parameters (adapted for destination)\",\"srcCancellationTimestamp\":\"Source chain cancellation timestamp\"},\"returns\":{\"escrow\":\"Address of created escrow\"}},\"createEscrowPair((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256),(address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))\":{\"details\":\"Batch creation for efficiency\",\"params\":{\"dstImmutables\":\"Destination chain immutables\",\"srcImmutables\":\"Source chain immutables\"},\"returns\":{\"dstEscrow\":\"Destination escrow address\",\"srcEscrow\":\"Source escrow address\"}},\"createSrcEscrow((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))\":{\"details\":\"Called by orchestration service when initiating cross-chain swap\",\"params\":{\"immutables\":\"Escrow parameters\"},\"returns\":{\"escrow\":\"Address of created escrow\"}},\"emergencyPause()\":{\"details\":\"Only admin can call during emergencies\"},\"emergencyUnpause()\":{\"details\":\"Only admin can call\"},\"fillOrderWithEscrow((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256,uint256,address)\":{\"details\":\"Called by resolver to initiate the swap\",\"params\":{\"escrowAddress\":\"Target escrow for funds\",\"makingAmount\":\"Amount to make\",\"order\":\"The limit order to fill\",\"signature\":\"Order signature\",\"takingAmount\":\"Amount to take\"}},\"getEscrowPair(bytes32)\":{\"params\":{\"orderHash\":\"The order hash\"},\"returns\":{\"dstEscrow\":\"Destination escrow address\",\"srcEscrow\":\"Source escrow address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantOrchestratorRole(address)\":{\"params\":{\"orchestrator\":\"Address of the orchestration service operator\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"verifyEscrowStatus(address)\":{\"params\":{\"escrowAddress\":\"Escrow to check\"},\"returns\":{\"isValid\":\"True if escrow is valid and active\"}}},\"title\":\"EscrowFactory\",\"version\":1},\"userdoc\":{\"events\":{\"DstEscrowCreated(address,address,address,bytes32)\":{\"notice\":\"Emitted when destination escrow is created\"},\"SrcEscrowCreated(address,address,address,bytes32)\":{\"notice\":\"Emitted when source escrow is created\"}},\"kind\":\"user\",\"methods\":{\"addressOfEscrowDst((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))\":{\"notice\":\"Computes the address of a destination escrow\"},\"addressOfEscrowSrc((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))\":{\"notice\":\"Computes the address of a source escrow\"},\"createDstEscrow((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256),uint256)\":{\"notice\":\"Creates a destination chain escrow\"},\"createEscrowPair((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256),(address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))\":{\"notice\":\"Creates escrows for orchestration service\"},\"createSrcEscrow((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))\":{\"notice\":\"Creates a source chain escrow\"},\"emergencyPause()\":{\"notice\":\"Emergency pause for all escrow creation\"},\"emergencyUnpause()\":{\"notice\":\"Resume escrow creation after emergency\"},\"fillOrderWithEscrow((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256,uint256,address)\":{\"notice\":\"Fills a 1inch limit order as part of cross-chain swap\"},\"getEscrowPair(bytes32)\":{\"notice\":\"Gets escrow addresses for a cross-chain order\"},\"grantOrchestratorRole(address)\":{\"notice\":\"Grants orchestrator role to the orchestration service\"},\"isValidEscrow(address)\":{\"notice\":\"Checks if an address is a valid escrow created by this factory\"},\"pause()\":{\"notice\":\"Pauses the factory\"},\"unpause()\":{\"notice\":\"Unpauses the factory\"},\"verifyEscrowStatus(address)\":{\"notice\":\"Verifies escrow status for orchestration\"}},\"notice\":\"Concrete implementation of escrow factory for 1inch integration\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethereum-hub/escrow/EscrowFactory.sol\":\"EscrowFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Create2} from \\\"../utils/Create2.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    error CloneArgumentsTooLong();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        return clone(implementation, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\\n     * to the new contract.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function clone(address implementation, uint256 value) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(value, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        return cloneDeterministic(implementation, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\\n     * a `value` parameter to send native currency to the new contract.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(value, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\\n     * access the arguments within the implementation, use {fetchCloneArgs}.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     */\\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\\n        return cloneWithImmutableArgs(implementation, args, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\\n     * parameter to send native currency to the new contract.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        assembly (\\\"memory-safe\\\") {\\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\\n     * access the arguments within the implementation, use {fetchCloneArgs}.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\\n     * at the same address.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     */\\n    function cloneDeterministicWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt\\n    ) internal returns (address instance) {\\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\\n     * but with a `value` parameter to send native currency to the new contract.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministicWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        return Create2.deploy(value, salt, bytecode);\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\\n     */\\n    function predictDeterministicAddressWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\\n     */\\n    function predictDeterministicAddressWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Get the immutable args attached to a clone.\\n     *\\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\\n     *   function will return an empty array.\\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\\n     *   creation.\\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\\n     *   function should only be used to check addresses that are known to be clones.\\n     */\\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\\n        assembly (\\\"memory-safe\\\") {\\n            extcodecopy(instance, add(result, 32), 45, mload(result))\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\\n     *\\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\\n     * abi.encodePacked is more expensive but also more portable and easier to review.\\n     *\\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\\n     */\\n    function _cloneCodeWithImmutableArgs(\\n        address implementation,\\n        bytes memory args\\n    ) private pure returns (bytes memory) {\\n        if (args.length > 24531) revert CloneArgumentsTooLong();\\n        return\\n            abi.encodePacked(\\n                hex\\\"61\\\",\\n                uint16(args.length + 45),\\n                hex\\\"3d81600a3d39f3363d3d373d3d3d363d73\\\",\\n                implementation,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                args\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7e918671c04972845975935ea13c9ce0be1228031ba0e929d0f1f68fd1f17214\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n            // if no address was created, and returndata is not empty, bubble revert\\n            if and(iszero(addr), not(iszero(returndatasize()))) {\\n                let p := mload(0x40)\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (addr == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/ethereum-hub/escrow/BaseEscrowFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../interfaces/IEscrowFactory.sol\\\";\\nimport \\\"../interfaces/ILimitOrderProtocol.sol\\\";\\nimport \\\"../libraries/ImmutablesLib.sol\\\";\\nimport \\\"../libraries/TimelocksLib.sol\\\";\\n\\n/**\\n * @title BaseEscrowFactory\\n * @notice Factory for creating escrow contracts following 1inch pattern\\n * @dev Designed to work with orchestration service for cross-chain coordination\\n */\\nabstract contract BaseEscrowFactory is IEscrowFactory, AccessControl, Pausable {\\n    using ImmutablesLib for ImmutablesLib.Immutables;\\n    using TimelocksLib for TimelocksLib.Timelocks;\\n\\n    // -- Constants --\\n    bytes32 public constant ORCHESTRATOR_ROLE = keccak256(\\\"ORCHESTRATOR_ROLE\\\");\\n    bytes32 public constant RESOLVER_ROLE = keccak256(\\\"RESOLVER_ROLE\\\");\\n    \\n    // -- State --\\n    address public immutable escrowSrcImplementation;\\n    address public immutable escrowDstImplementation;\\n    address public immutable limitOrderProtocol;\\n    \\n    // Track deployed escrows for orchestration service\\n    mapping(bytes32 => address) public escrows; // orderHash => escrow address\\n    mapping(address => bool) public isValidEscrow;\\n    \\n    // -- Errors --\\n    error InvalidImmutables();\\n    error EscrowAlreadyExists();\\n    error InvalidSafetyDeposit();\\n    error UnauthorizedCaller();\\n\\n    // -- Constructor --\\n    constructor(\\n        address _escrowSrcImpl,\\n        address _escrowDstImpl,\\n        address _limitOrderProtocol\\n    ) {\\n        require(_escrowSrcImpl != address(0), \\\"Invalid src implementation\\\");\\n        require(_escrowDstImpl != address(0), \\\"Invalid dst implementation\\\");\\n        require(_limitOrderProtocol != address(0), \\\"Invalid LOP address\\\");\\n        \\n        escrowSrcImplementation = _escrowSrcImpl;\\n        escrowDstImplementation = _escrowDstImpl;\\n        limitOrderProtocol = _limitOrderProtocol;\\n        \\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ORCHESTRATOR_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Creates a source chain escrow\\n     * @dev Called by orchestration service when initiating cross-chain swap\\n     * @param immutables Escrow parameters\\n     * @return escrow Address of created escrow\\n     */\\n    function createSrcEscrow(\\n        ImmutablesLib.Immutables calldata immutables\\n    ) external payable override onlyRole(ORCHESTRATOR_ROLE) whenNotPaused returns (address escrow) {\\n        // Validate immutables\\n        if (!ImmutablesLib.validate(immutables)) {\\n            revert InvalidImmutables();\\n        }\\n        \\n        // Validate safety deposit\\n        if (msg.value != immutables.safetyDeposit) {\\n            revert InvalidSafetyDeposit();\\n        }\\n        \\n        // Check if escrow already exists for this order\\n        bytes32 immutablesHash = ImmutablesLib.hash(immutables);\\n        if (escrows[immutablesHash] != address(0)) {\\n            revert EscrowAlreadyExists();\\n        }\\n        \\n        // Deploy escrow using CREATE2 for deterministic address\\n        escrow = Clones.cloneDeterministic(escrowSrcImplementation, immutablesHash);\\n        \\n        // Initialize escrow\\n        (bool success,) = escrow.call{value: msg.value}(\\n            abi.encodeWithSignature(\\\"initialize(bytes)\\\", immutables.encode())\\n        );\\n        require(success, \\\"Escrow initialization failed\\\");\\n        \\n        // Track escrow\\n        escrows[immutablesHash] = escrow;\\n        isValidEscrow[escrow] = true;\\n        \\n        emit SrcEscrowCreated(\\n            escrow,\\n            immutables.maker,\\n            immutables.taker,\\n            immutables.hashlockHash\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a destination chain escrow\\n     * @dev Called by orchestration service on destination chain\\n     * @param immutables Escrow parameters (adapted for destination)\\n     * @param srcCancellationTimestamp Source chain cancellation timestamp\\n     * @return escrow Address of created escrow\\n     */\\n    function createDstEscrow(\\n        ImmutablesLib.Immutables calldata immutables,\\n        uint256 srcCancellationTimestamp\\n    ) external payable override onlyRole(ORCHESTRATOR_ROLE) whenNotPaused returns (address escrow) {\\n        // Validate immutables\\n        if (!ImmutablesLib.validate(immutables)) {\\n            revert InvalidImmutables();\\n        }\\n        \\n        // Validate safety deposit\\n        if (msg.value != immutables.safetyDeposit) {\\n            revert InvalidSafetyDeposit();\\n        }\\n        \\n        // Validate timing coordination\\n        require(\\n            immutables.timelocks.dstCancellation < srcCancellationTimestamp,\\n            \\\"Invalid timeout coordination\\\"\\n        );\\n        \\n        // Check if escrow already exists\\n        bytes32 immutablesHash = ImmutablesLib.hash(immutables);\\n        if (escrows[immutablesHash] != address(0)) {\\n            revert EscrowAlreadyExists();\\n        }\\n        \\n        // Deploy escrow\\n        escrow = Clones.cloneDeterministic(escrowDstImplementation, immutablesHash);\\n        \\n        // Initialize escrow\\n        (bool success,) = escrow.call{value: msg.value}(\\n            abi.encodeWithSignature(\\\"initialize(bytes,uint256)\\\", \\n                immutables.encode(), \\n                srcCancellationTimestamp\\n            )\\n        );\\n        require(success, \\\"Escrow initialization failed\\\");\\n        \\n        // Track escrow\\n        escrows[immutablesHash] = escrow;\\n        isValidEscrow[escrow] = true;\\n        \\n        emit DstEscrowCreated(\\n            escrow,\\n            immutables.maker,\\n            immutables.taker,\\n            immutables.hashlockHash\\n        );\\n    }\\n\\n    /**\\n     * @notice Computes the address of a source escrow\\n     * @dev Used by orchestration service for coordination\\n     * @param immutables Escrow parameters\\n     * @return escrowAddress Computed escrow address\\n     */\\n    function addressOfEscrowSrc(\\n        ImmutablesLib.Immutables calldata immutables\\n    ) external view override returns (address escrowAddress) {\\n        bytes32 immutablesHash = ImmutablesLib.hash(immutables);\\n        escrowAddress = Clones.predictDeterministicAddress(\\n            escrowSrcImplementation,\\n            immutablesHash\\n        );\\n    }\\n\\n    /**\\n     * @notice Computes the address of a destination escrow\\n     * @dev Used by orchestration service for coordination\\n     * @param immutables Escrow parameters\\n     * @return escrowAddress Computed escrow address\\n     */\\n    function addressOfEscrowDst(\\n        ImmutablesLib.Immutables calldata immutables\\n    ) external view override returns (address escrowAddress) {\\n        bytes32 immutablesHash = ImmutablesLib.hash(immutables);\\n        escrowAddress = Clones.predictDeterministicAddress(\\n            escrowDstImplementation,\\n            immutablesHash\\n        );\\n    }\\n\\n    /**\\n     * @notice Fills a 1inch limit order as part of cross-chain swap\\n     * @dev Called by resolver to initiate the swap\\n     * @param order The limit order to fill\\n     * @param signature Order signature\\n     * @param makingAmount Amount to make\\n     * @param takingAmount Amount to take\\n     * @param escrowAddress Target escrow for funds\\n     */\\n    function fillOrderWithEscrow(\\n        ILimitOrderProtocol.Order calldata order,\\n        bytes calldata signature,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        address escrowAddress\\n    ) external onlyRole(RESOLVER_ROLE) whenNotPaused {\\n        require(isValidEscrow[escrowAddress], \\\"Invalid escrow\\\");\\n        \\n        // Fill order with escrow as receiver\\n        // The escrow will handle the cross-chain coordination\\n        bytes memory interaction = abi.encode(escrowAddress);\\n        \\n        ILimitOrderProtocol(limitOrderProtocol).fillOrder(\\n            order,\\n            signature,\\n            interaction,\\n            makingAmount,\\n            takingAmount,\\n            0 // skipPermitAndThresholdAmount\\n        );\\n    }\\n\\n    // -- Admin Functions --\\n\\n    /**\\n     * @notice Pauses the factory\\n     */\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the factory\\n     */\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Grants orchestrator role to the orchestration service\\n     * @param orchestrator Address of the orchestration service operator\\n     */\\n    function grantOrchestratorRole(address orchestrator) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(ORCHESTRATOR_ROLE, orchestrator);\\n    }\\n}\",\"keccak256\":\"0x28eedf84a27b8598d2c717efd381b98eb0ed81ee44c92cce8ea1fd3795da948c\",\"license\":\"MIT\"},\"contracts/ethereum-hub/escrow/EscrowDst.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/ImmutablesLib.sol\\\";\\nimport \\\"../libraries/TimelocksLib.sol\\\";\\n\\n/**\\n * @title EscrowDst\\n * @notice Destination chain escrow for cross-chain atomic swaps\\n * @dev Mirrors EscrowSrc behavior on destination chain\\n */\\ncontract EscrowDst is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using ImmutablesLib for ImmutablesLib.Immutables;\\n    using TimelocksLib for TimelocksLib.Timelocks;\\n\\n    // -- State --\\n    ImmutablesLib.Immutables private _immutables;\\n    uint256 private _srcCancellationTimestamp;\\n    bool private _initialized;\\n    bool private _withdrawn;\\n    bool private _cancelled;\\n    bytes32 private _revealedSecret;\\n\\n    // -- Events --\\n    event EscrowInitialized(\\n        address indexed maker,\\n        address indexed taker,\\n        uint256 amount,\\n        bytes32 hashlockHash,\\n        uint256 srcCancellationTimestamp\\n    );\\n    \\n    event SecretRevealed(bytes32 indexed hashlockHash, bytes32 secret);\\n    event FundsWithdrawn(address indexed recipient, uint256 amount);\\n    event EscrowCancelled(address indexed maker);\\n\\n    // -- Errors --\\n    error AlreadyInitialized();\\n    error NotInitialized();\\n    error AlreadyWithdrawn();\\n    error AlreadyCancelled();\\n    error InvalidSecret();\\n    error NotInWithdrawalWindow();\\n    error NotInCancellationWindow();\\n    error UnauthorizedCaller();\\n    error TransferFailed();\\n    error InvalidTimelockCoordination();\\n\\n    // -- Modifiers --\\n    modifier onlyInitialized() {\\n        if (!_initialized) revert NotInitialized();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the escrow with immutable parameters\\n     * @dev Called by factory immediately after deployment\\n     * @param encodedImmutables Encoded immutable parameters\\n     * @param srcCancellationTimestamp Source chain cancellation timestamp for coordination\\n     */\\n    function initialize(\\n        bytes calldata encodedImmutables,\\n        uint256 srcCancellationTimestamp\\n    ) external payable {\\n        if (_initialized) revert AlreadyInitialized();\\n        \\n        _immutables = ImmutablesLib.decode(encodedImmutables);\\n        _srcCancellationTimestamp = srcCancellationTimestamp;\\n        \\n        // Validate cross-chain timeout coordination\\n        if (_immutables.timelocks.dstCancellation >= srcCancellationTimestamp) {\\n            revert InvalidTimelockCoordination();\\n        }\\n        \\n        _initialized = true;\\n        \\n        // Validate safety deposit\\n        require(msg.value == _immutables.safetyDeposit, \\\"Invalid safety deposit\\\");\\n        \\n        emit EscrowInitialized(\\n            _immutables.maker,\\n            _immutables.taker,\\n            _immutables.amount,\\n            _immutables.hashlockHash,\\n            srcCancellationTimestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by revealing the secret\\n     * @dev On destination chain, maker withdraws (roles are swapped)\\n     * @param secret The secret that hashes to hashlockHash\\n     */\\n    function withdraw(bytes32 secret) external nonReentrant onlyInitialized {\\n        if (_withdrawn) revert AlreadyWithdrawn();\\n        if (_cancelled) revert AlreadyCancelled();\\n        \\n        // Verify secret\\n        if (keccak256(abi.encodePacked(secret)) != _immutables.hashlockHash) {\\n            revert InvalidSecret();\\n        }\\n        \\n        // Check withdrawal window\\n        if (!_immutables.timelocks.canWithdraw(false, false)) {\\n            revert NotInWithdrawalWindow();\\n        }\\n        \\n        // On destination chain, the original maker (now taker) withdraws\\n        if (msg.sender != _immutables.taker) {\\n            revert UnauthorizedCaller();\\n        }\\n        \\n        // Mark as withdrawn and store secret\\n        _withdrawn = true;\\n        _revealedSecret = secret;\\n        \\n        emit SecretRevealed(_immutables.hashlockHash, secret);\\n        \\n        // Transfer tokens to taker (original maker)\\n        IERC20(_immutables.token).safeTransfer(_immutables.taker, _immutables.amount);\\n        \\n        // Return safety deposit\\n        (bool success,) = _immutables.taker.call{value: _immutables.safetyDeposit}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n        \\n        emit FundsWithdrawn(_immutables.taker, _immutables.amount);\\n    }\\n\\n    /**\\n     * @notice Cancels the escrow and refunds the maker\\n     * @dev On destination chain, the original taker (now maker) gets refund\\n     */\\n    function cancel() external nonReentrant onlyInitialized {\\n        if (_withdrawn) revert AlreadyWithdrawn();\\n        if (_cancelled) revert AlreadyCancelled();\\n        \\n        // Check if cancellation is allowed\\n        if (!_immutables.timelocks.canCancel(false)) {\\n            revert NotInCancellationWindow();\\n        }\\n        \\n        // On destination chain, the original taker (now maker) can cancel\\n        if (msg.sender != _immutables.maker) {\\n            revert UnauthorizedCaller();\\n        }\\n        \\n        // Mark as cancelled\\n        _cancelled = true;\\n        \\n        // Transfer tokens back to maker (original taker)\\n        IERC20(_immutables.token).safeTransfer(_immutables.maker, _immutables.amount);\\n        \\n        // Return safety deposit\\n        (bool success,) = _immutables.maker.call{value: _immutables.safetyDeposit}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n        \\n        emit EscrowCancelled(_immutables.maker);\\n    }\\n\\n    /**\\n     * @notice Gets the current escrow status\\n     * @return initialized Whether the escrow is initialized\\n     * @return withdrawn Whether funds have been withdrawn\\n     * @return cancelled Whether the escrow is cancelled\\n     */\\n    function getStatus() external view returns (\\n        bool initialized,\\n        bool withdrawn,\\n        bool cancelled,\\n        bool inWithdrawalWindow,\\n        bool inCancellationWindow,\\n        uint256 srcCancellationTime\\n    ) {\\n        initialized = _initialized;\\n        withdrawn = _withdrawn;\\n        cancelled = _cancelled;\\n        srcCancellationTime = _srcCancellationTimestamp;\\n        \\n        if (_initialized) {\\n            inWithdrawalWindow = _immutables.timelocks.canWithdraw(false, false);\\n            inCancellationWindow = _immutables.timelocks.canCancel(false);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the immutable parameters\\n     * @return Immutables structure\\n     */\\n    function getImmutables() external view onlyInitialized returns (ImmutablesLib.Immutables memory) {\\n        return _immutables;\\n    }\\n\\n    /**\\n     * @notice Gets the revealed secret (if any)\\n     * @return secret The revealed secret\\n     */\\n    function getRevealedSecret() external view returns (bytes32) {\\n        return _revealedSecret;\\n    }\\n\\n    /**\\n     * @notice Prepares tokens for cross-chain swap\\n     * @dev Called by maker to lock tokens in escrow\\n     */\\n    function lockTokens() external onlyInitialized {\\n        require(msg.sender == _immutables.maker, \\\"Only maker can lock\\\");\\n        require(!_withdrawn && !_cancelled, \\\"Already finalized\\\");\\n        \\n        // Transfer tokens from maker to escrow\\n        IERC20(_immutables.token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _immutables.amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Emergency function to recover stuck tokens\\n     * @dev Can only be called by maker after cancellation window\\n     * @param token Token to recover\\n     * @param amount Amount to recover\\n     */\\n    function emergencyRecover(address token, uint256 amount) external onlyInitialized {\\n        require(msg.sender == _immutables.maker, \\\"Only maker\\\");\\n        require(_immutables.timelocks.canCancel(false), \\\"Not in cancellation window\\\");\\n        require(!_withdrawn && !_cancelled, \\\"Already finalized\\\");\\n        \\n        // Safety check: don't allow recovering the escrowed tokens normally\\n        if (token == _immutables.token) {\\n            require(amount <= IERC20(token).balanceOf(address(this)) - _immutables.amount, \\n                \\\"Cannot recover escrowed funds\\\");\\n        }\\n        \\n        IERC20(token).safeTransfer(_immutables.maker, amount);\\n    }\\n\\n    // Receive function to accept safety deposits\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x28aac04ac68d76401f3971e836e1f4ae5cb7b0d7cc7d797d0ea1273c71370dab\",\"license\":\"MIT\"},\"contracts/ethereum-hub/escrow/EscrowFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"./BaseEscrowFactory.sol\\\";\\nimport \\\"./EscrowSrc.sol\\\";\\nimport \\\"./EscrowDst.sol\\\";\\n\\n/**\\n * @title EscrowFactory\\n * @notice Concrete implementation of escrow factory for 1inch integration\\n * @dev Deploys and manages escrows for cross-chain atomic swaps\\n */\\ncontract EscrowFactory is BaseEscrowFactory {\\n    \\n    // -- Constructor --\\n    constructor(\\n        address _limitOrderProtocol,\\n        address _admin\\n    ) BaseEscrowFactory(\\n        address(new EscrowSrc()),      // Deploy src implementation\\n        address(new EscrowDst()),      // Deploy dst implementation\\n        _limitOrderProtocol\\n    ) {\\n        // Grant admin role to specified address (for orchestration service)\\n        if (_admin != msg.sender) {\\n            _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n            _grantRole(ORCHESTRATOR_ROLE, _admin);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates escrows for orchestration service\\n     * @dev Batch creation for efficiency\\n     * @param srcImmutables Source chain immutables\\n     * @param dstImmutables Destination chain immutables\\n     * @return srcEscrow Source escrow address\\n     * @return dstEscrow Destination escrow address\\n     */\\n    function createEscrowPair(\\n        ImmutablesLib.Immutables calldata srcImmutables,\\n        ImmutablesLib.Immutables calldata dstImmutables\\n    ) external payable onlyRole(ORCHESTRATOR_ROLE) returns (\\n        address srcEscrow,\\n        address dstEscrow\\n    ) {\\n        // Calculate required safety deposits\\n        uint256 totalSafetyDeposit = srcImmutables.safetyDeposit + dstImmutables.safetyDeposit;\\n        require(msg.value == totalSafetyDeposit, \\\"Invalid safety deposit total\\\");\\n        \\n        // Create source escrow\\n        srcEscrow = this.createSrcEscrow{value: srcImmutables.safetyDeposit}(srcImmutables);\\n        \\n        // Create destination escrow\\n        uint256 srcCancellationTimestamp = srcImmutables.timelocks.srcCancellation;\\n        dstEscrow = this.createDstEscrow{value: dstImmutables.safetyDeposit}(\\n            dstImmutables,\\n            srcCancellationTimestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets escrow addresses for a cross-chain order\\n     * @param orderHash The order hash\\n     * @return srcEscrow Source escrow address\\n     * @return dstEscrow Destination escrow address\\n     */\\n    function getEscrowPair(bytes32 orderHash) external view returns (\\n        address srcEscrow,\\n        address dstEscrow\\n    ) {\\n        // In production, this would query both chains\\n        // For hackathon, we simulate with computed addresses\\n        srcEscrow = escrows[orderHash];\\n        // Destination escrow would be on different chain\\n        dstEscrow = address(0); // Placeholder\\n    }\\n\\n    /**\\n     * @notice Verifies escrow status for orchestration\\n     * @param escrowAddress Escrow to check\\n     * @return isValid True if escrow is valid and active\\n     */\\n    function verifyEscrowStatus(address escrowAddress) external view returns (bool isValid) {\\n        if (!isValidEscrow[escrowAddress]) {\\n            return false;\\n        }\\n        \\n        // Check escrow status\\n        try EscrowSrc(payable(escrowAddress)).getStatus() returns (\\n            bool initialized,\\n            bool withdrawn,\\n            bool cancelled,\\n            bool,\\n            bool\\n        ) {\\n            isValid = initialized && !withdrawn && !cancelled;\\n        } catch {\\n            // Try as destination escrow\\n            try EscrowDst(payable(escrowAddress)).getStatus() returns (\\n                bool initialized_,\\n                bool withdrawn_,\\n                bool cancelled_,\\n                bool,\\n                bool,\\n                uint256\\n            ) {\\n                isValid = initialized_ && !withdrawn_ && !cancelled_;\\n            } catch {\\n                isValid = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Emergency pause for all escrow creation\\n     * @dev Only admin can call during emergencies\\n     */\\n    function emergencyPause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Resume escrow creation after emergency\\n     * @dev Only admin can call\\n     */\\n    function emergencyUnpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n}\",\"keccak256\":\"0xe0284e28d10186ead1b789e0127e907e4a9fcc4023d081966b4c1b51265f1b6b\",\"license\":\"MIT\"},\"contracts/ethereum-hub/escrow/EscrowSrc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/ImmutablesLib.sol\\\";\\nimport \\\"../libraries/TimelocksLib.sol\\\";\\n\\n/**\\n * @title EscrowSrc\\n * @notice Source chain escrow for cross-chain atomic swaps\\n * @dev Works with orchestration service for Fusion+ cross-chain swaps\\n */\\ncontract EscrowSrc is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using ImmutablesLib for ImmutablesLib.Immutables;\\n    using TimelocksLib for TimelocksLib.Timelocks;\\n\\n    // -- State --\\n    ImmutablesLib.Immutables private _immutables;\\n    bool private _initialized;\\n    bool private _withdrawn;\\n    bool private _cancelled;\\n    bytes32 private _revealedSecret;\\n\\n    // -- Events --\\n    event EscrowInitialized(\\n        address indexed maker,\\n        address indexed taker,\\n        uint256 amount,\\n        bytes32 hashlockHash\\n    );\\n    \\n    event SecretRevealed(bytes32 indexed hashlockHash, bytes32 secret);\\n    event FundsWithdrawn(address indexed recipient, uint256 amount);\\n    event EscrowCancelled(address indexed maker);\\n\\n    // -- Errors --\\n    error AlreadyInitialized();\\n    error NotInitialized();\\n    error AlreadyWithdrawn();\\n    error AlreadyCancelled();\\n    error InvalidSecret();\\n    error NotInWithdrawalWindow();\\n    error NotInCancellationWindow();\\n    error UnauthorizedCaller();\\n    error TransferFailed();\\n\\n    // -- Modifiers --\\n    modifier onlyInitialized() {\\n        if (!_initialized) revert NotInitialized();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the escrow with immutable parameters\\n     * @dev Called by factory immediately after deployment\\n     * @param encodedImmutables Encoded immutable parameters\\n     */\\n    function initialize(bytes calldata encodedImmutables) external payable {\\n        if (_initialized) revert AlreadyInitialized();\\n        \\n        _immutables = ImmutablesLib.decode(encodedImmutables);\\n        _initialized = true;\\n        \\n        // Validate safety deposit\\n        require(msg.value == _immutables.safetyDeposit, \\\"Invalid safety deposit\\\");\\n        \\n        emit EscrowInitialized(\\n            _immutables.maker,\\n            _immutables.taker,\\n            _immutables.amount,\\n            _immutables.hashlockHash\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by revealing the secret\\n     * @dev Can be called by taker or orchestration service\\n     * @param secret The secret that hashes to hashlockHash\\n     */\\n    function withdraw(bytes32 secret) external nonReentrant onlyInitialized {\\n        if (_withdrawn) revert AlreadyWithdrawn();\\n        if (_cancelled) revert AlreadyCancelled();\\n        \\n        // Verify secret\\n        if (keccak256(abi.encodePacked(secret)) != _immutables.hashlockHash) {\\n            revert InvalidSecret();\\n        }\\n        \\n        // Check withdrawal window\\n        bool canWithdraw = _immutables.timelocks.canWithdraw(true, false);\\n        bool publicWithdrawal = _immutables.timelocks.canWithdraw(true, true);\\n        \\n        if (!canWithdraw && !publicWithdrawal) {\\n            revert NotInWithdrawalWindow();\\n        }\\n        \\n        // For maker withdrawal period, only taker can withdraw\\n        if (canWithdraw && !publicWithdrawal && msg.sender != _immutables.taker) {\\n            revert UnauthorizedCaller();\\n        }\\n        \\n        // Mark as withdrawn and store secret\\n        _withdrawn = true;\\n        _revealedSecret = secret;\\n        \\n        emit SecretRevealed(_immutables.hashlockHash, secret);\\n        \\n        // Transfer tokens to taker\\n        IERC20(_immutables.token).safeTransfer(_immutables.taker, _immutables.amount);\\n        \\n        // Return safety deposit to taker\\n        (bool success,) = _immutables.taker.call{value: _immutables.safetyDeposit}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n        \\n        emit FundsWithdrawn(_immutables.taker, _immutables.amount);\\n    }\\n\\n    /**\\n     * @notice Cancels the escrow and refunds the maker\\n     * @dev Can only be called after cancellation timeout\\n     */\\n    function cancel() external nonReentrant onlyInitialized {\\n        if (_withdrawn) revert AlreadyWithdrawn();\\n        if (_cancelled) revert AlreadyCancelled();\\n        \\n        // Check if cancellation is allowed\\n        if (!_immutables.timelocks.canCancel(true)) {\\n            revert NotInCancellationWindow();\\n        }\\n        \\n        // Only maker can cancel\\n        if (msg.sender != _immutables.maker) {\\n            revert UnauthorizedCaller();\\n        }\\n        \\n        // Mark as cancelled\\n        _cancelled = true;\\n        \\n        // Transfer tokens back to maker\\n        IERC20(_immutables.token).safeTransfer(_immutables.maker, _immutables.amount);\\n        \\n        // Return safety deposit to maker\\n        (bool success,) = _immutables.maker.call{value: _immutables.safetyDeposit}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n        \\n        emit EscrowCancelled(_immutables.maker);\\n    }\\n\\n    /**\\n     * @notice Gets the current escrow status\\n     * @return initialized Whether the escrow is initialized\\n     * @return withdrawn Whether funds have been withdrawn\\n     * @return cancelled Whether the escrow is cancelled\\n     */\\n    function getStatus() external view returns (\\n        bool initialized,\\n        bool withdrawn,\\n        bool cancelled,\\n        bool inWithdrawalWindow,\\n        bool inCancellationWindow\\n    ) {\\n        initialized = _initialized;\\n        withdrawn = _withdrawn;\\n        cancelled = _cancelled;\\n        \\n        if (_initialized) {\\n            inWithdrawalWindow = _immutables.timelocks.canWithdraw(true, false) ||\\n                                _immutables.timelocks.canWithdraw(true, true);\\n            inCancellationWindow = _immutables.timelocks.canCancel(true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the immutable parameters\\n     * @return Immutables structure\\n     */\\n    function getImmutables() external view onlyInitialized returns (ImmutablesLib.Immutables memory) {\\n        return _immutables;\\n    }\\n\\n    /**\\n     * @notice Gets the revealed secret (if any)\\n     * @return secret The revealed secret\\n     */\\n    function getRevealedSecret() external view returns (bytes32) {\\n        return _revealedSecret;\\n    }\\n\\n    /**\\n     * @notice Receives tokens from 1inch limit order protocol\\n     * @dev This function is called when the order is filled\\n     */\\n    function onOrderFilled(\\n        address token,\\n        uint256 amount,\\n        bytes calldata /* data */\\n    ) external onlyInitialized {\\n        // Verify the correct token and amount\\n        require(token == _immutables.token, \\\"Invalid token\\\");\\n        require(amount == _immutables.amount, \\\"Invalid amount\\\");\\n        \\n        // The tokens are now in the escrow, ready for cross-chain swap\\n    }\\n\\n    /**\\n     * @notice Emergency function to recover stuck tokens\\n     * @dev Can only be called by maker after cancellation window\\n     * @param token Token to recover\\n     * @param amount Amount to recover\\n     */\\n    function emergencyRecover(address token, uint256 amount) external onlyInitialized {\\n        require(msg.sender == _immutables.maker, \\\"Only maker\\\");\\n        require(_immutables.timelocks.canCancel(true), \\\"Not in cancellation window\\\");\\n        require(!_withdrawn && !_cancelled, \\\"Already finalized\\\");\\n        \\n        // Safety check: don't allow recovering the escrowed tokens normally\\n        if (token == _immutables.token) {\\n            require(amount <= IERC20(token).balanceOf(address(this)) - _immutables.amount, \\n                \\\"Cannot recover escrowed funds\\\");\\n        }\\n        \\n        IERC20(token).safeTransfer(_immutables.maker, amount);\\n    }\\n\\n    // Receive function to accept safety deposits\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x5942996b60cff8d12f01c7d720f2d42f1afb851ba4af5eb6e59937a0019b1b00\",\"license\":\"MIT\"},\"contracts/ethereum-hub/interfaces/IEscrowFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"../libraries/ImmutablesLib.sol\\\";\\n\\n/**\\n * @title IEscrowFactory\\n * @notice Interface for 1inch-compatible escrow factory\\n * @dev Creates escrows for cross-chain atomic swaps following 1inch patterns\\n */\\ninterface IEscrowFactory {\\n\\n    /**\\n     * @notice Creates a source chain escrow\\n     * @param immutables Escrow parameters\\n     * @return escrow Address of created escrow\\n     */\\n    function createSrcEscrow(ImmutablesLib.Immutables calldata immutables) \\n        external \\n        payable \\n        returns (address escrow);\\n\\n    /**\\n     * @notice Creates a destination chain escrow\\n     * @param immutables Escrow parameters\\n     * @param srcCancellationTimestamp Source chain cancellation timestamp\\n     * @return escrow Address of created escrow\\n     */\\n    function createDstEscrow(\\n        ImmutablesLib.Immutables calldata immutables,\\n        uint256 srcCancellationTimestamp\\n    ) external payable returns (address escrow);\\n\\n    /**\\n     * @notice Computes the address of a source escrow\\n     * @param immutables Escrow parameters\\n     * @return escrowAddress Computed escrow address\\n     */\\n    function addressOfEscrowSrc(ImmutablesLib.Immutables calldata immutables) \\n        external \\n        view \\n        returns (address escrowAddress);\\n\\n    /**\\n     * @notice Computes the address of a destination escrow\\n     * @param immutables Escrow parameters\\n     * @return escrowAddress Computed escrow address\\n     */\\n    function addressOfEscrowDst(ImmutablesLib.Immutables calldata immutables)\\n        external\\n        view\\n        returns (address escrowAddress);\\n\\n    /**\\n     * @notice Creates escrows for orchestration service\\n     * @dev Batch creation for efficiency\\n     * @param srcImmutables Source chain immutables\\n     * @param dstImmutables Destination chain immutables\\n     * @return srcEscrow Source escrow address\\n     * @return dstEscrow Destination escrow address\\n     */\\n    function createEscrowPair(\\n        ImmutablesLib.Immutables calldata srcImmutables,\\n        ImmutablesLib.Immutables calldata dstImmutables\\n    ) external payable returns (\\n        address srcEscrow,\\n        address dstEscrow\\n    );\\n\\n    /**\\n     * @notice Checks if an address is a valid escrow created by this factory\\n     * @param escrow Address to check\\n     * @return True if the address is a valid escrow\\n     */\\n    function isValidEscrow(address escrow) external view returns (bool);\\n\\n    /**\\n     * @notice Emitted when source escrow is created\\n     */\\n    event SrcEscrowCreated(\\n        address indexed escrow,\\n        address indexed maker,\\n        address indexed taker,\\n        bytes32 hashlockHash\\n    );\\n\\n    /**\\n     * @notice Emitted when destination escrow is created\\n     */\\n    event DstEscrowCreated(\\n        address indexed escrow,\\n        address indexed maker,\\n        address indexed taker,\\n        bytes32 hashlockHash\\n    );\\n}\",\"keccak256\":\"0x9fb663f17a1b8ed0235701ee5939e18a90adaf8685d079864af09ea096b91e14\",\"license\":\"MIT\"},\"contracts/ethereum-hub/interfaces/ILimitOrderProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title ILimitOrderProtocol\\n * @notice Interface for 1inch Limit Order Protocol integration\\n * @dev This interface enables cross-chain swaps through 1inch foundation\\n */\\ninterface ILimitOrderProtocol {\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;  // 0x0 for public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        uint256 offsets;\\n        bytes interactions;     // Encoded interactions for hooks\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 vs;\\n    }\\n\\n    /**\\n     * @notice Fills a limit order\\n     * @param order The order to fill\\n     * @param signature Order signature\\n     * @param interaction Additional interaction data\\n     * @param makingAmount Amount of maker asset\\n     * @param takingAmount Amount of taker asset\\n     * @param skipPermitAndThresholdAmount Skip permit and threshold checks\\n     * @return actualMakingAmount Actual amount of maker asset filled\\n     * @return actualTakingAmount Actual amount of taker asset filled\\n     * @return orderHash Hash of the filled order\\n     */\\n    function fillOrder(\\n        Order calldata order,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 skipPermitAndThresholdAmount\\n    ) external payable returns (\\n        uint256 actualMakingAmount,\\n        uint256 actualTakingAmount,\\n        bytes32 orderHash\\n    );\\n\\n    /**\\n     * @notice Fills an order with compact signature\\n     * @param order The order to fill\\n     * @param r Signature r value\\n     * @param vs Signature vs value\\n     * @param amount Fill amount\\n     * @param takerTraits Taker traits for advanced features\\n     * @param args Additional arguments\\n     */\\n    function fillOrderArgs(\\n        Order calldata order,\\n        bytes32 r,\\n        bytes32 vs,\\n        uint256 amount,\\n        uint256 takerTraits,\\n        bytes calldata args\\n    ) external payable returns (\\n        uint256 actualMakingAmount,\\n        uint256 actualTakingAmount,\\n        bytes32 orderHash\\n    );\\n\\n    /**\\n     * @notice Cancels an order\\n     * @param orderInfo Order info for cancellation\\n     */\\n    function cancelOrder(uint256 orderInfo) external;\\n\\n    /**\\n     * @notice Checks if an order is valid\\n     * @param order The order to check\\n     * @param signature Order signature\\n     * @return isValid True if order is valid\\n     */\\n    function checkOrder(Order calldata order, bytes calldata signature)\\n        external\\n        view\\n        returns (bool isValid);\\n\\n    /**\\n     * @notice Gets remaining fill amount for an order\\n     * @param orderHash Hash of the order\\n     * @return remaining Remaining amount that can be filled\\n     */\\n    function remaining(bytes32 orderHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Emitted when an order is filled\\n     */\\n    event OrderFilled(\\n        bytes32 indexed orderHash,\\n        address indexed maker,\\n        address indexed taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when an order is cancelled\\n     */\\n    event OrderCancelled(bytes32 indexed orderHash);\\n}\",\"keccak256\":\"0xe44b1bcb5fdd8ce2c611af2df9e675572d83ae9ee4e691ba2f55a2285349598a\",\"license\":\"MIT\"},\"contracts/ethereum-hub/libraries/ImmutablesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"./TimelocksLib.sol\\\";\\n\\n/**\\n * @title ImmutablesLib\\n * @notice Library for managing escrow immutable parameters\\n * @dev Based on 1inch cross-chain-swap pattern for parameter encoding\\n */\\nlibrary ImmutablesLib {\\n    using TimelocksLib for TimelocksLib.Timelocks;\\n\\n    struct Immutables {\\n        address maker;\\n        address taker;\\n        address token;\\n        uint256 amount;\\n        uint256 safetyDeposit;\\n        bytes32 hashlockHash;\\n        TimelocksLib.Timelocks timelocks;\\n        bytes32 orderHash;       // Link to 1inch order\\n        uint256 chainId;         // Target chain for cross-chain swaps\\n    }\\n\\n    /**\\n     * @notice Hashes the immutable parameters for escrow address calculation\\n     * @param immutables The immutable parameters\\n     * @return hash The hash of the parameters\\n     */\\n    function hash(Immutables memory immutables) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            immutables.maker,\\n            immutables.taker,\\n            immutables.token,\\n            immutables.amount,\\n            immutables.safetyDeposit,\\n            immutables.hashlockHash,\\n            immutables.timelocks.encode(),\\n            immutables.orderHash,\\n            immutables.chainId\\n        ));\\n    }\\n\\n    /**\\n     * @notice Validates immutable parameters\\n     * @param immutables The parameters to validate\\n     * @return valid True if parameters are valid\\n     */\\n    function validate(Immutables calldata immutables) internal view returns (bool valid) {\\n        valid = immutables.maker != address(0) &&\\n                immutables.taker != address(0) &&\\n                immutables.token != address(0) &&\\n                immutables.amount > 0 &&\\n                immutables.hashlockHash != bytes32(0) &&\\n                immutables.timelocks.validate() &&\\n                immutables.chainId > 0;\\n    }\\n\\n    /**\\n     * @notice Creates immutables for source chain escrow\\n     * @param maker The maker address\\n     * @param taker The taker address\\n     * @param token The token address\\n     * @param amount The token amount\\n     * @param hashlockHash The hashlock hash\\n     * @param duration The swap duration\\n     * @param orderHash The 1inch order hash\\n     * @param destinationChainId The destination chain ID\\n     * @return immutables The created immutables\\n     */\\n    function createForSource(\\n        address maker,\\n        address taker,\\n        address token,\\n        uint256 amount,\\n        bytes32 hashlockHash,\\n        uint32 duration,\\n        bytes32 orderHash,\\n        uint256 destinationChainId\\n    ) internal view returns (Immutables memory immutables) {\\n        immutables = Immutables({\\n            maker: maker,\\n            taker: taker,\\n            token: token,\\n            amount: amount,\\n            safetyDeposit: calculateSafetyDeposit(amount),\\n            hashlockHash: hashlockHash,\\n            timelocks: TimelocksLib.create(duration),\\n            orderHash: orderHash,\\n            chainId: destinationChainId\\n        });\\n    }\\n\\n    /**\\n     * @notice Creates immutables for destination chain escrow\\n     * @param sourceImmutables The source chain immutables\\n     * @param destinationToken The token on destination chain\\n     * @param destinationAmount The amount on destination chain\\n     * @return immutables The created immutables\\n     */\\n    function createForDestination(\\n        Immutables memory sourceImmutables,\\n        address destinationToken,\\n        uint256 destinationAmount\\n    ) internal view returns (Immutables memory immutables) {\\n        // Swap maker and taker for destination chain\\n        immutables = Immutables({\\n            maker: sourceImmutables.taker,  // Taker becomes maker on destination\\n            taker: sourceImmutables.maker,  // Maker becomes taker on destination\\n            token: destinationToken,\\n            amount: destinationAmount,\\n            safetyDeposit: calculateSafetyDeposit(destinationAmount),\\n            hashlockHash: sourceImmutables.hashlockHash,  // Same hashlock\\n            timelocks: sourceImmutables.timelocks,        // Same timelocks\\n            orderHash: sourceImmutables.orderHash,         // Same order hash\\n            chainId: block.chainid                         // Current chain ID\\n        });\\n    }\\n\\n    /**\\n     * @notice Calculates safety deposit amount (0.1% of swap amount)\\n     * @param amount The swap amount\\n     * @return deposit The safety deposit amount\\n     */\\n    function calculateSafetyDeposit(uint256 amount) internal pure returns (uint256 deposit) {\\n        deposit = amount / 1000; // 0.1%\\n        if (deposit == 0) {\\n            deposit = 1; // Minimum 1 wei\\n        }\\n    }\\n\\n    /**\\n     * @notice Encodes immutables for efficient storage/transmission\\n     * @param immutables The immutables to encode\\n     * @return encoded The encoded immutables\\n     */\\n    function encode(Immutables memory immutables) internal pure returns (bytes memory encoded) {\\n        encoded = abi.encode(\\n            immutables.maker,\\n            immutables.taker,\\n            immutables.token,\\n            immutables.amount,\\n            immutables.safetyDeposit,\\n            immutables.hashlockHash,\\n            immutables.timelocks.encode(),\\n            immutables.orderHash,\\n            immutables.chainId\\n        );\\n    }\\n\\n    /**\\n     * @notice Decodes immutables from bytes\\n     * @param encoded The encoded immutables\\n     * @return immutables The decoded immutables\\n     */\\n    function decode(bytes memory encoded) internal pure returns (Immutables memory immutables) {\\n        // Decode in two steps to avoid stack too deep\\n        address maker;\\n        address taker;\\n        address token;\\n        uint256 amount;\\n        uint256 safetyDeposit;\\n        \\n        (maker, taker, token, amount, safetyDeposit) = abi.decode(\\n            encoded, \\n            (address, address, address, uint256, uint256)\\n        );\\n        \\n        // Decode remaining fields\\n        bytes32 hashlockHash;\\n        bytes32 timelocksEncoded;\\n        bytes32 orderHash;\\n        uint256 chainId;\\n        \\n        assembly {\\n            let dataPtr := add(encoded, 0x20)\\n            hashlockHash := mload(add(dataPtr, 0xA0))\\n            timelocksEncoded := mload(add(dataPtr, 0xC0))\\n            orderHash := mload(add(dataPtr, 0xE0))\\n            chainId := mload(add(dataPtr, 0x100))\\n        }\\n        \\n        immutables = Immutables({\\n            maker: maker,\\n            taker: taker,\\n            token: token,\\n            amount: amount,\\n            safetyDeposit: safetyDeposit,\\n            hashlockHash: hashlockHash,\\n            timelocks: TimelocksLib.decode(timelocksEncoded),\\n            orderHash: orderHash,\\n            chainId: chainId\\n        });\\n    }\\n\\n    /**\\n     * @notice Checks if the maker can withdraw (during withdrawal window)\\n     * @param immutables The immutables to check\\n     * @param isSource True if checking source chain\\n     * @return canWithdraw True if maker can withdraw\\n     */\\n    function makerCanWithdraw(\\n        Immutables memory immutables,\\n        bool isSource\\n    ) internal view returns (bool) {\\n        return immutables.timelocks.canWithdraw(isSource, false);\\n    }\\n\\n    /**\\n     * @notice Checks if anyone can withdraw (public withdrawal phase)\\n     * @param immutables The immutables to check\\n     * @param isSource True if checking source chain\\n     * @return canWithdraw True if public withdrawal is allowed\\n     */\\n    function publicCanWithdraw(\\n        Immutables memory immutables,\\n        bool isSource\\n    ) internal view returns (bool) {\\n        return immutables.timelocks.canWithdraw(isSource, true);\\n    }\\n\\n    /**\\n     * @notice Checks if the escrow can be cancelled\\n     * @param immutables The immutables to check\\n     * @param isSource True if checking source chain\\n     * @return canCancel True if cancellation is allowed\\n     */\\n    function canCancel(\\n        Immutables memory immutables,\\n        bool isSource\\n    ) internal view returns (bool) {\\n        return immutables.timelocks.canCancel(isSource);\\n    }\\n}\",\"keccak256\":\"0x48eb27b6fedcfa8013b912932e0a2d39be4470c691d91d478fee9c0a368709bf\",\"license\":\"MIT\"},\"contracts/ethereum-hub/libraries/TimelocksLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title TimelocksLib\\n * @notice Library for managing cross-chain timelock coordination\\n * @dev Based on 1inch cross-chain-swap timelock pattern\\n */\\nlibrary TimelocksLib {\\n    struct Timelocks {\\n        uint32 srcWithdrawal;        // Withdrawal time on source chain\\n        uint32 srcPublicWithdrawal;  // Public withdrawal time on source chain\\n        uint32 srcCancellation;      // Cancellation time on source chain\\n        uint32 srcDeployedAt;        // Deployment timestamp on source chain\\n        uint32 dstWithdrawal;        // Withdrawal time on destination chain\\n        uint32 dstCancellation;      // Cancellation time on destination chain\\n        uint32 dstDeployedAt;        // Deployment timestamp on destination chain\\n    }\\n\\n    // Constants for timeout calculations\\n    uint32 private constant MIN_CROSS_CHAIN_DELAY = 30 minutes;\\n    uint32 private constant SAFETY_BUFFER = 2 hours;\\n    uint32 private constant MAX_DURATION = 7 days;\\n\\n    /**\\n     * @notice Creates timelocks for cross-chain atomic swap\\n     * @param baseDuration Base duration for the swap\\n     * @return timelocks Configured timelock structure\\n     */\\n    function create(uint32 baseDuration) internal view returns (Timelocks memory timelocks) {\\n        require(baseDuration >= MIN_CROSS_CHAIN_DELAY, \\\"Duration too short\\\");\\n        require(baseDuration <= MAX_DURATION, \\\"Duration too long\\\");\\n\\n        uint32 currentTime = uint32(block.timestamp);\\n        \\n        // Source chain timelocks\\n        timelocks.srcDeployedAt = currentTime;\\n        timelocks.srcWithdrawal = currentTime + baseDuration;\\n        timelocks.srcPublicWithdrawal = currentTime + baseDuration + SAFETY_BUFFER;\\n        timelocks.srcCancellation = currentTime + baseDuration + (2 * SAFETY_BUFFER);\\n        \\n        // Destination chain timelocks (shorter to ensure atomic execution)\\n        timelocks.dstDeployedAt = currentTime;\\n        timelocks.dstWithdrawal = currentTime + (baseDuration / 2);\\n        timelocks.dstCancellation = currentTime + baseDuration - SAFETY_BUFFER;\\n    }\\n\\n    /**\\n     * @notice Validates timelocks for safety\\n     * @param timelocks Timelocks to validate\\n     * @return valid True if timelocks are safe for cross-chain execution\\n     */\\n    function validate(Timelocks memory timelocks) internal view returns (bool valid) {\\n        uint32 currentTime = uint32(block.timestamp);\\n        \\n        // Basic timestamp ordering validation\\n        valid = timelocks.srcWithdrawal > timelocks.srcDeployedAt &&\\n                timelocks.srcPublicWithdrawal > timelocks.srcWithdrawal &&\\n                timelocks.srcCancellation > timelocks.srcPublicWithdrawal &&\\n                timelocks.dstWithdrawal > timelocks.dstDeployedAt &&\\n                timelocks.dstCancellation > timelocks.dstWithdrawal &&\\n                // Cross-chain safety: dst cancellation before src withdrawal\\n                timelocks.dstCancellation < timelocks.srcWithdrawal &&\\n                // Current time validation\\n                currentTime >= timelocks.srcDeployedAt;\\n    }\\n\\n    /**\\n     * @notice Sets the deployed timestamp for a chain\\n     * @param timelocks Timelocks structure\\n     * @param timestamp Deployment timestamp\\n     * @param isSource True for source chain, false for destination\\n     */\\n    function setDeployedAt(\\n        Timelocks memory timelocks,\\n        uint32 timestamp,\\n        bool isSource\\n    ) internal pure returns (Timelocks memory) {\\n        if (isSource) {\\n            timelocks.srcDeployedAt = timestamp;\\n        } else {\\n            timelocks.dstDeployedAt = timestamp;\\n        }\\n        return timelocks;\\n    }\\n\\n    /**\\n     * @notice Checks if withdrawal is allowed\\n     * @param timelocks Timelocks structure\\n     * @param isSource True for source chain, false for destination\\n     * @param isPublic True for public withdrawal phase\\n     * @return allowed True if withdrawal is allowed\\n     */\\n    function canWithdraw(\\n        Timelocks memory timelocks,\\n        bool isSource,\\n        bool isPublic\\n    ) internal view returns (bool allowed) {\\n        uint32 currentTime = uint32(block.timestamp);\\n        \\n        if (isSource) {\\n            if (isPublic) {\\n                allowed = currentTime >= timelocks.srcPublicWithdrawal &&\\n                         currentTime < timelocks.srcCancellation;\\n            } else {\\n                allowed = currentTime >= timelocks.srcWithdrawal &&\\n                         currentTime < timelocks.srcCancellation;\\n            }\\n        } else {\\n            allowed = currentTime >= timelocks.dstWithdrawal &&\\n                     currentTime < timelocks.dstCancellation;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if cancellation is allowed\\n     * @param timelocks Timelocks structure\\n     * @param isSource True for source chain, false for destination\\n     * @return allowed True if cancellation is allowed\\n     */\\n    function canCancel(\\n        Timelocks memory timelocks,\\n        bool isSource\\n    ) internal view returns (bool allowed) {\\n        uint32 currentTime = uint32(block.timestamp);\\n        \\n        if (isSource) {\\n            allowed = currentTime >= timelocks.srcCancellation;\\n        } else {\\n            allowed = currentTime >= timelocks.dstCancellation;\\n        }\\n    }\\n\\n    /**\\n     * @notice Encodes timelocks into bytes32 for efficient storage\\n     * @param timelocks Timelocks to encode\\n     * @return encoded Encoded timelocks\\n     */\\n    function encode(Timelocks memory timelocks) internal pure returns (bytes32 encoded) {\\n        encoded = bytes32(\\n            (uint256(timelocks.srcWithdrawal) << 224) |\\n            (uint256(timelocks.srcPublicWithdrawal) << 192) |\\n            (uint256(timelocks.srcCancellation) << 160) |\\n            (uint256(timelocks.srcDeployedAt) << 128) |\\n            (uint256(timelocks.dstWithdrawal) << 96) |\\n            (uint256(timelocks.dstCancellation) << 64) |\\n            (uint256(timelocks.dstDeployedAt) << 32)\\n        );\\n    }\\n\\n    /**\\n     * @notice Decodes timelocks from bytes32\\n     * @param encoded Encoded timelocks\\n     * @return timelocks Decoded timelocks\\n     */\\n    function decode(bytes32 encoded) internal pure returns (Timelocks memory timelocks) {\\n        timelocks.srcWithdrawal = uint32(uint256(encoded) >> 224);\\n        timelocks.srcPublicWithdrawal = uint32(uint256(encoded) >> 192);\\n        timelocks.srcCancellation = uint32(uint256(encoded) >> 160);\\n        timelocks.srcDeployedAt = uint32(uint256(encoded) >> 128);\\n        timelocks.dstWithdrawal = uint32(uint256(encoded) >> 96);\\n        timelocks.dstCancellation = uint32(uint256(encoded) >> 64);\\n        timelocks.dstDeployedAt = uint32(uint256(encoded) >> 32);\\n    }\\n}\",\"keccak256\":\"0xd0f1ba2b2c8df9e749a251b34d52a931c4eeecb0df82aabe2c49e2948b66d17f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Deploys and manages escrows for cross-chain atomic swaps",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedDeployment()": [
        {
          "details": "The deployment failed."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addressOfEscrowDst((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))": {
        "details": "Used by orchestration service for coordination",
        "params": {
          "immutables": "Escrow parameters"
        },
        "returns": {
          "escrowAddress": "Computed escrow address"
        }
      },
      "addressOfEscrowSrc((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))": {
        "details": "Used by orchestration service for coordination",
        "params": {
          "immutables": "Escrow parameters"
        },
        "returns": {
          "escrowAddress": "Computed escrow address"
        }
      },
      "createDstEscrow((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256),uint256)": {
        "details": "Called by orchestration service on destination chain",
        "params": {
          "immutables": "Escrow parameters (adapted for destination)",
          "srcCancellationTimestamp": "Source chain cancellation timestamp"
        },
        "returns": {
          "escrow": "Address of created escrow"
        }
      },
      "createEscrowPair((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256),(address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))": {
        "details": "Batch creation for efficiency",
        "params": {
          "dstImmutables": "Destination chain immutables",
          "srcImmutables": "Source chain immutables"
        },
        "returns": {
          "dstEscrow": "Destination escrow address",
          "srcEscrow": "Source escrow address"
        }
      },
      "createSrcEscrow((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))": {
        "details": "Called by orchestration service when initiating cross-chain swap",
        "params": {
          "immutables": "Escrow parameters"
        },
        "returns": {
          "escrow": "Address of created escrow"
        }
      },
      "emergencyPause()": {
        "details": "Only admin can call during emergencies"
      },
      "emergencyUnpause()": {
        "details": "Only admin can call"
      },
      "fillOrderWithEscrow((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256,uint256,address)": {
        "details": "Called by resolver to initiate the swap",
        "params": {
          "escrowAddress": "Target escrow for funds",
          "makingAmount": "Amount to make",
          "order": "The limit order to fill",
          "signature": "Order signature",
          "takingAmount": "Amount to take"
        }
      },
      "getEscrowPair(bytes32)": {
        "params": {
          "orderHash": "The order hash"
        },
        "returns": {
          "dstEscrow": "Destination escrow address",
          "srcEscrow": "Source escrow address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantOrchestratorRole(address)": {
        "params": {
          "orchestrator": "Address of the orchestration service operator"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "verifyEscrowStatus(address)": {
        "params": {
          "escrowAddress": "Escrow to check"
        },
        "returns": {
          "isValid": "True if escrow is valid and active"
        }
      }
    },
    "title": "EscrowFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DstEscrowCreated(address,address,address,bytes32)": {
        "notice": "Emitted when destination escrow is created"
      },
      "SrcEscrowCreated(address,address,address,bytes32)": {
        "notice": "Emitted when source escrow is created"
      }
    },
    "kind": "user",
    "methods": {
      "addressOfEscrowDst((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))": {
        "notice": "Computes the address of a destination escrow"
      },
      "addressOfEscrowSrc((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))": {
        "notice": "Computes the address of a source escrow"
      },
      "createDstEscrow((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256),uint256)": {
        "notice": "Creates a destination chain escrow"
      },
      "createEscrowPair((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256),(address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))": {
        "notice": "Creates escrows for orchestration service"
      },
      "createSrcEscrow((address,address,address,uint256,uint256,bytes32,(uint32,uint32,uint32,uint32,uint32,uint32,uint32),bytes32,uint256))": {
        "notice": "Creates a source chain escrow"
      },
      "emergencyPause()": {
        "notice": "Emergency pause for all escrow creation"
      },
      "emergencyUnpause()": {
        "notice": "Resume escrow creation after emergency"
      },
      "fillOrderWithEscrow((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256,uint256,address)": {
        "notice": "Fills a 1inch limit order as part of cross-chain swap"
      },
      "getEscrowPair(bytes32)": {
        "notice": "Gets escrow addresses for a cross-chain order"
      },
      "grantOrchestratorRole(address)": {
        "notice": "Grants orchestrator role to the orchestration service"
      },
      "isValidEscrow(address)": {
        "notice": "Checks if an address is a valid escrow created by this factory"
      },
      "pause()": {
        "notice": "Pauses the factory"
      },
      "unpause()": {
        "notice": "Unpauses the factory"
      },
      "verifyEscrowStatus(address)": {
        "notice": "Verifies escrow status for orchestration"
      }
    },
    "notice": "Concrete implementation of escrow factory for 1inch integration",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1035,
        "contract": "contracts/ethereum-hub/escrow/EscrowFactory.sol:EscrowFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1030_storage)"
      },
      {
        "astId": 2726,
        "contract": "contracts/ethereum-hub/escrow/EscrowFactory.sol:EscrowFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3990,
        "contract": "contracts/ethereum-hub/escrow/EscrowFactory.sol:EscrowFactory",
        "label": "escrows",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3994,
        "contract": "contracts/ethereum-hub/escrow/EscrowFactory.sol:EscrowFactory",
        "label": "isValidEscrow",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1030_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1030_storage"
      },
      "t_struct(RoleData)1030_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1027,
            "contract": "contracts/ethereum-hub/escrow/EscrowFactory.sol:EscrowFactory",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1029,
            "contract": "contracts/ethereum-hub/escrow/EscrowFactory.sol:EscrowFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}