# =============================================================================
# 1BALANCER ORCHESTRATOR SERVICE CONFIGURATION
# =============================================================================
# This file configures the orchestration service that coordinates cross-chain
# atomic swaps between BASE (EVM) and NEAR Protocol using 1inch Fusion+
# Source: /packages/hardhat/contracts/ethereum-hub/docs/06-orchestration-interface.md
# =============================================================================

# -----------------------------------------------------------------------------
# NETWORK CONFIGURATION
# -----------------------------------------------------------------------------
# RPC endpoints for blockchain networks used in cross-chain atomic swaps

# BASE_RPC_URL: RPC endpoint for BASE Sepolia testnet (Layer 2 Ethereum)
# Source: 06-orchestration-interface.md line 512 "BASE_RPC_URL=https://mainnet.base.org"
# Purpose: Connect to BASE network for EVM-side escrow contract interactions
# Default: Uses BASE Sepolia testnet for development/testing
BASE_RPC_URL=https://sepolia.base.org

# NEAR_RPC_URL: RPC endpoint for NEAR Protocol testnet
# Source: 06-orchestration-interface.md line 513 "NEAR_RPC_URL=https://rpc.mainnet.near.org"
# Purpose: Connect to NEAR network for HTLC contract interactions
# Default: Uses NEAR testnet for development/testing
NEAR_RPC_URL=https://rpc.testnet.near.org

# ETHEREUM_RPC_URL: RPC endpoint for Ethereum Sepolia testnet (optional)
# Source: task5-orchestrator-full-implementation.md deployment configuration
# Purpose: Fallback or alternative EVM chain support
# Provider: Alchemy recommended for reliability and analytics
ETHEREUM_RPC_URL=https://eth-sepolia.g.alchemy.com/v2/YOUR_ALCHEMY_KEY

# -----------------------------------------------------------------------------
# SERVICE CONFIGURATION
# -----------------------------------------------------------------------------
# Core service settings for the Express.js orchestration server

# PORT: HTTP server port for REST API endpoints
# Source: 06-orchestration-interface.md line 31 "http://localhost:8080/api/v1"
# Purpose: Main API server port for client connections
# Default: 8080 (standard for development services)
PORT=8080

# WS_PORT: WebSocket server port for real-time updates
# Source: 06-orchestration-interface.md line 517 "WS_PORT=8081"
# Purpose: Separate port for WebSocket connections to avoid conflicts
# Note: WebSocket events include session_update, price_update, alerts
WS_PORT=8081

# LOG_LEVEL: Logging verbosity level
# Source: task5-orchestrator-full-implementation.md line 144 "LOG_LEVEL=debug"
# Purpose: Control log output detail for debugging and monitoring
# Options: error, warn, info, debug, trace
LOG_LEVEL=debug

# -----------------------------------------------------------------------------
# SECURITY CONFIGURATION
# -----------------------------------------------------------------------------
# Authentication and authorization settings

# API_KEY_SECRET: Secret key for API authentication
# Source: 06-orchestration-interface.md lines 428-435 authentication middleware
# Purpose: Authenticate REST API requests via X-API-Key header
# Security: MUST be changed in production to a cryptographically secure value
API_KEY_SECRET=your-secure-api-key-secret

# JWT_SECRET: Secret key for JWT token signing and verification
# Source: 06-orchestration-interface.md WebSocket authentication section
# Purpose: Sign/verify JWT tokens for WebSocket authentication
# Security: MUST be changed in production to a cryptographically secure value
JWT_SECRET=your-secure-jwt-secret

# CORS_ORIGIN: Allowed origins for Cross-Origin Resource Sharing
# Source: config/index.ts cors configuration
# Purpose: Control which frontend domains can access the API
# Format: Single origin or comma-separated list
CORS_ORIGIN=http://localhost:3000

# -----------------------------------------------------------------------------
# EXTERNAL SERVICES
# -----------------------------------------------------------------------------
# Configuration for third-party service integrations

# ONEINCH_API_KEY: API key for 1inch Protocol integration
# Source: task5-orchestrator-full-implementation.md line 140 "INCH_API_KEY=hackathon-api-key"
# Purpose: Access 1inch DEX aggregator for price quotes and order execution
# Note: Special hackathon API keys available through ETHGlobal (no KYC required)
ONEINCH_API_KEY=your-1inch-api-key

# ONEINCH_API_URL: Base URL for 1inch API endpoints
# Source: 06-orchestration-interface.md Dutch auction quote generation
# Purpose: 1inch DEX aggregator API endpoint for price data
# Default: Official 1inch API v5 endpoint
ONEINCH_API_URL=https://api.1inch.dev

# REDIS_URL: Redis connection string (currently not used - using in-memory storage)
# Source: Legacy requirement - sessions now stored in-memory
# Purpose: Would be used for distributed state in multi-instance deployments
# Note: Not required for single-instance deployments or development
# REDIS_URL=redis://localhost:6379  # Uncomment if Redis is needed in the future

# -----------------------------------------------------------------------------
# SMART CONTRACT ADDRESSES
# -----------------------------------------------------------------------------
# Deployed contract addresses on BASE Sepolia testnet

# ESCROW_FACTORY_ADDRESS: Factory contract for creating source escrows
# Source: ethereum-hub architecture, CrossChainCoordinator.ts
# Purpose: Deploy source-side escrow contracts for atomic swaps
# Note: Deploy EscrowFactory.sol and update this address
ESCROW_FACTORY_ADDRESS=0x0000000000000000000000000000000000000000

# FUSION_PLUS_HUB_ADDRESS: Main Fusion+ protocol hub contract
# Source: ethereum-hub docs, 1inch Fusion+ integration
# Purpose: Core Fusion+ protocol contract for limit order management
# Note: Deploy FusionPlusHub.sol and update this address
FUSION_PLUS_HUB_ADDRESS=0x0000000000000000000000000000000000000000

# FUSION_PLUS_RESOLVER_ADDRESS: Custom resolver for Fusion+ orders
# Source: task5 docs - implements resolver without KYC requirements
# Purpose: Handle Fusion+ order resolution and execution
# Note: Deploy custom resolver contract and update this address
FUSION_PLUS_RESOLVER_ADDRESS=0x0000000000000000000000000000000000000000

# LIMIT_ORDER_PROTOCOL_ADDRESS: 1inch Limit Order Protocol contract
# Source: 1inch protocol documentation
# Purpose: Official 1inch limit order protocol for order management
# Note: This is the official 1inch contract address (constant across networks)
LIMIT_ORDER_PROTOCOL_ADDRESS=0x111111125421ca6dc452d289314280a0f8842a65

# -----------------------------------------------------------------------------
# NEAR PROTOCOL CONFIGURATION
# -----------------------------------------------------------------------------
# NEAR blockchain specific settings

# NEAR_NETWORK_ID: NEAR network identifier
# Source: 06-orchestration-interface.md NEAR integration
# Purpose: Specify which NEAR network to connect to
# Options: mainnet, testnet, localnode
NEAR_NETWORK_ID=testnet

# NEAR_ORCHESTRATOR_ACCOUNT_ID: NEAR account for the orchestrator service
# Source: ethereum-hub docs, NEAR HTLC deployment
# Purpose: NEAR account that will deploy and manage HTLC contracts
# Format: Standard NEAR account format (account.near or account.testnet)
NEAR_ORCHESTRATOR_ACCOUNT_ID=orchestrator.testnet

# NEAR_PRIVATE_KEY: Private key for NEAR orchestrator account
# Source: NEAR SDK integration requirements
# Purpose: Sign transactions and deploy contracts on NEAR
# Format: ed25519:base58_encoded_private_key
# Security: NEVER commit real private keys to version control
NEAR_PRIVATE_KEY=ed25519:YOUR_NEAR_PRIVATE_KEY

# -----------------------------------------------------------------------------
# MONITORING AND OBSERVABILITY
# -----------------------------------------------------------------------------
# Health monitoring and metrics collection settings

# METRICS_ENABLED: Enable Prometheus metrics collection
# Source: 06-orchestration-interface.md lines 489-503 MetricsCollector
# Purpose: Collect performance metrics for monitoring and alerting
# Note: Exposes metrics on separate port for Prometheus scraping
METRICS_ENABLED=true

# METRICS_PORT: Port for Prometheus metrics endpoint
# Source: 06-orchestration-interface.md monitoring configuration
# Purpose: Separate port for metrics to avoid mixing with API traffic
# Default: Standard Prometheus port 9090
METRICS_PORT=9090

# SENTRY_DSN: Sentry error tracking endpoint (optional)
# Source: 06-orchestration-interface.md line 529 "SENTRY_DSN=your-sentry-dsn"
# Purpose: Centralized error tracking and alerting
# Note: Leave empty to disable Sentry integration
SENTRY_DSN=

# -----------------------------------------------------------------------------
# RATE LIMITING CONFIGURATION
# -----------------------------------------------------------------------------
# API rate limiting to prevent abuse and ensure fair usage

# RATE_LIMIT_WINDOW_MS: Time window for rate limiting in milliseconds
# Source: 06-orchestration-interface.md lines 441-446 rate limiting
# Purpose: Time window for counting requests (15 minutes = 900000ms)
# Default: 15 minutes sliding window
RATE_LIMIT_WINDOW_MS=900000

# RATE_LIMIT_MAX_REQUESTS: Maximum requests per time window
# Source: 06-orchestration-interface.md rate limiting configuration
# Purpose: Maximum API requests allowed per IP per time window
# Default: 100 requests per 15 minutes (conservative for demo)
RATE_LIMIT_MAX_REQUESTS=100

# -----------------------------------------------------------------------------
# BLOCKCHAIN EVENT MONITORING
# -----------------------------------------------------------------------------
# Settings for monitoring blockchain events across chains

# BLOCK_POLLING_INTERVAL: Interval between block polling in milliseconds
# Source: EventMonitor.ts configuration
# Purpose: How often to check for new blocks and events
# Default: 5 seconds (5000ms) for reasonable latency vs RPC load
BLOCK_POLLING_INTERVAL=5000

# EVENT_CONFIRMATION_BLOCKS: Number of confirmations before trusting events
# Source: ethereum-hub security considerations
# Purpose: Wait for block confirmations to avoid reorg issues
# Default: 3 blocks (reasonable security vs speed tradeoff)
EVENT_CONFIRMATION_BLOCKS=3

# MAX_REORG_DEPTH: Maximum blockchain reorganization depth to handle
# Source: EventMonitor.ts reorg protection
# Purpose: How deep to look back for potential chain reorganizations
# Default: 10 blocks (covers most reorg scenarios)
MAX_REORG_DEPTH=10

# -----------------------------------------------------------------------------
# SESSION MANAGEMENT
# -----------------------------------------------------------------------------
# Swap session lifecycle and cleanup configuration

# SESSION_TIMEOUT_SECONDS: Maximum session duration in seconds
# Source: SessionManager.ts timeout handling
# Purpose: Automatic session expiration to prevent resource leaks
# Default: 2 hours (7200 seconds) for complex cross-chain operations
SESSION_TIMEOUT_SECONDS=7200

# MAX_ACTIVE_SESSIONS: Maximum concurrent active sessions
# Source: SessionManager.ts resource management
# Purpose: Prevent resource exhaustion from too many concurrent swaps
# Default: 1000 sessions (adjust based on server capacity)
MAX_ACTIVE_SESSIONS=1000

# SESSION_CLEANUP_INTERVAL: Interval for cleaning expired sessions (milliseconds)
# Source: SessionManager.ts cleanup routine
# Purpose: How often to remove expired/completed sessions from memory
# Default: 5 minutes (300000ms) for regular cleanup
SESSION_CLEANUP_INTERVAL=300000

# -----------------------------------------------------------------------------
# DUTCH AUCTION SIMULATION
# -----------------------------------------------------------------------------
# Price discovery mechanism settings for Fusion+ simulation

# DUTCH_AUCTION_DURATION_SECONDS: Duration of Dutch auction in seconds
# Source: 06-orchestration-interface.md lines 254-275 DutchAuctionSimulator
# Purpose: How long the auction runs (price decreases over time)
# Default: 5 minutes (300 seconds) for reasonable price discovery
DUTCH_AUCTION_DURATION_SECONDS=300

# DUTCH_AUCTION_START_PREMIUM: Starting price premium as decimal
# Source: 06-orchestration-interface.md Dutch auction algorithm
# Purpose: How much above market price to start (0.5% = 0.005)
# Default: 0.5% premium to incentivize quick fulfillment
DUTCH_AUCTION_START_PREMIUM=0.005

# DUTCH_AUCTION_END_DISCOUNT: Ending price discount as decimal
# Source: 06-orchestration-interface.md Dutch auction algorithm
# Purpose: How much below market price to end (0.5% = 0.005)
# Default: 0.5% discount to ensure eventual fulfillment
DUTCH_AUCTION_END_DISCOUNT=0.005