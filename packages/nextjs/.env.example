# Template for NextJS environment variables (packages/nextjs/.env.example)

# How to use env files in this repo
# - Local development: place your local settings in `.env` (this repo prefers .env for local dev so your app runs out of the box).
# - Production/Hosted: set variables in your platform (e.g., Vercel) or place them in `.env.local` (never commit real secrets).
# - Precedence: Next.js loads .env, then .env.local overrides it. In CI/hosting, use platform secrets instead of files.
#
# This project supports two Supabase setups:
# 1) Local dev with Supabase CLI (HS256, shared secret, no JWKS). Recommended when running `supabase start` locally.
# 2) Production/Hosted Supabase (ES256/RS256 asymmetric keys with JWKS). Recommended for deployed environments.
#
# Notes:
# - Client-exposed vars must be prefixed with NEXT_PUBLIC_.
# - Never commit real secrets. Example values below are safe defaults for local Supabase CLI only.

# REQUIRED (if using public networks): Your Alchemy API key for accessing Ethereum networks
# • Optional for purely local development (anvil/foundry only)
# • Sign up at https://www.alchemy.com/ and create a new API key
NEXT_PUBLIC_ALCHEMY_API_KEY=

# REQUIRED (if using 1inch as RPC provider): Your 1inch API key for accessing supported networks
# • Get your key at https://portal.1inch.dev/
# • Used for DeFi-focused RPC calls across supported chains (Ethereum, Arbitrum, Avalanche, BNB, etc.)
# • Supports mainnets only; testnets may not be available
NEXT_PUBLIC_1INCH_API_KEY=

# REQUIRED: Your Privy project ID from console/dashboard
# • Create a Privy account and project to enable social login + wallets
# • Visit https://dashboard.privy.io/apps/[YOUR-PROJECT-ID]/login-methods and enable
#   "Ethereum wallets" and any social login methods you want to support
NEXT_PUBLIC_PRIVY_APP_ID=

# ------------------------------------------------------
# Local Development — Supabase CLI (HS256, shared secret)
# ------------------------------------------------------
# Use Supabase CLI defaults. The app signs RLS JWTs with HS256.
# Run `supabase start`. 404 at /auth/v1/keys is expected for HS256.
# These values are safe examples for local only—do not use in production.

# NEXT_PUBLIC_SUPABASE_URL=http://127.0.0.1:54321
# NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
# SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
# SUPABASE_JWT_ALG=HS256
# SUPABASE_JWT_HS256_SECRET=super-secret-jwt-token-with-at-least-32-characters-long

# ------------------------------------------------------
# Production/Hosted — Supabase (ES256/RS256 with JWKS)
# ------------------------------------------------------
# Use asymmetric signing keys. The app mints ES256 tokens by default; set SUPABASE_JWT_ALG accordingly.
# Generate keys in Supabase Dashboard → Settings → API → JWT Signing Keys.
# Ensure /auth/v1/keys returns your public JWKS (kid should match SUPABASE_JWT_KID if you set one).

# NEXT_PUBLIC_SUPABASE_URL=https://<PROJECT_ID>.supabase.co
# NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY=sb_publishable_...
# SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOi... (service role key from Supabase dashboard)
# SUPABASE_JWT_ALG=ES256
# SUPABASE_JWT_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"
# SUPABASE_JWT_KID=<kid-from-your-JWK>
